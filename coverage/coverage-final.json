{"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/Api.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/Api.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":61}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":38}},"5":{"start":{"line":8,"column":0},"end":{"line":12,"column":40}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":58}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":74}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":68}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":36}},"10":{"start":{"line":15,"column":0},"end":{"line":25,"column":42}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":67}},"12":{"start":{"line":17,"column":4},"end":{"line":17,"column":69}},"13":{"start":{"line":18,"column":4},"end":{"line":18,"column":63}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":67}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":77}},"16":{"start":{"line":21,"column":4},"end":{"line":21,"column":91}},"17":{"start":{"line":22,"column":4},"end":{"line":22,"column":111}},"18":{"start":{"line":23,"column":4},"end":{"line":23,"column":73}},"19":{"start":{"line":24,"column":4},"end":{"line":24,"column":81}},"20":{"start":{"line":26,"column":0},"end":{"line":26,"column":38}},"21":{"start":{"line":29,"column":8},"end":{"line":29,"column":23}},"22":{"start":{"line":30,"column":8},"end":{"line":30,"column":25}},"23":{"start":{"line":33,"column":0},"end":{"line":33,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":1},"end":{"line":8,"column":2}},"loc":{"start":{"line":8,"column":25},"end":{"line":12,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":1},"end":{"line":15,"column":2}},"loc":{"start":{"line":15,"column":26},"end":{"line":25,"column":1}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":31},"end":{"line":31,"column":5}},"line":28}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":3},"end":{"line":12,"column":38}},"type":"binary-expr","locations":[{"start":{"line":12,"column":3},"end":{"line":12,"column":15}},{"start":{"line":12,"column":20},"end":{"line":12,"column":37}}],"line":12},"1":{"loc":{"start":{"line":25,"column":3},"end":{"line":25,"column":40}},"type":"binary-expr","locations":[{"start":{"line":25,"column":3},"end":{"line":25,"column":16}},{"start":{"line":25,"column":21},"end":{"line":25,"column":39}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":4,"22":4,"23":1},"f":{"0":1,"1":1,"2":4},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"Api.js","sourceRoot":"","sources":["Api.ts"],"names":[],"mappings":";;AAMA,8DAU0C;AA6TzC,sBApUA,qBAAW,CAoUA;AACX,uBApUA,sBAAY,CAoUA;AACZ,mBApUA,kBAAQ,CAoUA;AA5TT,IAAK,YAIJ;AAJD,WAAK,YAAY;IAChB,qDAAqC,CAAA;IACrC,qEAAqD,CAAA;IACrD,+DAA+C,CAAA;AAChD,CAAC,EAJI,YAAY,KAAZ,YAAY,QAIhB;AAyTA,oCAAY;AAvTb,IAAK,aA2BJ;AA3BD,WAAK,aAAa;IAEjB,8DAA6C,CAAA;IAG7C,gEAA+C,CAAA;IAG/C,0DAAyC,CAAA;IAGzC,8DAA6C,CAAA;IAG7C,wEAAuD,CAAA;IAGvD,sFAAqE,CAAA;IAGrE,0GAAyF,CAAA;IAGzF,oEAAmD,CAAA;IAGnD,4EAA2D,CAAA;AAC5D,CAAC,EA3BI,aAAa,KAAb,aAAa,QA2BjB;AA6RA,sCAAa;AA7Qd,MAAM,QAAS,SAAQ,KAAK;IAC3B,YAAmB,IAAkB,EAAE,OAAgB;QACvD,KAAK,CAAC,OAAO,CAAC,CAAC;QADI,SAAI,GAAJ,IAAI,CAAc;IAErC,CAAC;CACD;AA4QA,4BAAQ","sourcesContent":["import { Map, List } from 'immutable';\nimport * as Koa from 'koa';\nimport * as winston from 'winston';\nimport { Config } from 'lexica-dialog-model/dist/Config';\nimport { Intent } from 'lexica-dialog-model/dist/Intent';\nimport { Issue, Status } from 'lexica-dialog-model/dist/Issue';\nimport {\n\tBaseMessage,\n\tRequestMessage,\n\tRequestType,\n\tResponseType,\n\tItemType,\n\tResponse,\n\tTextResponse,\n\tOptionsResponse,\n\tItemsResponse,\n} from 'lexica-dialog-model/dist/Message';\nimport { SenderInfo } from 'lexica-dialog-model/dist/SenderInfo';\n\nenum BotErrorCode {\n\tINTENT_NOT_FOUND = 'INTENT_NOT_FOUND',\n\tMISSING_REQUIRED_FEATURE = 'MISSING_REQUIRED_FEATURE',\n\tINVALID_RESPONSE_TYPE = 'INVALID_RESPONSE_TYPE',\n}\n\nenum RunTimeConfig {\n\t// number\n\tSESSION_EXPIRE_IN_MS = 'SESSION_EXPIRE_IN_MS',\n\n\t// string\n\tFALLBACK_COMMAND_NAME = 'FALLBACK_COMMAND_NAME',\n\n\t// boolean\n\tSUSPEND_AUTO_REPLY = 'SUSPEND_AUTO_REPLY',\n\n\t// string[] : optional\n\tMESSENGER_WHITE_LIST = 'MESSENGER_WHITE_LIST',\n\n\t// string\n\tFILE_REQUEST_COMMAND_NAME = 'FILE_REQUEST_COMMAND_NAME',\n\n\t// string\n\tCONFIRM_CLOSE_ISSUE_COMMAND_NAME = 'CONFIRM_CLOSE_ISSUE_COMMAND_NAME',\n\n\t// integer\n\tTIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE = 'TIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE',\n\n\t// string\n\tRECREATE_ISSUE_KEY_WORD = 'RECREATE_ISSUE_KEY_WORD',\n\n\t// object\n\tADDITIONAL_RESPONSE_MESSAGE = 'ADDITIONAL_RESPONSE_MESSAGE',\n}\n\ninterface BotCommand {\n\tname: string;\n\tfeatures: Map<string, string>;\n}\n\ninterface BotContextCommand {\n\tname?: string;\n\tintent?: Intent;\n\tfeatures: Map<string, string>;\n\tprocessedFeatures: Map<string, any>;\n\tbotResponses: List<Response>;\n\tattributes: Map<string, any>;\n}\n\nclass BotError extends Error {\n\tconstructor(public code: BotErrorCode, message?: string) {\n\tsuper(message);\n\t}\n}\n\ninterface BotRequest {\n\ttype: RequestType;\n\tlocale: string;\n\tsenderId: string;\n\tmessage?: string;\n\tfileUrl?: string;\n\tfileStoredPath?: string;\n\tfileContentType?: string;\n\tcommands?: List<BotCommand>;\n}\n\ninterface BotOptionResponse extends OptionsResponse {\n\tforceShow?: boolean;\n}\n\ntype BotResponse = TextResponse | BotOptionResponse | ItemsResponse;\n\ninterface ConfigRepository {\n\tfindByUni(uni: string): Promise<Config[]>;\n}\n\ninterface IntentRepository {\n\tfindByUniCommandName(uni: string, command: string): Promise<Intent | null>;\n}\n\ninterface IssueRepository {\n\tcreate(issue: Issue): Promise<Issue>;\n\tsave(issue: Issue): Promise<Issue>;\n\tfindByUniAndSenderIdAndStatus(uni: string, senderId: string, status: Status): Promise<Issue[]>;\n}\n\ninterface SessionOption {\n\tcommand: string;\n\tfeatures: { [key: string]: string };\n\ttextOnlyIndicator: string;\n\tliveCount: number;\n}\n\ninterface Session {\n\tid: string;\n\tmemories: Array<{\n\texpire: number;\n\tfeatures: { [key: string]: string };\n\tintent: Intent;\n\t}>;\n\tconversation?: {\n\tintent: Intent;\n\tfeatures: { [key: string]: string };\n\t};\n\tlastOptions?: SessionOption[];\n}\n\ninterface SessionRepository {\n\tfindByUniAndSenderId(uni: string, senderId: string): Promise<Session>;\n\tsave(uni: string, senderId: string, session: Session, expireInMs: number): Promise<void>;\n}\n\ninterface IntentMemoryFeatures {\n\tcommand: string;\n\tfeatures: {\n\t[key: string]: string;\n\t};\n}\n\ninterface SessionService {\n\tinit(): Promise<void> ;\n\tsave(): Promise<void> ;\n\tgetSessionId(): string;\n\taddMemory(intent: Intent, features: Map<string, string>): void;\n\tgetMemoriesFeatures(): Map<string, string>;\n\tgetIntentMemoryFeatures(): List<IntentMemoryFeatures>;\n\tstartConversation(intent: Intent, features: Map<string, string>): void ;\n\thasConversation(): boolean;\n\tgetConversationIntent(): Intent;\n\tgetConversationFeatures(): Map<string, string> ;\n\tupdateConversationFeatures(features: Map<string, string>): void ;\n\tendConversation(): void ;\n\tsetOptions(options: SessionOption[]): void ;\n\thasOptions(): boolean;\n\tgetOptions(): SessionOption[];\n\tremoveOptions(): void;\n}\n\ninterface MessageRepository {\n\tcreate(message: BaseMessage): Promise<BaseMessage>;\n\tsave(message: BaseMessage): Promise<BaseMessage>;\n\tfindByUniAndSenderIdAndIssueId(\n\tuni: string, senderId: string, issueId: string): Promise<BaseMessage[]>;\n\tcountAll(): Promise<number>;\n}\n\ninterface Messenger<I, O> {\n\treadonly name: string;\n\trequest(rawRequest: I): BotRequest;\n\tresponse(responses: List<BotResponse>, senderId: string, rawRequest?: I): List<O>;\n\tsend(responses: List<O>, configs: Map<string, Config>): Promise<void>;\n}\n\ninterface NlpService {\n\tanalyse(\n\tmessage: string,\n\tuni: string,\n\tintentMemoriesFeatures?: List<IntentMemoryFeatures>,\n\t): Promise<List<BotCommand>>;\n}\n\ninterface SenderInfoRepository {\n\tcreate(senderInfo: SenderInfo): Promise<SenderInfo>;\n\tfindOneByUniAndMessengerAndSenderId(\n\tuni: string,\n\tmessenger: string,\n\tsenderId: string,\n\t): Promise<SenderInfo | null>;\n}\n\ninterface BaseCommandContext {\n\tuni: string;\n\tsenderId: string;\n\tlocale: string;\n\tuniConfigs: Map<string, Config>;\n\tmessengerName: string;\n\n\tissue?: Issue;\n\tsenderInfo?: SenderInfo;\n}\n\ninterface ProcessorContext extends BaseCommandContext {\n\tunusedProperty?: string;\n}\n\ninterface ExecutorContext extends BaseCommandContext {\n\tcommand: BotContextCommand;\n\tmessenger: Messenger<any, any>;\n\tsessionService: SessionService;\n\n\tintentRepository: IntentRepository;\n\tsessionRepository: SessionRepository;\n\tconfigRepository: ConfigRepository;\n\tmessageRepository: MessageRepository;\n\tissueRepository: IssueRepository;\n\tsenderInfoRepository: SenderInfoRepository;\n\n\trequestMessage?: RequestMessage;\n}\n\ntype PreProcessor = (context: ProcessorContext, features: Map<string, string>) => Promise<Map<string, string>>;\n\ntype PostProcessor = (context: ProcessorContext, features: Map<string, any>) => Promise<Map<string, any>>;\n\ntype Executor = (context: ExecutorContext) => Promise<void>;\n\ninterface File {\n\tpath: string;\n\tcontentType: string;\n}\n\ninterface FileService {\n\tcopy(path: string): Promise<File>;\n}\n\ninterface TranscodeService {\n\ttranscodeAudio(file: File): Promise<File>;\n\ttranscodeVideo(file: File): Promise<File>;\n}\n\ninterface AwsTranscoderTypeConfig {\n\tpipelineId: string;\n\tpreset: {\n\tid: string;\n\tsuffix: string;\n\tcontentType: string;\n\t};\n}\n\ninterface AwsTranscoderConfig {\n\tapiVersion: string;\n\tdelay: number;\n\tmaxAttempts: number;\n\taudio: AwsTranscoderTypeConfig;\n\tvideo: AwsTranscoderTypeConfig;\n}\n\ninterface BotServerConfig {\n\tport: number;\n\tmongo: {\n\turl: string;\n\toptions?: any;\n\t};\n\tredis: {\n\turl: string;\n\toptions?: any;\n\t};\n\taws: {\n\taccessKeyId: string;\n\tsecretAccessKey: string;\n\tregion: string;\n\ts3?: {\n\t\tapiVersion: string;\n\t\tbucket: string;\n\t};\n\ttranscoder?: AwsTranscoderConfig;\n\t};\n\tnlp?: {\n\turl: string,\n\t};\n\tnlpService?: NlpService;\n\tfileService?: FileService;\n\ttranscodeService?: TranscodeService;\n\tintentRepository?: IntentRepository;\n\tsessionRepository?: SessionRepository;\n\tconfigRepository?: ConfigRepository;\n\tmessageRepository?: MessageRepository;\n\tissueRepository?: IssueRepository;\n\tsenderInfoRepository?: SenderInfoRepository;\n\tlogger?: winston.LoggerInstance;\n\tlogLevel?: string;\n\t// path\n\tmessengers: Map<string, Messenger<any, any>>;\n\t// name\n\tpreProcessors: Map<string, PreProcessor>;\n\tpostProcessors: Map<string, PostProcessor>;\n\texecutors: Map<string, Executor>;\n\tmiddlewares: Map<number, Middleware>;\n}\n\ninterface BotContext {\n\tserverContext: Koa.Context;\n\trawRequest: any;\n\tuni: string;\n\tmessenger: Messenger<any, any>;\n\tlogger: winston.LoggerInstance;\n\tintentRepository: IntentRepository;\n\tsessionRepository: SessionRepository;\n\tconfigRepository: ConfigRepository;\n\tmessageRepository: MessageRepository;\n\tissueRepository: IssueRepository;\n\tsenderInfoRepository: SenderInfoRepository;\n\tnlpService: NlpService;\n\tfileService: FileService;\n\ttranscodeService: TranscodeService;\n\tpreProcessors: Map<string, PreProcessor>;\n\tpostProcessors: Map<string, PostProcessor>;\n\texecutors: Map<string, Executor>;\n\tresponses: List<BotResponse>;\n\tcommands: List<BotContextCommand>;\n\tuniConfigs: Map<string, Config>;\n\tattributes: Map<string, any>;\n\n\trequest?: BotRequest;\n\trawResponses?: List<any>;\n\tsessionService?: SessionService;\n\trequestMessage?: RequestMessage;\n\tissue?: Issue;\n\tsenderInfo?: SenderInfo;\n}\n\ntype Middleware = (context: BotContext, next: () => Promise<void>) => Promise<void>;\n\nexport {\n\tRequestType,\n\tResponseType,\n\tItemType,\n\tBotErrorCode,\n\tRunTimeConfig,\n\tBotCommand,\n\tBotContextCommand,\n\tBotError,\n\tBotRequest,\n\tBotOptionResponse,\n\tBotResponse,\n\tConfigRepository,\n\tIntentRepository,\n\tIssueRepository,\n\tSessionOption,\n\tSession,\n\tSessionRepository,\n\tIntentMemoryFeatures,\n\tSessionService,\n\tMessageRepository,\n\tMessenger,\n\tNlpService,\n\tSenderInfoRepository,\n\tBaseCommandContext,\n\tProcessorContext,\n\tExecutorContext,\n\tPreProcessor,\n\tPostProcessor,\n\tExecutor,\n\tFile,\n\tFileService,\n\tTranscodeService,\n\tAwsTranscoderTypeConfig,\n\tAwsTranscoderConfig,\n\tBotContext,\n\tMiddleware,\n\tBotServerConfig,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"01c0e733f3c53761b5a3d4002541135223ac7f35"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/BotServer.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/BotServer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":26}},"3":{"start":{"line":5,"column":19},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":36}},"6":{"start":{"line":8,"column":12},"end":{"line":8,"column":30}},"7":{"start":{"line":9,"column":16},"end":{"line":9,"column":34}},"8":{"start":{"line":10,"column":17},"end":{"line":10,"column":34}},"9":{"start":{"line":11,"column":16},"end":{"line":11,"column":32}},"10":{"start":{"line":12,"column":35},"end":{"line":12,"column":70}},"11":{"start":{"line":13,"column":20},"end":{"line":13,"column":44}},"12":{"start":{"line":14,"column":18},"end":{"line":14,"column":40}},"13":{"start":{"line":15,"column":22},"end":{"line":15,"column":49}},"14":{"start":{"line":16,"column":23},"end":{"line":16,"column":51}},"15":{"start":{"line":17,"column":28},"end":{"line":17,"column":62}},"16":{"start":{"line":18,"column":18},"end":{"line":18,"column":38}},"17":{"start":{"line":19,"column":14},"end":{"line":19,"column":30}},"18":{"start":{"line":22,"column":8},"end":{"line":22,"column":32}},"19":{"start":{"line":23,"column":8},"end":{"line":23,"column":35}},"20":{"start":{"line":24,"column":8},"end":{"line":24,"column":29}},"21":{"start":{"line":25,"column":8},"end":{"line":25,"column":44}},"22":{"start":{"line":26,"column":8},"end":{"line":26,"column":85}},"23":{"start":{"line":27,"column":8},"end":{"line":27,"column":90}},"24":{"start":{"line":28,"column":8},"end":{"line":28,"column":93}},"25":{"start":{"line":29,"column":8},"end":{"line":29,"column":78}},"26":{"start":{"line":32,"column":33},"end":{"line":32,"column":44}},"27":{"start":{"line":33,"column":8},"end":{"line":33,"column":70}},"28":{"start":{"line":34,"column":8},"end":{"line":34,"column":42}},"29":{"start":{"line":35,"column":8},"end":{"line":35,"column":51}},"30":{"start":{"line":36,"column":8},"end":{"line":36,"column":102}},"31":{"start":{"line":37,"column":8},"end":{"line":41,"column":11}},"32":{"start":{"line":42,"column":8},"end":{"line":42,"column":50}},"33":{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},"34":{"start":{"line":44,"column":12},"end":{"line":49,"column":13}},"35":{"start":{"line":45,"column":16},"end":{"line":45,"column":54}},"36":{"start":{"line":48,"column":16},"end":{"line":48,"column":87}},"37":{"start":{"line":52,"column":12},"end":{"line":52,"column":53}},"38":{"start":{"line":54,"column":8},"end":{"line":62,"column":9}},"39":{"start":{"line":55,"column":12},"end":{"line":55,"column":67}},"40":{"start":{"line":57,"column":13},"end":{"line":62,"column":9}},"41":{"start":{"line":58,"column":12},"end":{"line":58,"column":71}},"42":{"start":{"line":60,"column":13},"end":{"line":62,"column":9}},"43":{"start":{"line":61,"column":12},"end":{"line":61,"column":55}},"44":{"start":{"line":63,"column":8},"end":{"line":71,"column":9}},"45":{"start":{"line":64,"column":12},"end":{"line":64,"column":80}},"46":{"start":{"line":66,"column":13},"end":{"line":71,"column":9}},"47":{"start":{"line":67,"column":12},"end":{"line":67,"column":99}},"48":{"start":{"line":69,"column":13},"end":{"line":71,"column":9}},"49":{"start":{"line":70,"column":12},"end":{"line":70,"column":65}},"50":{"start":{"line":72,"column":8},"end":{"line":72,"column":128}},"51":{"start":{"line":73,"column":8},"end":{"line":73,"column":141}},"52":{"start":{"line":74,"column":8},"end":{"line":74,"column":128}},"53":{"start":{"line":75,"column":8},"end":{"line":75,"column":131}},"54":{"start":{"line":76,"column":8},"end":{"line":76,"column":125}},"55":{"start":{"line":77,"column":8},"end":{"line":77,"column":140}},"56":{"start":{"line":78,"column":8},"end":{"line":88,"column":9}},"57":{"start":{"line":79,"column":12},"end":{"line":84,"column":15}},"58":{"start":{"line":87,"column":12},"end":{"line":87,"column":45}},"59":{"start":{"line":89,"column":8},"end":{"line":89,"column":24}},"60":{"start":{"line":90,"column":8},"end":{"line":90,"column":63}},"61":{"start":{"line":93,"column":8},"end":{"line":93,"column":32}},"62":{"start":{"line":94,"column":8},"end":{"line":94,"column":32}},"63":{"start":{"line":95,"column":8},"end":{"line":95,"column":36}},"64":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"65":{"start":{"line":99,"column":12},"end":{"line":99,"column":32}},"66":{"start":{"line":101,"column":8},"end":{"line":101,"column":21}},"67":{"start":{"line":104,"column":8},"end":{"line":104,"column":30}},"68":{"start":{"line":105,"column":8},"end":{"line":108,"column":34}},"69":{"start":{"line":106,"column":36},"end":{"line":106,"column":39}},"70":{"start":{"line":106,"column":51},"end":{"line":106,"column":104}},"71":{"start":{"line":108,"column":26},"end":{"line":108,"column":31}},"72":{"start":{"line":109,"column":8},"end":{"line":109,"column":38}},"73":{"start":{"line":110,"column":8},"end":{"line":110,"column":46}},"74":{"start":{"line":113,"column":8},"end":{"line":145,"column":96}},"75":{"start":{"line":145,"column":41},"end":{"line":145,"column":75}},"76":{"start":{"line":148,"column":8},"end":{"line":150,"column":11}},"77":{"start":{"line":153,"column":8},"end":{"line":155,"column":11}},"78":{"start":{"line":158,"column":8},"end":{"line":161,"column":11}},"79":{"start":{"line":164,"column":8},"end":{"line":165,"column":115}},"80":{"start":{"line":165,"column":42},"end":{"line":165,"column":113}},"81":{"start":{"line":168,"column":8},"end":{"line":203,"column":10}},"82":{"start":{"line":169,"column":28},"end":{"line":191,"column":13}},"83":{"start":{"line":192,"column":26},"end":{"line":192,"column":90}},"84":{"start":{"line":193,"column":12},"end":{"line":202,"column":13}},"85":{"start":{"line":194,"column":16},"end":{"line":194,"column":30}},"86":{"start":{"line":195,"column":16},"end":{"line":197,"column":17}},"87":{"start":{"line":196,"column":20},"end":{"line":196,"column":47}},"88":{"start":{"line":200,"column":16},"end":{"line":200,"column":75}},"89":{"start":{"line":201,"column":16},"end":{"line":201,"column":43}},"90":{"start":{"line":206,"column":8},"end":{"line":208,"column":9}},"91":{"start":{"line":207,"column":12},"end":{"line":207,"column":43}},"92":{"start":{"line":207,"column":25},"end":{"line":207,"column":42}},"93":{"start":{"line":209,"column":8},"end":{"line":209,"column":145}},"94":{"start":{"line":209,"column":27},"end":{"line":209,"column":144}},"95":{"start":{"line":212,"column":0},"end":{"line":212,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":24},"end":{"line":30,"column":5}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":11},"end":{"line":91,"column":5}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":12},"end":{"line":96,"column":5}},"line":92},"3":{"name":"(anonymous_3)","decl":{"start":{"line":97,"column":4},"end":{"line":97,"column":5}},"loc":{"start":{"line":97,"column":41},"end":{"line":102,"column":5}},"line":97},"4":{"name":"(anonymous_4)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":15},"end":{"line":111,"column":5}},"line":103},"5":{"name":"(anonymous_5)","decl":{"start":{"line":106,"column":20},"end":{"line":106,"column":21}},"loc":{"start":{"line":106,"column":36},"end":{"line":106,"column":39}},"line":106},"6":{"name":"(anonymous_6)","decl":{"start":{"line":106,"column":41},"end":{"line":106,"column":42}},"loc":{"start":{"line":106,"column":51},"end":{"line":106,"column":104}},"line":106},"7":{"name":"(anonymous_7)","decl":{"start":{"line":108,"column":17},"end":{"line":108,"column":18}},"loc":{"start":{"line":108,"column":26},"end":{"line":108,"column":31}},"line":108},"8":{"name":"(anonymous_8)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":31},"end":{"line":146,"column":5}},"line":112},"9":{"name":"(anonymous_9)","decl":{"start":{"line":145,"column":17},"end":{"line":145,"column":18}},"loc":{"start":{"line":145,"column":41},"end":{"line":145,"column":75}},"line":145},"10":{"name":"(anonymous_10)","decl":{"start":{"line":147,"column":4},"end":{"line":147,"column":5}},"loc":{"start":{"line":147,"column":32},"end":{"line":151,"column":5}},"line":147},"11":{"name":"(anonymous_11)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":33},"end":{"line":156,"column":5}},"line":152},"12":{"name":"(anonymous_12)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":28},"end":{"line":162,"column":5}},"line":157},"13":{"name":"(anonymous_13)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":21},"end":{"line":166,"column":5}},"line":163},"14":{"name":"(anonymous_14)","decl":{"start":{"line":165,"column":21},"end":{"line":165,"column":22}},"loc":{"start":{"line":165,"column":42},"end":{"line":165,"column":113}},"line":165},"15":{"name":"(anonymous_15)","decl":{"start":{"line":167,"column":4},"end":{"line":167,"column":5}},"loc":{"start":{"line":167,"column":38},"end":{"line":204,"column":5}},"line":167},"16":{"name":"(anonymous_16)","decl":{"start":{"line":168,"column":15},"end":{"line":168,"column":16}},"loc":{"start":{"line":168,"column":40},"end":{"line":203,"column":9}},"line":168},"17":{"name":"(anonymous_17)","decl":{"start":{"line":205,"column":4},"end":{"line":205,"column":5}},"loc":{"start":{"line":205,"column":71},"end":{"line":210,"column":5}},"line":205},"18":{"name":"(anonymous_18)","decl":{"start":{"line":207,"column":19},"end":{"line":207,"column":20}},"loc":{"start":{"line":207,"column":25},"end":{"line":207,"column":42}},"line":207},"19":{"name":"(anonymous_19)","decl":{"start":{"line":209,"column":15},"end":{"line":209,"column":16}},"loc":{"start":{"line":209,"column":27},"end":{"line":209,"column":144}},"line":209}},"branchMap":{"0":{"loc":{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":53,"column":9}},{"start":{"line":43,"column":8},"end":{"line":53,"column":9}}],"line":43},"1":{"loc":{"start":{"line":44,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":49,"column":13}},{"start":{"line":44,"column":12},"end":{"line":49,"column":13}}],"line":44},"2":{"loc":{"start":{"line":54,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":62,"column":9}},{"start":{"line":54,"column":8},"end":{"line":62,"column":9}}],"line":54},"3":{"loc":{"start":{"line":57,"column":13},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":13},"end":{"line":62,"column":9}},{"start":{"line":57,"column":13},"end":{"line":62,"column":9}}],"line":57},"4":{"loc":{"start":{"line":60,"column":13},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":13},"end":{"line":62,"column":9}},{"start":{"line":60,"column":13},"end":{"line":62,"column":9}}],"line":60},"5":{"loc":{"start":{"line":63,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":71,"column":9}},{"start":{"line":63,"column":8},"end":{"line":71,"column":9}}],"line":63},"6":{"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":102}},"type":"binary-expr","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":54}},{"start":{"line":63,"column":58},"end":{"line":63,"column":102}}],"line":63},"7":{"loc":{"start":{"line":66,"column":13},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":13},"end":{"line":71,"column":9}},{"start":{"line":66,"column":13},"end":{"line":71,"column":9}}],"line":66},"8":{"loc":{"start":{"line":69,"column":13},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":13},"end":{"line":71,"column":9}},{"start":{"line":69,"column":13},"end":{"line":71,"column":9}}],"line":69},"9":{"loc":{"start":{"line":78,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":88,"column":9}},{"start":{"line":78,"column":8},"end":{"line":88,"column":9}}],"line":78},"10":{"loc":{"start":{"line":80,"column":23},"end":{"line":80,"column":94}},"type":"cond-expr","locations":[{"start":{"line":80,"column":65},"end":{"line":80,"column":85}},{"start":{"line":80,"column":88},"end":{"line":80,"column":94}}],"line":80},"11":{"loc":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},{"start":{"line":98,"column":8},"end":{"line":100,"column":9}}],"line":98},"12":{"loc":{"start":{"line":106,"column":51},"end":{"line":106,"column":104}},"type":"cond-expr","locations":[{"start":{"line":106,"column":94},"end":{"line":106,"column":99}},{"start":{"line":106,"column":102},"end":{"line":106,"column":104}}],"line":106},"13":{"loc":{"start":{"line":106,"column":51},"end":{"line":106,"column":91}},"type":"binary-expr","locations":[{"start":{"line":106,"column":51},"end":{"line":106,"column":69}},{"start":{"line":106,"column":73},"end":{"line":106,"column":91}}],"line":106},"14":{"loc":{"start":{"line":195,"column":16},"end":{"line":197,"column":17}},"type":"if","locations":[{"start":{"line":195,"column":16},"end":{"line":197,"column":17}},{"start":{"line":195,"column":16},"end":{"line":197,"column":17}}],"line":195},"15":{"loc":{"start":{"line":205,"column":60},"end":{"line":205,"column":69}},"type":"default-arg","locations":[{"start":{"line":205,"column":68},"end":{"line":205,"column":69}}],"line":205},"16":{"loc":{"start":{"line":206,"column":8},"end":{"line":208,"column":9}},"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":208,"column":9}},{"start":{"line":206,"column":8},"end":{"line":208,"column":9}}],"line":206}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":0,"35":0,"36":0,"37":1,"38":1,"39":0,"40":1,"41":1,"42":0,"43":0,"44":1,"45":0,"46":1,"47":1,"48":0,"49":0,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":0,"59":1,"60":1,"61":1,"62":1,"63":1,"64":6,"65":6,"66":0,"67":1,"68":1,"69":32,"70":127,"71":32,"72":1,"73":1,"74":1,"75":31,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":43,"83":43,"84":43,"85":43,"86":43,"87":0,"88":0,"89":0,"90":1264,"91":31,"92":31,"93":1233,"94":1221,"95":1},"f":{"0":1,"1":1,"2":1,"3":6,"4":1,"5":32,"6":127,"7":32,"8":1,"9":31,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":43,"17":1264,"18":31,"19":1221},"b":{"0":[0,1],"1":[0,0],"2":[0,1],"3":[1,0],"4":[0,0],"5":[0,1],"6":[1,0],"7":[1,0],"8":[0,0],"9":[1,0],"10":[0,1],"11":[6,0],"12":[127,0],"13":[127,127],"14":[0,43],"15":[43],"16":[31,1233]},"inputSourceMap":{"version":3,"file":"BotServer.js","sourceRoot":"","sources":["BotServer.ts"],"names":[],"mappings":";;AACA,yCAA2C;AAE3C,2BAA2B;AAC3B,6CAA6C;AAC7C,qCAAqC;AACrC,qCAAqC;AACrC,+BAA+B;AAC/B,mCAAmC;AACnC,mCAKgB;AAChB,iCAAkD;AAClD,uEAMkC;AAqBlC,6CAA6C;AAC7C,yCAAyC;AACzC,kDAAkD;AAClD,oDAAoD;AACpD,+DAAwD;AACxD,uCAAmD;AACnD,+BAA4D;AAE5D,MAAM,SAAS;IA0Bd,YAAY,MAAuB;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC7E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAClF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACvE,CAAC;IAEM,IAAI;QACV,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAErC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,oBAAO,KAAK,CAAC,OAAO,EAAG,CAAC;QACjD,QAAgB,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE3C,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,oBAAY,mBAC3B,KAAK,CAAC,OAAO,IAChB,GAAG,EAAE,KAAK,CAAC,GAAG,IACb,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;YACjB,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW;YACxC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;YAC9B,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe;SAChD,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YAClC,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;gBAC3B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACtC;iBAAM;gBACN,IAAI,CAAC,UAAU,GAAG,IAAI,2BAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAC7D;SACD;aAAM;YACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;SACzC;QAED,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACvD;aAAM,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACtC,IAAI,CAAC,WAAW,GAAG,IAAI,eAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACrD;aAAM,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;YAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;SAC3C;QAED,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;YAC7E,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACpE;aAAM,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,8BAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;SACjF;aAAM,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;YAChD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;SACrD;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAC3C,2CAAqB,EACrB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAC5B,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAC5C,IAAI,gCAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,EAC5C,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAC7B,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAC3C,2CAAqB,EACrB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAC5B,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAC5C,4CAAsB,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAC7B,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAC1C,0CAAoB,EACpB,IAAI,CAAC,MAAM,CAAC,eAAe,CAC3B,CAAC;QAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAC/C,+CAAyB,EACzB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAChC,CAAC;QAEF,IAAI,cAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;gBAChC,KAAK,EAAE,iBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM;gBACrE,UAAU,EAAE;oBACX,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;iBAClC;aACD,CAAC,CAAC;SACH;aAAM;YACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;SACjC;QAED,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACxB,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAES,eAAe,CAAI,YAAe,EAAE,KAAS;QACtD,IAAI,cAAK,CAAC,KAAK,CAAC,EAAE;YACjB,OAAO,YAAY,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAES,QAAQ;QACjB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,gBAAI,CAAC,IAAI,CAAC,WAAW;aAC5C,MAAM,CACP,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,EACnB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,cAAK,CAAC,CAAC,CAAC,IAAI,CAAC,cAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC7C;aAEC,OAAO,EAAE;aACT,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CACpB;QACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IACvC,CAAC;IAES,wBAAwB;QACjC,OAAO;YACN,WAAW,CAAC,sBAAsB;YAClC,WAAW,CAAC,oBAAoB;YAChC,WAAW,CAAC,4BAA4B;YACxC,WAAW,CAAC,gCAAgC;YAC5C,WAAW,CAAC,mBAAmB;YAC/B,WAAW,CAAC,oBAAoB;YAChC,WAAW,CAAC,0BAA0B;YACtC,WAAW,CAAC,oBAAoB;YAChC,WAAW,CAAC,qBAAqB;YACjC,WAAW,CAAC,mBAAmB;YAC/B,WAAW,CAAC,iBAAiB;YAC7B,WAAW,CAAC,+BAA+B;YAC3C,WAAW,CAAC,6BAA6B;YACzC,WAAW,CAAC,sBAAsB;YAClC,WAAW,CAAC,iCAAiC;YAC7C,WAAW,CAAC,aAAa;YACzB,WAAW,CAAC,0BAA0B;YACtC,WAAW,CAAC,iCAAiC;YAC7C,WAAW,CAAC,mCAAmC;YAC/C,WAAW,CAAC,0BAA0B;YACtC,WAAW,CAAC,4BAA4B;YACxC,WAAW,CAAC,2BAA2B;YACvC,WAAW,CAAC,mBAAmB;YAC/B,WAAW,CAAC,4BAA4B;YACxC,WAAW,CAAC,4BAA4B;YACxC,WAAW,CAAC,yBAAyB;YACrC,WAAW,CAAC,8BAA8B;YAC1C,WAAW,CAAC,+BAA+B;YAC3C,WAAW,CAAC,6BAA6B;YACzC,WAAW,CAAC,wBAAwB;YACpC,WAAW,CAAC,wBAAwB;SACpC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,UAAU,CAAC,EAAE,eAAG,EAAsB,CAAC,CAAC;IACjG,CAAC;IAES,yBAAyB;QAClC,OAAO,eAAG,CAAuB;YAChC,sBAAsB,EAAE,aAAa,CAAC,sBAAsB;SAC5D,CAAC,CAAC;IACJ,CAAC;IAES,0BAA0B;QACnC,OAAO,eAAG,CAAwB;YACjC,iBAAiB,EAAE,cAAc,CAAC,iBAAiB;SACnD,CAAC,CAAC;IACJ,CAAC;IAES,qBAAqB;QAC9B,OAAO,eAAG,CAAmB;YAC5B,kBAAkB,EAAE,SAAS,CAAC,kBAAkB;YAChD,mBAAmB,EAAE,SAAS,CAAC,mBAAmB;SAClD,CAAC,CAAC;IACJ,CAAC;IAES,cAAc;QACvB,IAAI,CAAC,UAAU;aACb,OAAO,CACP,CAAC,SAA8B,EAAE,IAAY,EAAE,EAAE,CAChD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CACxE,CAAC;IACJ,CAAC;IAES,sBAAsB,CAAC,SAA8B;QAC9D,OAAO,KAAK,EAAE,aAA0B,EAAE,EAAE;YAC3C,MAAM,OAAO,GAAG;gBACf,UAAU,EAAE,eAAG,EAAe;gBAC9B,QAAQ,EAAE,gBAAI,EAAqB;gBACnC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACzC,SAAS;gBACT,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,UAAU,EAAE,aAAa,CAAC,OAAO,CAAC,IAAI;gBACtC,SAAS,EAAE,gBAAI,EAAe;gBAC9B,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;gBAC/C,aAAa;gBACb,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACzC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,GAAG,EAAE,aAAa,CAAC,MAAM,CAAC,GAAG;gBAC7B,UAAU,EAAE,eAAG,EAAe;aAC9B,CAAC;YACF,MAAM,KAAK,GAAG,IAAI,CAAC,0BAA0B,CAC5C,OAAO,EACP,IAAI,CAAC,iBAAiB,CACtB,CAAC;YAEF,IAAI;gBACH,MAAM,KAAK,EAAE,CAAC;gBACd,IAAI,cAAK,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;oBAChC,aAAa,CAAC,MAAM,GAAG,GAAG,CAAC;iBAC3B;aACD;YAAC,OAAO,GAAG,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;gBAC3D,aAAa,CAAC,MAAM,GAAG,GAAG,CAAC;aAC3B;QACF,CAAC,CAAC;IACH,CAAC;IAES,0BAA0B,CACnC,iBAA6B,EAC7B,QAA0B,EAC1B,QAAgB,CAAC;QACjB,IAAI,KAAK,IAAI,QAAQ,CAAC,IAAI,EAAE;YAC3B,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SAC/B;QACD,OAAO,KAAK,IAAI,EAAE,CAAC,MAAM,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAC3C,iBAAiB,EACjB,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,EAAE,QAAQ,EAAE,KAAK,GAAG,CAAC,CAAC,CACvE,CAAC;IACH,CAAC;CAED;AAED,kBAAe,SAAS,CAAC","sourcesContent":["import { Server } from 'http';\nimport { List, Map, Set } from 'immutable';\nimport { default as IntlMessageFormat } from 'intl-messageformat';\nimport * as Koa from 'koa';\nimport * as BodyParser from 'koa-bodyparser';\nimport * as Router from 'koa-router';\nimport * as mongoose from 'mongoose';\nimport * as AWS from 'aws-sdk';\nimport * as winston from 'winston';\nimport {\n\tisObject,\n\tisString,\n\tisNumber,\n\tisNil,\n} from 'lodash';\nimport { createClient, RedisClient } from 'redis';\nimport {\n\tintentRepository as mongoIntentRepository,\n\tconfigRepository as mongoConfigRepository,\n\tmessageRepository as mongoMessageRepository,\n\tissueRepository as mongoIssueRepository,\n\tsenderInfoRepository as mongoSenderInfoRepository,\n} from 'lexica-dialog-repository';\nimport {\n\tBotResponse,\n\tBotContextCommand,\n\tBotServerConfig,\n\tBotContext,\n\tConfigRepository,\n\tExecutor,\n\tMessenger,\n\tMiddleware,\n\tNlpService,\n\tFileService,\n\tTranscodeService,\n\tPreProcessor,\n\tPostProcessor,\n\tIntentRepository,\n\tSessionRepository,\n\tMessageRepository,\n\tIssueRepository,\n\tSenderInfoRepository,\n} from './Api';\nimport * as middlewares from './middlewares';\nimport * as executors from './executors';\nimport * as preProcessors from './pre-processors';\nimport * as postProcessors from './post-processors';\nimport DefaultNlpService from './nlp/DefaultNlpService';\nimport { RedisSessionRepository } from './session';\nimport { S3Service, ElasticTranscoderService } from './aws';\n\nclass BotServer {\n\n\tpublic readonly server: Koa;\n\tpublic readonly router: Router;\n\tpublic redisClient: RedisClient;\n\tpublic mongoConnection: mongoose.Connection;\n\tprivate config: BotServerConfig;\n\tprivate messengers: Map<string, Messenger<any, any>>;\n\tprivate middlewares: Map<number, Middleware>;\n\tprivate sortedMiddlewares: List<Middleware>;\n\tprivate preProcessors: Map<string, PreProcessor>;\n\tprivate postProcessors: Map<string, PostProcessor>;\n\tprivate executors: Map<string, Executor>;\n\n\tprivate nlpService: NlpService;\n\tprivate fileService: FileService;\n\tprivate transcodeService: TranscodeService;\n\tprivate sessionRepository: SessionRepository;\n\tprivate intentRepository: IntentRepository;\n\tprivate configRepository: ConfigRepository;\n\tprivate messageRepository: MessageRepository;\n\tprivate issueRepository: IssueRepository;\n\tprivate senderInfoRepository: SenderInfoRepository;\n\tprivate logger: winston.LoggerInstance;\n\tprivate nodeServer: Server;\n\n\tconstructor(config: BotServerConfig) {\n\t\tthis.server = new Koa();\n\t\tthis.router = new Router();\n\t\tthis.config = config;\n\t\tthis.messengers = config.messengers;\n\t\tthis.middlewares = this.createDefaultMiddlewares().merge(config.middlewares);\n\t\tthis.preProcessors = this.createDefaultPreProcessor().merge(config.preProcessors);\n\t\tthis.postProcessors = this.createDefaultPostProcessor().merge(config.postProcessors);\n\t\tthis.executors = this.createDefaultExecutor().merge(config.executors);\n\t}\n\n\tpublic init() {\n\t\tconst { mongo, redis } = this.config;\n\n\t\tmongoose.connect(mongo.url, { ...mongo.options });\n\t\t(mongoose as any).Promise = global.Promise;\n\n\t\tthis.mongoConnection = mongoose.connection;\n\t\tthis.redisClient = createClient({\n\t\t\t...redis.options,\n\t\t\turl: redis.url,\n\t\t});\n\n\t\tAWS.config.update({\n\t\t\taccessKeyId: this.config.aws.accessKeyId,\n\t\t\tregion: this.config.aws.region,\n\t\t\tsecretAccessKey: this.config.aws.secretAccessKey,\n\t\t});\n\t\tAWS.config.setPromisesDependency(Promise);\n\n\t\tif (isNil(this.config.nlpService)) {\n\t\t\tif (isNil(this.config.nlp)) {\n\t\t\t\tthrow new Error('NLP config not set');\n\t\t\t} else {\n\t\t\t\tthis.nlpService = new DefaultNlpService(this.config.nlp.url);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.nlpService = this.config.nlpService;\n\t\t}\n\n\t\tif (isNil(this.config.aws.s3)) {\n\t\t\tthrow new Error('Please config aws.s3 or fileService');\n\t\t} else if (!isNil(this.config.aws.s3)) {\n\t\t\tthis.fileService = new S3Service(this.config.aws.s3);\n\t\t} else if (!isNil(this.config.fileService)) {\n\t\t\tthis.fileService = this.config.fileService;\n\t\t}\n\n\t\tif (isNil(this.config.aws.transcoder) && isNil(this.config.transcodeService)) {\n\t\t\tthrow new Error('Please config aws.transcoder or transcodeService');\n\t\t} else if (!isNil(this.config.aws.transcoder)) {\n\t\t\tthis.transcodeService = new ElasticTranscoderService(this.config.aws.transcoder);\n\t\t} else if (!isNil(this.config.transcodeService)) {\n\t\t\tthis.transcodeService = this.config.transcodeService;\n\t\t}\n\n\t\tthis.intentRepository = this.getDefaultValue(\n\t\t\tmongoIntentRepository,\n\t\t\tthis.config.intentRepository,\n\t\t);\n\n\t\tthis.sessionRepository = this.getDefaultValue(\n\t\t\tnew RedisSessionRepository(this.redisClient),\n\t\t\tthis.config.sessionRepository,\n\t\t);\n\n\t\tthis.configRepository = this.getDefaultValue(\n\t\t\tmongoConfigRepository,\n\t\t\tthis.config.configRepository,\n\t\t);\n\n\t\tthis.messageRepository = this.getDefaultValue(\n\t\t\tmongoMessageRepository,\n\t\t\tthis.config.messageRepository,\n\t\t);\n\n\t\tthis.issueRepository = this.getDefaultValue(\n\t\t\tmongoIssueRepository,\n\t\t\tthis.config.issueRepository,\n\t\t);\n\n\t\tthis.senderInfoRepository = this.getDefaultValue(\n\t\t\tmongoSenderInfoRepository,\n\t\t\tthis.config.senderInfoRepository,\n\t\t);\n\n\t\tif (isNil(this.config.logger)) {\n\t\t\tthis.logger = new winston.Logger({\n\t\t\t\tlevel: isString(this.config.logLevel) ? this.config.logLevel : 'info',\n\t\t\t\ttransports: [\n\t\t\t\t\tnew (winston.transports.Console)(),\n\t\t\t\t],\n\t\t\t});\n\t\t} else {\n\t\t\tthis.logger = this.config.logger;\n\t\t}\n\n\t\tthis.setupKoa();\n\t\tthis.nodeServer = this.server.listen(this.config.port);\n\t}\n\n\tpublic close() {\n\t\tthis.nodeServer.close();\n\t\tthis.redisClient.quit();\n\t\tmongoose.connection.close();\n\t}\n\n\tprotected getDefaultValue<T>(defaultValue: T, value?: T) {\n\t\tif (isNil(value)) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprotected setupKoa() {\n\t\tthis.setupMessenger();\n\t\tthis.sortedMiddlewares = List(this.middlewares\n\t\t\t.sortBy(\n\t\t\t(value, key) => key,\n\t\t\t(a, b) => !isNil(a) && !isNil(b) ? a - b : -1,\n\t\t)\n\t\t\t// TODO temporary fix bug: https://github.com/facebook/immutable-js/issues/1246\n\t\t\t.toArray()\n\t\t\t.map(value => value))\n\t\t\t;\n\t\tthis.server.use(BodyParser());\n\t\tthis.server.use(this.router.routes());\n\t}\n\n\tprotected createDefaultMiddlewares() {\n\t\treturn [\n\t\t\tmiddlewares.globalConfigMiddleware,\n\t\t\tmiddlewares.unitConfigMiddleware,\n\t\t\tmiddlewares.messengerWhiteListMiddleware,\n\t\t\tmiddlewares.responseMessageLoggingMiddleware,\n\t\t\tmiddlewares.messengerMiddleware,\n\t\t\tmiddlewares.senderInfoMiddleware,\n\t\t\tmiddlewares.fallbackResponseMiddleware,\n\t\t\tmiddlewares.fetchIssueMiddleware,\n\t\t\tmiddlewares.fileRequestMiddleware,\n\t\t\tmiddlewares.transcodeMiddleware,\n\t\t\tmiddlewares.sessionMiddleware,\n\t\t\tmiddlewares.requestMessageLoggingMiddleware,\n\t\t\tmiddlewares.fileRequestResponseMiddleware,\n\t\t\tmiddlewares.intentOptionMiddleware,\n\t\t\tmiddlewares.continuousOptionsToTextMiddleware,\n\t\t\tmiddlewares.nlpMiddleware,\n\t\t\tmiddlewares.suspendAutoReplyMiddleware,\n\t\t\tmiddlewares.removeDuplicateResponseMiddleware,\n\t\t\tmiddlewares.additionalResponseMessageMiddleware,\n\t\t\tmiddlewares.flattenResponsesMiddleware,\n\t\t\tmiddlewares.conversationIntentMiddleware,\n\t\t\tmiddlewares.startConversationMiddleware,\n\t\t\tmiddlewares.newIntentMiddleware,\n\t\t\tmiddlewares.commandsValidationMiddleware,\n\t\t\tmiddlewares.intentPreProcessorMiddleware,\n\t\t\tmiddlewares.memoriesFeatureMiddleware,\n\t\t\tmiddlewares.intentDefaultFeatureMiddleware,\n\t\t\tmiddlewares.intentRequiredFeatureMiddleware,\n\t\t\tmiddlewares.intentPostProcessorMiddleware,\n\t\t\tmiddlewares.intentResponseMiddleware,\n\t\t\tmiddlewares.intentExecutorMiddleware,\n\t\t].reduce((map, middleware, i) => map.set((i + 1) * 100, middleware), Map<number, Middleware>());\n\t}\n\n\tprotected createDefaultPreProcessor() {\n\t\treturn Map<string, PreProcessor>({\n\t\t\tSenderNamePreProcessor: preProcessors.senderNamePreProcessor,\n\t\t});\n\t}\n\n\tprotected createDefaultPostProcessor() {\n\t\treturn Map<string, PostProcessor>({\n\t\t\tDatePostProcessor: postProcessors.datePostProcessor,\n\t\t});\n\t}\n\n\tprotected createDefaultExecutor() {\n\t\treturn Map<string, Executor>({\n\t\t\tCloseIssueExecutor: executors.closeIssueExecutor,\n\t\t\tCreateIssueExecutor: executors.createIssueExecutor,\n\t\t});\n\t}\n\n\tprotected setupMessenger() {\n\t\tthis.messengers\n\t\t\t.forEach(\n\t\t\t\t(messenger: Messenger<any, any>, path: string) =>\n\t\t\t\t\tthis.router.all(`/:uni${path}`, this.createMessengerHandler(messenger)),\n\t\t\t);\n\t}\n\n\tprotected createMessengerHandler(messenger: Messenger<any, any>) {\n\t\treturn async (serverContext: Koa.Context) => {\n\t\t\tconst context = {\n\t\t\t\tattributes: Map<string, any>(),\n\t\t\t\tcommands: List<BotContextCommand>(),\n\t\t\t\tconfigRepository: this.configRepository,\n\t\t\t\texecutors: this.executors,\n\t\t\t\tfileService: this.fileService,\n\t\t\t\tintentRepository: this.intentRepository,\n\t\t\t\tissueRepository: this.issueRepository,\n\t\t\t\tlogger: this.logger,\n\t\t\t\tmessageRepository: this.messageRepository,\n\t\t\t\tmessenger,\n\t\t\t\tnlpService: this.nlpService,\n\t\t\t\tpostProcessors: this.postProcessors,\n\t\t\t\tpreProcessors: this.preProcessors,\n\t\t\t\trawRequest: serverContext.request.body,\n\t\t\t\tresponses: List<BotResponse>(),\n\t\t\t\tsenderInfoRepository: this.senderInfoRepository,\n\t\t\t\tserverContext,\n\t\t\t\tsessionRepository: this.sessionRepository,\n\t\t\t\ttranscodeService: this.transcodeService,\n\t\t\t\tuni: serverContext.params.uni,\n\t\t\t\tuniConfigs: Map<string, any>(),\n\t\t\t};\n\t\t\tconst start = this.createMiddlewareStartPoint(\n\t\t\t\tcontext,\n\t\t\t\tthis.sortedMiddlewares,\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\tawait start();\n\t\t\t\tif (isNil(serverContext.status)) {\n\t\t\t\t\tserverContext.status = 200;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis.logger.error('Unhandled error from middlewares', err);\n\t\t\t\tserverContext.status = 200;\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected createMiddlewareStartPoint(\n\t\tbotServiceContext: BotContext,\n\t\tservices: List<Middleware>,\n\t\tindex: number = 0): () => Promise<void> {\n\t\tif (index >= services.size) {\n\t\t\treturn () => Promise.resolve();\n\t\t}\n\t\treturn async () => await services.get(index)(\n\t\t\tbotServiceContext,\n\t\t\tthis.createMiddlewareStartPoint(botServiceContext, services, index + 1),\n\t\t);\n\t}\n\n}\n\nexport default BotServer;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e6ad13412b8d611ca48a0b61954d8e986167964b"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/Utils.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/Utils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":40}},"4":{"start":{"line":6,"column":29},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":59}},"6":{"start":{"line":9,"column":4},"end":{"line":12,"column":18}},"7":{"start":{"line":10,"column":25},"end":{"line":10,"column":80}},"8":{"start":{"line":11,"column":26},"end":{"line":11,"column":37}},"9":{"start":{"line":14,"column":0},"end":{"line":14,"column":70}},"10":{"start":{"line":17,"column":4},"end":{"line":55,"column":5}},"11":{"start":{"line":18,"column":24},"end":{"line":18,"column":75}},"12":{"start":{"line":19,"column":26},"end":{"line":24,"column":11}},"13":{"start":{"line":21,"column":25},"end":{"line":24,"column":9}},"14":{"start":{"line":25,"column":8},"end":{"line":25,"column":46}},"15":{"start":{"line":27,"column":9},"end":{"line":55,"column":5}},"16":{"start":{"line":28,"column":24},"end":{"line":33,"column":11}},"17":{"start":{"line":28,"column":56},"end":{"line":33,"column":9}},"18":{"start":{"line":34,"column":8},"end":{"line":39,"column":16}},"19":{"start":{"line":41,"column":9},"end":{"line":55,"column":5}},"20":{"start":{"line":42,"column":22},"end":{"line":46,"column":11}},"21":{"start":{"line":42,"column":50},"end":{"line":46,"column":9}},"22":{"start":{"line":47,"column":8},"end":{"line":51,"column":16}},"23":{"start":{"line":54,"column":8},"end":{"line":54,"column":75}},"24":{"start":{"line":56,"column":4},"end":{"line":56,"column":19}},"25":{"start":{"line":58,"column":0},"end":{"line":58,"column":66}},"26":{"start":{"line":60,"column":17},"end":{"line":60,"column":70}},"27":{"start":{"line":61,"column":4},"end":{"line":61,"column":93}},"28":{"start":{"line":63,"column":0},"end":{"line":63,"column":40}},"29":{"start":{"line":65,"column":4},"end":{"line":65,"column":102}},"30":{"start":{"line":65,"column":43},"end":{"line":65,"column":81}},"31":{"start":{"line":67,"column":0},"end":{"line":67,"column":34}}},"fnMap":{"0":{"name":"intentResponsesToBotResponses","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":38}},"loc":{"start":{"line":8,"column":68},"end":{"line":13,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":13},"end":{"line":10,"column":14}},"loc":{"start":{"line":10,"column":25},"end":{"line":10,"column":80}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":16},"end":{"line":11,"column":17}},"loc":{"start":{"line":11,"column":26},"end":{"line":11,"column":37}},"line":11},"3":{"name":"intentResponseToBotResponse","decl":{"start":{"line":15,"column":9},"end":{"line":15,"column":36}},"loc":{"start":{"line":15,"column":65},"end":{"line":57,"column":1}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":17},"end":{"line":21,"column":18}},"loc":{"start":{"line":21,"column":25},"end":{"line":24,"column":9}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":28,"column":45},"end":{"line":28,"column":46}},"loc":{"start":{"line":28,"column":56},"end":{"line":33,"column":9}},"line":28},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":41},"end":{"line":42,"column":42}},"loc":{"start":{"line":42,"column":50},"end":{"line":46,"column":9}},"line":42},"7":{"name":"extractMessage","decl":{"start":{"line":59,"column":9},"end":{"line":59,"column":23}},"loc":{"start":{"line":59,"column":51},"end":{"line":62,"column":1}},"line":59},"8":{"name":"toConfigMap","decl":{"start":{"line":64,"column":9},"end":{"line":64,"column":20}},"loc":{"start":{"line":64,"column":30},"end":{"line":66,"column":1}},"line":64},"9":{"name":"(anonymous_9)","decl":{"start":{"line":65,"column":26},"end":{"line":65,"column":27}},"loc":{"start":{"line":65,"column":43},"end":{"line":65,"column":81}},"line":65}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":4},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":55,"column":5}},{"start":{"line":17,"column":4},"end":{"line":55,"column":5}}],"line":17},"1":{"loc":{"start":{"line":17,"column":8},"end":{"line":17,"column":90}},"type":"binary-expr","locations":[{"start":{"line":17,"column":8},"end":{"line":17,"column":52}},{"start":{"line":17,"column":56},"end":{"line":17,"column":90}}],"line":17},"2":{"loc":{"start":{"line":27,"column":9},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":27,"column":9},"end":{"line":55,"column":5}},{"start":{"line":27,"column":9},"end":{"line":55,"column":5}}],"line":27},"3":{"loc":{"start":{"line":27,"column":13},"end":{"line":27,"column":97}},"type":"binary-expr","locations":[{"start":{"line":27,"column":13},"end":{"line":27,"column":60}},{"start":{"line":27,"column":64},"end":{"line":27,"column":97}}],"line":27},"4":{"loc":{"start":{"line":41,"column":9},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":41,"column":9},"end":{"line":55,"column":5}},{"start":{"line":41,"column":9},"end":{"line":55,"column":5}}],"line":41},"5":{"loc":{"start":{"line":41,"column":13},"end":{"line":41,"column":93}},"type":"binary-expr","locations":[{"start":{"line":41,"column":13},"end":{"line":41,"column":58}},{"start":{"line":41,"column":62},"end":{"line":41,"column":93}}],"line":41}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":5,"7":5,"8":5,"9":1,"10":45,"11":38,"12":38,"13":42,"14":38,"15":7,"16":7,"17":11,"18":7,"19":0,"20":0,"21":0,"22":0,"23":0,"24":45,"25":1,"26":56,"27":56,"28":1,"29":86,"30":308,"31":1},"f":{"0":5,"1":5,"2":5,"3":45,"4":42,"5":11,"6":0,"7":56,"8":86,"9":308},"b":{"0":[38,7],"1":[45,38],"2":[7,0],"3":[7,7],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"file":"Utils.js","sourceRoot":"","sources":["Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNil } from 'lodash';\nimport { BotError, BotErrorCode, BotResponse, ConfigRepository } from './Api';\nimport { Map, List } from 'immutable';\nimport { default as IntlMessageFormat } from 'intl-messageformat';\nimport { Config } from 'lexica-dialog-model/dist/Config';\nimport {\n\tMessage,\n\tResponse,\n\tResponseType,\n} from 'lexica-dialog-model/dist/Intent';\n\nfunction intentResponsesToBotResponses(\n\tresponses: Response[],\n\tfeatures: Map<string, any>,\n\tlocale: string): List<BotResponse> {\n\treturn responses\n\t\t.map(response => intentResponseToBotResponse(response, features, locale))\n\t\t.reduce((a, b) => a.concat(b), List<BotResponse>())\n\t\t.toList();\n}\n\nfunction intentResponseToBotResponse(\n\tresponse: Response,\n\tfeatures: Map<string, any>,\n\tlocale: string): List<BotResponse> {\n\tlet results: List<BotResponse>;\n\tif (response.type === ResponseType.TEXT && !isNil(response.messages)) {\n\t\tconst message: string = extractMessage(response.messages, features, locale);\n\t\tconst responses = message\n\t\t\t.split('[^LEXICA^]')\n\t\t\t.map(msg => ({\n\t\t\t\tmessage: msg,\n\t\t\t\ttype: ResponseType.TEXT,\n\t\t\t}));\n\t\tresults = List<BotResponse>(responses);\n\t} else if (response.type === ResponseType.OPTIONS && !isNil(response.options)) {\n\t\tconst options = response.options.map(option => ({\n\t\t\tcommand: option.command,\n\t\t\tfeatures: option.features,\n\t\t\tmessage: this.extractMessage(option.messages, features, locale),\n\t\t\ttextOnlyIndicator: option.textOnlyIndicator,\n\t\t}));\n\t\tresults = List<BotResponse>([{\n\t\t\tforceShow: response.forceShow,\n\t\t\tmessage: this.extractMessage(response.messages, features, locale),\n\t\t\toptions,\n\t\t\ttype: ResponseType.OPTIONS,\n\t\t}]);\n\t} else if (response.type === ResponseType.ITEMS && !isNil(response.items)) {\n\t\tconst items = response.items.map(item => ({\n\t\t\tmessage: this.extractMessage(item.messages, features, locale),\n\t\t\ttype: item.type,\n\t\t\turl: item.url,\n\t\t}));\n\t\tresults = List<BotResponse>([{\n\t\t\titems,\n\t\t\tmessage: this.extractMessage(response.messages, features, locale),\n\t\t\ttype: ResponseType.ITEMS,\n\t\t}]);\n\t} else {\n\t\tthrow new BotError(BotErrorCode.INVALID_RESPONSE_TYPE);\n\t}\n\treturn results;\n}\n\nfunction extractMessage(\n\tmessages: Message[],\n\tfeature: Map<string, string>,\n\tlocale: string): string {\n\tconst text = messages[Math.floor(Math.random() * messages.length)];\n\treturn new IntlMessageFormat(text[locale], locale).format(feature.toObject());\n}\n\nfunction toConfigMap(configs: Config[]): Map<string, Config> {\n\treturn configs.reduce(\n\t\t(map, config) => map.set(config.key.toString(), config), Map<string, Config>(),\n\t);\n}\n\nexport {\n\tintentResponsesToBotResponses,\n\tintentResponseToBotResponse,\n\textractMessage,\n\ttoConfigMap,\n};\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"07f6d0535ce014c83d68120016b513f3f35e3c8c"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":42}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":70}},"3":{"start":{"line":4,"column":38},"end":{"line":4,"column":69}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":26},"end":{"line":4,"column":27}},"loc":{"start":{"line":4,"column":38},"end":{"line":4,"column":69}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AACA,2CAAoC;AAEvB,QAAA,eAAe,GAAG,CAAC,MAAuB,EAAE,EAAE,CAAC,IAAI,mBAAS,CAAC,MAAM,CAAC,CAAC","sourcesContent":["import { BotServerConfig } from './Api';\nimport BotServer from './BotServer';\n\nexport const createBotServer = (config: BotServerConfig) => new BotServer(config);\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9700333fbf431b9638ccb702c69611f0224f0edf"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/ElasticTranscoderService.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/ElasticTranscoderService.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":12},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"4":{"start":{"line":8,"column":8},"end":{"line":10,"column":11}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":57}},"6":{"start":{"line":16,"column":8},"end":{"line":16,"column":57}},"7":{"start":{"line":19,"column":23},"end":{"line":19,"column":40}},"8":{"start":{"line":20,"column":21},"end":{"line":23,"column":9}},"9":{"start":{"line":24,"column":23},"end":{"line":33,"column":9}},"10":{"start":{"line":34,"column":21},"end":{"line":34,"column":70}},"11":{"start":{"line":35,"column":8},"end":{"line":55,"column":9}},"12":{"start":{"line":36,"column":26},"end":{"line":36,"column":37}},"13":{"start":{"line":37,"column":27},"end":{"line":37,"column":28}},"14":{"start":{"line":38,"column":12},"end":{"line":53,"column":13}},"15":{"start":{"line":39,"column":32},"end":{"line":39,"column":86}},"16":{"start":{"line":40,"column":16},"end":{"line":50,"column":17}},"17":{"start":{"line":41,"column":20},"end":{"line":43,"column":21}},"18":{"start":{"line":42,"column":24},"end":{"line":42,"column":36}},"19":{"start":{"line":44,"column":20},"end":{"line":46,"column":21}},"20":{"start":{"line":45,"column":24},"end":{"line":45,"column":81}},"21":{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},"22":{"start":{"line":48,"column":24},"end":{"line":48,"column":84}},"23":{"start":{"line":51,"column":16},"end":{"line":51,"column":30}},"24":{"start":{"line":52,"column":16},"end":{"line":52,"column":85}},"25":{"start":{"line":52,"column":45},"end":{"line":52,"column":83}},"26":{"start":{"line":54,"column":12},"end":{"line":54,"column":78}},"27":{"start":{"line":56,"column":8},"end":{"line":56,"column":69}},"28":{"start":{"line":59,"column":0},"end":{"line":59,"column":60}},"29":{"start":{"line":60,"column":0},"end":{"line":60,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":24},"end":{"line":11,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":27},"end":{"line":14,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":27},"end":{"line":17,"column":5}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":40},"end":{"line":57,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":52,"column":34},"end":{"line":52,"column":35}},"loc":{"start":{"line":52,"column":45},"end":{"line":52,"column":83}},"line":52}},"branchMap":{"0":{"loc":{"start":{"line":35,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":55,"column":9}},{"start":{"line":35,"column":8},"end":{"line":55,"column":9}}],"line":35},"1":{"loc":{"start":{"line":35,"column":12},"end":{"line":35,"column":69}},"type":"binary-expr","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":37}},{"start":{"line":35,"column":41},"end":{"line":35,"column":69}}],"line":35},"2":{"loc":{"start":{"line":40,"column":16},"end":{"line":50,"column":17}},"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":50,"column":17}},{"start":{"line":40,"column":16},"end":{"line":50,"column":17}}],"line":40},"3":{"loc":{"start":{"line":41,"column":20},"end":{"line":43,"column":21}},"type":"if","locations":[{"start":{"line":41,"column":20},"end":{"line":43,"column":21}},{"start":{"line":41,"column":20},"end":{"line":43,"column":21}}],"line":41},"4":{"loc":{"start":{"line":44,"column":20},"end":{"line":46,"column":21}},"type":"if","locations":[{"start":{"line":44,"column":20},"end":{"line":46,"column":21}},{"start":{"line":44,"column":20},"end":{"line":46,"column":21}}],"line":44},"5":{"loc":{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},"type":"if","locations":[{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},{"start":{"line":47,"column":20},"end":{"line":49,"column":21}}],"line":47}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":11,"16":11,"17":11,"18":2,"19":9,"20":0,"21":9,"22":0,"23":9,"24":9,"25":9,"26":0,"27":0,"28":1,"29":1},"f":{"0":1,"1":1,"2":1,"3":2,"4":9},"b":{"0":[2,0],"1":[2,2],"2":[11,0],"3":[2,9],"4":[0,9],"5":[0,9]},"inputSourceMap":{"version":3,"file":"ElasticTranscoderService.js","sourceRoot":"","sources":["ElasticTranscoderService.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,mCAA+B;AAQ/B,MAAM,wBAAwB;IAI7B,YACS,MAA2B;QAA3B,WAAM,GAAN,MAAM,CAAqB;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC;YAC3C,UAAU,EAAE,MAAM,CAAC,UAAU;SAC7B,CAAC,CAAC;IACJ,CAAC;IAEM,cAAc,CAAC,MAAY;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,cAAc,CAAC,MAAY;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAY,EAAE,UAAmC;QACvE,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QACjC,MAAM,IAAI,GAAG;YACZ,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE;SACtC,CAAC;QACF,MAAM,MAAM,GAAG;YACd,KAAK,EAAE;gBACN,GAAG,EAAE,MAAM,CAAC,IAAI;aAChB;YACD,OAAO,EAAE,CAAC;oBACT,GAAG,EAAE,IAAI,CAAC,IAAI;oBACd,QAAQ,EAAE,MAAM,CAAC,EAAE;iBACnB,CAAC;YACF,UAAU,EAAE,UAAU,CAAC,UAAU;SACjC,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;QAE/D,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC1B,IAAI,QAAQ,GAAG,CAAC,CAAC;YAEjB,OAAO,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;gBAC1C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;gBAEvE,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBACxB,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,EAAE;wBACtC,OAAO,IAAI,CAAC;qBACZ;oBAED,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,EAAE;wBACtC,MAAM,IAAI,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;qBACzD;oBAED,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,OAAO,EAAE;wBACnC,MAAM,IAAI,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;qBAC5D;iBACD;gBAED,QAAQ,IAAI,CAAC,CAAC;gBACd,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aACrE;YAED,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,EAAE,CAAC,CAAC;SAClE;QAED,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC9D,CAAC;CAED;AAGA,4DAAwB;AAGzB,kBAAe,wBAAwB,CAAC","sourcesContent":["import * as AWS from 'aws-sdk';\nimport { isNil } from 'lodash';\nimport {\n\tFile,\n\tTranscodeService,\n\tAwsTranscoderConfig,\n\tAwsTranscoderTypeConfig,\n} from '../Api';\n\nclass ElasticTranscoderService implements TranscodeService {\n\n\tprivate transcoder: AWS.ElasticTranscoder;\n\n\tconstructor(\n\t\tprivate config: AwsTranscoderConfig) {\n\t\tthis.transcoder = new AWS.ElasticTranscoder({\n\t\t\tapiVersion: config.apiVersion,\n\t\t});\n\t}\n\n\tpublic transcodeAudio(source: File): Promise<File> {\n\t\treturn this.transcode(source, this.config.audio);\n\t}\n\n\tpublic transcodeVideo(source: File): Promise<File> {\n\t\treturn this.transcode(source, this.config.video);\n\t}\n\n\tpublic async transcode(source: File, typeConfig: AwsTranscoderTypeConfig): Promise<File> {\n\t\tconst preset = typeConfig.preset;\n\t\tconst file = {\n\t\t\tcontentType: preset.contentType,\n\t\t\tpath: `${source.path}${preset.suffix}`,\n\t\t};\n\t\tconst params = {\n\t\t\tInput: {\n\t\t\t\tKey: source.path,\n\t\t\t},\n\t\t\tOutputs: [{\n\t\t\t\tKey: file.path,\n\t\t\t\tPresetId: preset.id,\n\t\t\t}],\n\t\t\tPipelineId: typeConfig.pipelineId,\n\t\t};\n\n\t\tconst data = await this.transcoder.createJob(params).promise();\n\n\t\tif (!isNil(data.Job) && !isNil(data.Job.Id)) {\n\t\t\tconst jobId = data.Job.Id;\n\t\t\tlet attempts = 0;\n\n\t\t\twhile (attempts < this.config.maxAttempts) {\n\t\t\t\tconst jobResp = await this.transcoder.readJob({ Id: jobId }).promise();\n\n\t\t\t\tif (!isNil(jobResp.Job)) {\n\t\t\t\t\tif (jobResp.Job.Status === 'Complete') {\n\t\t\t\t\t\treturn file;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (jobResp.Job.Status === 'Canceled') {\n\t\t\t\t\t\tthrow new Error(`Transcoder job canceled. ID: ${jobId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (jobResp.Job.Status === 'Error') {\n\t\t\t\t\t\tthrow new Error(`Transcoder job occur error. ID: ${jobId}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tattempts += 1;\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, this.config.delay));\n\t\t\t}\n\n\t\t\tthrow new Error(`Transcoder job over max attempts. ID: ${jobId}`);\n\t\t}\n\n\t\tthrow new Error('AWS transcoder return empty Job or Job ID');\n\t}\n\n}\n\nexport {\n\tElasticTranscoderService,\n};\n\nexport default ElasticTranscoderService;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"3834c0f189f2ad64f5d387730c3743008f5cdf21"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/S3Service.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/S3Service.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":14},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":12},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":34}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":33}},"7":{"start":{"line":11,"column":8},"end":{"line":13,"column":11}},"8":{"start":{"line":16,"column":8},"end":{"line":45,"column":11}},"9":{"start":{"line":17,"column":12},"end":{"line":44,"column":13}},"10":{"start":{"line":18,"column":30},"end":{"line":18,"column":39}},"11":{"start":{"line":19,"column":28},"end":{"line":19,"column":75}},"12":{"start":{"line":20,"column":16},"end":{"line":40,"column":57}},"13":{"start":{"line":21,"column":20},"end":{"line":38,"column":21}},"14":{"start":{"line":22,"column":50},"end":{"line":22,"column":77}},"15":{"start":{"line":23,"column":44},"end":{"line":24,"column":76}},"16":{"start":{"line":25,"column":24},"end":{"line":30,"column":37}},"17":{"start":{"line":31,"column":24},"end":{"line":34,"column":27}},"18":{"start":{"line":37,"column":24},"end":{"line":37,"column":38}},"19":{"start":{"line":40,"column":42},"end":{"line":40,"column":55}},"20":{"start":{"line":43,"column":16},"end":{"line":43,"column":77}},"21":{"start":{"line":48,"column":0},"end":{"line":48,"column":30}},"22":{"start":{"line":49,"column":0},"end":{"line":49,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":26},"end":{"line":14,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":15},"end":{"line":46,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":27},"end":{"line":16,"column":28}},"loc":{"start":{"line":16,"column":48},"end":{"line":45,"column":9}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":26},"end":{"line":20,"column":27}},"loc":{"start":{"line":20,"column":41},"end":{"line":39,"column":17}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":40,"column":33},"end":{"line":40,"column":34}},"loc":{"start":{"line":40,"column":42},"end":{"line":40,"column":55}},"line":40}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":12},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":17,"column":12},"end":{"line":44,"column":13}},{"start":{"line":17,"column":12},"end":{"line":44,"column":13}}],"line":17},"1":{"loc":{"start":{"line":17,"column":16},"end":{"line":17,"column":67}},"type":"binary-expr","locations":[{"start":{"line":17,"column":16},"end":{"line":17,"column":39}},{"start":{"line":17,"column":43},"end":{"line":17,"column":67}}],"line":17},"2":{"loc":{"start":{"line":19,"column":28},"end":{"line":19,"column":75}},"type":"cond-expr","locations":[{"start":{"line":19,"column":55},"end":{"line":19,"column":64}},{"start":{"line":19,"column":67},"end":{"line":19,"column":75}}],"line":19},"3":{"loc":{"start":{"line":23,"column":44},"end":{"line":24,"column":76}},"type":"cond-expr","locations":[{"start":{"line":24,"column":30},"end":{"line":24,"column":47}},{"start":{"line":24,"column":50},"end":{"line":24,"column":76}}],"line":23}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":4,"15":4,"16":4,"17":4,"18":0,"19":0,"20":0,"21":1,"22":1},"f":{"0":1,"1":4,"2":4,"3":4,"4":0},"b":{"0":[4,0],"1":[4,0],"2":[3,1],"3":[3,1]},"inputSourceMap":{"version":3,"file":"S3Service.js","sourceRoot":"","sources":["S3Service.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,6BAA6B;AAC7B,+BAA+B;AAC/B,6BAA6B;AAC7B,mCAAkC;AAalC,MAAM,SAAS;IAId,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACrC,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;YACpB,UAAU,EAAE,QAAQ,CAAC,UAAU;SAC/B,CAAC,CAAC;IACJ,CAAC;IAEM,IAAI,CAAC,IAAY;QACvB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBACxD,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;gBACxB,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC5D,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;oBACvB,IAAI;wBACH,MAAM,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;wBACtD,MAAM,WAAW,GAAG,iBAAQ,CAAC,iBAAiB,CAAC;4BAC9C,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,0BAA0B,CAAC;wBAClD,MAAM,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;4BACpB,IAAI,EAAE,GAAG;4BACT,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;4BAC5B,WAAW,EAAE,WAAW;4BACxB,GAAG,EAAE,KAAK;yBACV,CAAC,CAAC,OAAO,EAAE,CAAC;wBACb,OAAO,CAAC;4BACP,WAAW;4BACX,IAAI,EAAE,KAAK;yBACX,CAAC,CAAC;qBACH;oBAAC,OAAO,KAAK,EAAE;wBACf,MAAM,CAAC,KAAK,CAAC,CAAC;qBACd;gBACF,CAAC,CAAC;qBACD,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aACrC;iBAAM;gBACN,MAAM,CAAC,IAAI,KAAK,CAAC,kCAAkC,GAAG,IAAI,CAAC,CAAC,CAAC;aAC7D;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CAED;AAIA,8BAAS;AAGV,kBAAe,SAAS,CAAC","sourcesContent":["import * as https from 'https';\nimport * as http from 'http';\nimport * as AWS from 'aws-sdk';\nimport * as uuid from 'uuid';\nimport { isString } from 'lodash';\nimport { File, FileService } from '../Api';\n\n// type S3Params = {\n// \tapiVersion: string;\n// \tbucket: string;\n// };\n\ninterface S3Params {\n\tapiVersion: string;\n\tbucket: string;\n}\n\nclass S3Service implements FileService {\n\n\tprivate s3: AWS.S3;\n\n\tconstructor(private s3Params: S3Params) {\n\t\tthis.s3 = new AWS.S3({\n\t\t\tapiVersion: s3Params.apiVersion,\n\t\t});\n\t}\n\n\tpublic copy(path: string): Promise<File> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (path.startsWith('http') || path.startsWith('https')) {\n\t\t\t\tconst s3Key = uuid.v4();\n\t\t\t\tconst get = path.startsWith('https') ? https.get : http.get;\n\t\t\t\tget(path, async (res) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst headerContentType = res.headers['content-type'];\n\t\t\t\t\t\tconst contentType = isString(headerContentType)\n\t\t\t\t\t\t\t? headerContentType : 'application/octet-stream';\n\t\t\t\t\t\tawait this.s3.upload({\n\t\t\t\t\t\t\tBody: res,\n\t\t\t\t\t\t\tBucket: this.s3Params.bucket,\n\t\t\t\t\t\t\tContentType: contentType,\n\t\t\t\t\t\t\tKey: s3Key,\n\t\t\t\t\t\t}).promise();\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tcontentType,\n\t\t\t\t\t\t\tpath: s3Key,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on('error', error => reject(error));\n\t\t\t} else {\n\t\t\t\treject(new Error('Unsupported path for copy file: ' + path));\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nexport {\n\tS3Params,\n\tS3Service,\n};\n\nexport default S3Service;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"13603a1d67dc9a413e72fe8054b50458c5be4070"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/aws/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":33},"end":{"line":5,"column":70}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":70}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,yCAAmD;AAA1C,gCAAA,OAAO,CAAa;AAC7B,uEAAiF;AAAxE,8DAAA,OAAO,CAA4B","sourcesContent":["export { default as S3Service } from './S3Service';\nexport { default as ElasticTranscoderService } from './ElasticTranscoderService';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"84ea669554b35f693b279851ae0e70539bc78b77"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/CloseIssueExecutor.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/CloseIssueExecutor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":57}},"3":{"start":{"line":5,"column":27},"end":{"line":14,"column":1}},"4":{"start":{"line":6,"column":40},"end":{"line":6,"column":47}},"5":{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":8},"end":{"line":9,"column":45}},"8":{"start":{"line":10,"column":8},"end":{"line":10,"column":37}},"9":{"start":{"line":11,"column":8},"end":{"line":11,"column":32}},"10":{"start":{"line":12,"column":8},"end":{"line":12,"column":58}},"11":{"start":{"line":15,"column":0},"end":{"line":15,"column":37}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":27},"end":{"line":5,"column":28}},"loc":{"start":{"line":5,"column":46},"end":{"line":14,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},{"start":{"line":7,"column":4},"end":{"line":13,"column":5}}],"line":7}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":1},"f":{"0":2},"b":{"0":[2,0]},"inputSourceMap":{"version":3,"file":"CloseIssueExecutor.js","sourceRoot":"","sources":["CloseIssueExecutor.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,0DAAwD;AAGxD,MAAM,kBAAkB,GAAa,KAAK,EAAE,OAAO,EAAE,EAAE;IACtD,MAAM,EACL,eAAe,EACf,KAAK,GACL,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,KAAK,CAAC,EAAE;QAClB,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAExB,KAAK,CAAC,MAAM,GAAG,cAAM,CAAC,MAAM,CAAC;QAC7B,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;QAC7B,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QAExB,OAAO,CAAC,KAAK,GAAG,MAAM,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClD;AACF,CAAC,CAAC;AAEF,kBAAe,kBAAkB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Status } from 'lexica-dialog-model/dist/Issue';\nimport { Executor } from '../Api';\n\nconst closeIssueExecutor: Executor = async (context) => {\n\tconst {\n\t\tissueRepository,\n\t\tissue,\n\t} = context;\n\tif (!isNil(issue)) {\n\t\tconst date = new Date();\n\n\t\tissue.status = Status.CLOSED;\n\t\tissue.lastUpdatedDate = date;\n\t\tissue.closedDate = date;\n\n\t\tcontext.issue = await issueRepository.save(issue);\n\t}\n};\n\nexport default closeIssueExecutor;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"5eb9c934465948e094fb7416a01de7d0e5a72213"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/CreateIssueExecutor.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/CreateIssueExecutor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":57}},"3":{"start":{"line":5,"column":28},"end":{"line":23,"column":1}},"4":{"start":{"line":6,"column":105},"end":{"line":6,"column":112}},"5":{"start":{"line":7,"column":4},"end":{"line":22,"column":5}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":29},"end":{"line":16,"column":10}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":37}},"9":{"start":{"line":18,"column":8},"end":{"line":21,"column":9}},"10":{"start":{"line":19,"column":12},"end":{"line":19,"column":53}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":84}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":28},"end":{"line":5,"column":29}},"loc":{"start":{"line":5,"column":47},"end":{"line":23,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":22,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":22,"column":5}},{"start":{"line":7,"column":4},"end":{"line":22,"column":5}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":7,"column":71}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},{"start":{"line":7,"column":33},"end":{"line":7,"column":71}}],"line":7},"2":{"loc":{"start":{"line":18,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":21,"column":9}},{"start":{"line":18,"column":8},"end":{"line":21,"column":9}}],"line":18}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":1},"f":{"0":2},"b":{"0":[2,0],"1":[2,1],"2":[2,0]},"inputSourceMap":{"version":3,"file":"CreateIssueExecutor.js","sourceRoot":"","sources":["CreateIssueExecutor.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,0DAAwD;AAIxD,MAAM,mBAAmB,GAAa,KAAK,EAAE,OAAO,EAAE,EAAE;IACvD,MAAM,EACL,GAAG,EACH,aAAa,EACb,QAAQ,EACR,eAAe,EACf,iBAAiB,EACjB,KAAK,EACL,cAAc,GACd,GAAG,OAAO,CAAC;IACZ,IAAI,cAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,cAAM,CAAC,MAAM,EAAE;QACnD,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC;YACjD,eAAe,EAAE,IAAI;YACrB,SAAS,EAAE,aAAa;YACxB,QAAQ,EAAE,IAAI;YACd,QAAQ;YACR,MAAM,EAAE,cAAM,CAAC,IAAI;YACnB,GAAG;SACH,CAAC,CAAC;QACH,OAAO,CAAC,KAAK,GAAG,YAAY,CAAC;QAE7B,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;YAC3B,cAAc,CAAC,OAAO,GAAG,YAAY,CAAC,EAAE,CAAC;YACzC,OAAO,CAAC,cAAc,GAAG,CAAC,MAAM,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAmB,CAAC;SAC1F;KACD;AACF,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Status } from 'lexica-dialog-model/dist/Issue';\nimport { RequestMessage } from 'lexica-dialog-model/dist/Message';\nimport { Executor } from '../Api';\n\nconst createIssueExecutor: Executor = async (context) => {\n\tconst {\n\t\tuni,\n\t\tmessengerName,\n\t\tsenderId,\n\t\tissueRepository,\n\t\tmessageRepository,\n\t\tissue,\n\t\trequestMessage,\n\t} = context;\n\tif (isNil(issue) || issue.status === Status.CLOSED) {\n\t\tconst date = new Date();\n\t\tconst workingIssue = await issueRepository.create({\n\t\t\tlastUpdatedDate: date,\n\t\t\tmessenger: messengerName,\n\t\t\topenDate: date,\n\t\t\tsenderId,\n\t\t\tstatus: Status.OPEN,\n\t\t\tuni,\n\t\t});\n\t\tcontext.issue = workingIssue;\n\n\t\tif (!isNil(requestMessage)) {\n\t\t\trequestMessage.issueId = workingIssue.id;\n\t\t\tcontext.requestMessage = (await messageRepository.save(requestMessage)) as RequestMessage;\n\t\t}\n\t}\n};\n\nexport default createIssueExecutor;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"1b3f6dce7203d10dd1dd538d93cbb9c14a3fd303"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/executors/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":27},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":5,"column":28},"end":{"line":5,"column":60}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,2DAAqE;AAA5D,kDAAA,OAAO,CAAsB;AACtC,6DAAuE;AAA9D,oDAAA,OAAO,CAAuB","sourcesContent":["export { default as closeIssueExecutor } from './CloseIssueExecutor';\nexport { default as createIssueExecutor } from './CreateIssueExecutor';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"c563631d7cfdd1d6fab8cb687d411236b3011196"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/AdditionalResponseMessageMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/AdditionalResponseMessageMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":35}},"5":{"start":{"line":7,"column":44},"end":{"line":39,"column":1}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":17}},"7":{"start":{"line":9,"column":98},"end":{"line":9,"column":105}},"8":{"start":{"line":10,"column":4},"end":{"line":38,"column":5}},"9":{"start":{"line":15,"column":23},"end":{"line":15,"column":86}},"10":{"start":{"line":16,"column":22},"end":{"line":16,"column":34}},"11":{"start":{"line":17,"column":24},"end":{"line":17,"column":37}},"12":{"start":{"line":18,"column":30},"end":{"line":18,"column":67}},"13":{"start":{"line":19,"column":41},"end":{"line":19,"column":74}},"14":{"start":{"line":20,"column":51},"end":{"line":20,"column":95}},"15":{"start":{"line":21,"column":43},"end":{"line":21,"column":78}},"16":{"start":{"line":22,"column":8},"end":{"line":28,"column":9}},"17":{"start":{"line":23,"column":22},"end":{"line":23,"column":45}},"18":{"start":{"line":24,"column":26},"end":{"line":24,"column":60}},"19":{"start":{"line":25,"column":12},"end":{"line":27,"column":13}},"20":{"start":{"line":26,"column":16},"end":{"line":26,"column":52}},"21":{"start":{"line":29,"column":8},"end":{"line":37,"column":9}},"22":{"start":{"line":30,"column":27},"end":{"line":30,"column":84}},"23":{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},"24":{"start":{"line":32,"column":16},"end":{"line":32,"column":87}},"25":{"start":{"line":35,"column":16},"end":{"line":35,"column":162}},"26":{"start":{"line":40,"column":0},"end":{"line":40,"column":54}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":44},"end":{"line":7,"column":45}},"loc":{"start":{"line":7,"column":69},"end":{"line":39,"column":1}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":4},"end":{"line":38,"column":5}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":38,"column":5}},{"start":{"line":10,"column":4},"end":{"line":38,"column":5}}],"line":10},"1":{"loc":{"start":{"line":10,"column":8},"end":{"line":14,"column":29}},"type":"binary-expr","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":32}},{"start":{"line":11,"column":11},"end":{"line":11,"column":43}},{"start":{"line":12,"column":11},"end":{"line":12,"column":67}},{"start":{"line":13,"column":11},"end":{"line":13,"column":74}},{"start":{"line":14,"column":11},"end":{"line":14,"column":29}}],"line":10},"2":{"loc":{"start":{"line":22,"column":8},"end":{"line":28,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":28,"column":9}},{"start":{"line":22,"column":8},"end":{"line":28,"column":9}}],"line":22},"3":{"loc":{"start":{"line":25,"column":12},"end":{"line":27,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":27,"column":13}},{"start":{"line":25,"column":12},"end":{"line":27,"column":13}}],"line":25},"4":{"loc":{"start":{"line":25,"column":16},"end":{"line":25,"column":92}},"type":"binary-expr","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":49}},{"start":{"line":25,"column":53},"end":{"line":25,"column":92}}],"line":25},"5":{"loc":{"start":{"line":29,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":37,"column":9}},{"start":{"line":29,"column":8},"end":{"line":37,"column":9}}],"line":29},"6":{"loc":{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},{"start":{"line":31,"column":12},"end":{"line":36,"column":13}}],"line":31}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":36,"7":33,"8":33,"9":5,"10":5,"11":5,"12":5,"13":5,"14":5,"15":5,"16":5,"17":4,"18":4,"19":4,"20":4,"21":5,"22":5,"23":5,"24":0,"25":5,"26":1},"f":{"0":36},"b":{"0":[5,28],"1":[33,33,33,33,5],"2":[4,1],"3":[4,0],"4":[4,4],"5":[5,0],"6":[0,5]},"inputSourceMap":{"version":3,"file":"AdditionalResponseMessageMiddleware.js","sourceRoot":"","sources":["AdditionalResponseMessageMiddleware.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AACtC,mCAAuC;AACvC,gCAA6E;AAC7E,oCAAyD;AAEzD,MAAM,mCAAmC,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC/E,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,EACL,GAAG,EACH,UAAU,EACV,OAAO,EACP,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB,MAAM,GACN,GAAG,OAAO,CAAC;IAEZ,IACC,CAAC,cAAK,CAAC,OAAO,CAAC;WACZ,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC;WACvB,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,KAAK,iBAAW,CAAC,IAAI,CAAC;WACzC,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,2BAA2B,CAAC;WACzD,SAAS,CAAC,IAAI,GAAG,CAAC,EACpB;QACD,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,2BAA2B,CAAC,CAAC;QACzE,MAAM,KAAK,GAAQ,MAAM,CAAC,KAAK,CAAC;QAChC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;QAC5D,MAAM,wBAAwB,GAAG,KAAK,CAAC,2BAA2B,CAAC;QACnE,MAAM,kCAAkC,GAAG,KAAK,CAAC,sCAAsC,CAAC;QACxF,IAAI,4BAA4B,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEvE,IAAI,CAAC,4BAA4B,EAAE;YAClC,MAAM,CAAC,GAAG,eAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACzB,MAAM,KAAK,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,CAAC;YACjD,IAAI,KAAK,IAAI,wBAAwB,IAAI,kCAAkC,IAAI,CAAC,EAAE;gBACjF,4BAA4B,GAAG,IAAI,CAAC;aACpC;SACD;QAED,IAAI,4BAA4B,EAAE;YACjC,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACzE,IAAI,cAAK,CAAC,MAAM,CAAC,EAAE;gBAClB,MAAM,CAAC,IAAI,CAAC,+CAA+C,OAAO,GAAG,CAAC,CAAC;aACvE;iBAAM;gBACN,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAC3C,qCAA6B,CAAC,MAAM,CAAC,SAAS,EAAE,eAAG,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,CACtE,CAAC,MAAM,EAAE,CAAC;aACX;SACD;KACD;AACF,CAAC,CAAC;AAEF,kBAAe,mCAAmC,CAAC","sourcesContent":["import { Map, List } from 'immutable';\nimport { isNil, random } from 'lodash';\nimport { Middleware, RunTimeConfig, BotResponse, RequestType } from '../Api';\nimport { intentResponsesToBotResponses } from '../Utils';\n\nconst additionalResponseMessageMiddleware: Middleware = async (context, next) => {\n\tawait next();\n\tconst {\n\t\tuni,\n\t\tuniConfigs,\n\t\trequest,\n\t\tresponses,\n\t\tmessageRepository,\n\t\tintentRepository,\n\t\tlogger,\n\t} = context;\n\n\tif (\n\t\t!isNil(request)\n\t\t&& !isNil(request.message)\n\t\t&& !isNil(request.type === RequestType.TEXT)\n\t\t&& uniConfigs.has(RunTimeConfig.ADDITIONAL_RESPONSE_MESSAGE)\n\t\t&& responses.size > 0\n\t) {\n\t\tconst config = uniConfigs.get(RunTimeConfig.ADDITIONAL_RESPONSE_MESSAGE);\n\t\tconst value: any = config.value;\n\t\tconst command = value.COMMAND;\n\t\tconst triggerRegexp = new RegExp(value.TRIGGER_REGEXP, 'i');\n\t\tconst triggerUserTotalMessages = value.TRIGGER_USER_TOTAL_MESSAGES;\n\t\tconst triggerUserTotalMessagesPercentage = value.TRIGGER_USER_TOTAL_MESSAGES_PERCENTAGE;\n\t\tlet hasAdditionalResponseMessage = triggerRegexp.test(request.message);\n\n\t\tif (!hasAdditionalResponseMessage) {\n\t\t\tconst r = random(0, 100);\n\t\t\tconst count = await messageRepository.countAll();\n\t\t\tif (count >= triggerUserTotalMessages && triggerUserTotalMessagesPercentage >= r) {\n\t\t\t\thasAdditionalResponseMessage = true;\n\t\t\t}\n\t\t}\n\n\t\tif (hasAdditionalResponseMessage) {\n\t\t\tconst intent = await intentRepository.findByUniCommandName(uni, command);\n\t\t\tif (isNil(intent)) {\n\t\t\t\tlogger.warn(`Additional message not found with command: [${command}]`);\n\t\t\t} else {\n\t\t\t\tcontext.responses = context.responses.concat(\n\t\t\t\t\tintentResponsesToBotResponses(intent.responses, Map(), request.locale),\n\t\t\t\t).toList();\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default additionalResponseMessageMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"ac4324dcb10cd51be5acf87464945c55ae7be3df"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/CommandsValidationMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/CommandsValidationMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":37},"end":{"line":16,"column":1}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"6":{"start":{"line":8,"column":8},"end":{"line":8,"column":70}},"7":{"start":{"line":10,"column":4},"end":{"line":14,"column":7}},"8":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"9":{"start":{"line":12,"column":12},"end":{"line":12,"column":74}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":17}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":37},"end":{"line":5,"column":38}},"loc":{"start":{"line":5,"column":62},"end":{"line":16,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":31},"end":{"line":10,"column":32}},"loc":{"start":{"line":10,"column":44},"end":{"line":14,"column":5}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},{"start":{"line":7,"column":4},"end":{"line":9,"column":5}}],"line":7},"1":{"loc":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},{"start":{"line":11,"column":8},"end":{"line":13,"column":9}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":36,"5":36,"6":0,"7":36,"8":37,"9":2,"10":34,"11":1},"f":{"0":36,"1":37},"b":{"0":[0,36],"1":[2,35]},"inputSourceMap":{"version":3,"file":"CommandsValidationMiddleware.js","sourceRoot":"","sources":["CommandsValidationMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,gCAA4D;AAE5D,MAAM,4BAA4B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACxE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAE7B,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;QACvB,MAAM,IAAI,cAAQ,CAAC,kBAAY,CAAC,gBAAgB,CAAC,CAAC;KAClD;IAED,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACtC,IAAI,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,IAAI,cAAQ,CAAC,kBAAY,CAAC,gBAAgB,CAAC,CAAC;SAClD;IACF,CAAC,CAAC,CAAC;IAEH,MAAM,IAAI,EAAE,CAAC;AACd,CAAC,CAAC;AAEF,kBAAe,4BAA4B,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { BotError, BotErrorCode, Middleware } from '../Api';\n\nconst commandsValidationMiddleware: Middleware = async (context, next) => {\n\tconst { commands } = context;\n\n\tif (commands.isEmpty()) {\n\t\tthrow new BotError(BotErrorCode.INTENT_NOT_FOUND);\n\t}\n\n\tcommands.toArray().forEach((command) => {\n\t\tif (isNil(command.intent)) {\n\t\t\tthrow new BotError(BotErrorCode.INTENT_NOT_FOUND);\n\t\t}\n\t});\n\n\tawait next();\n};\n\nexport default commandsValidationMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"048da41e2b82d6dc41ae2853901dff330fa21b22"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ContinuousOptionsToTextMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ContinuousOptionsToTextMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":59}},"3":{"start":{"line":5,"column":42},"end":{"line":25,"column":1}},"4":{"start":{"line":6,"column":31},"end":{"line":6,"column":38}},"5":{"start":{"line":7,"column":31},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":17}},"7":{"start":{"line":9,"column":26},"end":{"line":9,"column":33}},"8":{"start":{"line":10,"column":4},"end":{"line":24,"column":5}},"9":{"start":{"line":11,"column":8},"end":{"line":23,"column":22}},"10":{"start":{"line":12,"column":25},"end":{"line":12,"column":33}},"11":{"start":{"line":13,"column":12},"end":{"line":20,"column":13}},"12":{"start":{"line":16,"column":16},"end":{"line":19,"column":18}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":26}},"14":{"start":{"line":26,"column":0},"end":{"line":26,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":42},"end":{"line":5,"column":43}},"loc":{"start":{"line":5,"column":67},"end":{"line":25,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":42},"end":{"line":11,"column":43}},"loc":{"start":{"line":11,"column":56},"end":{"line":22,"column":9}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":24,"column":5}},{"start":{"line":10,"column":4},"end":{"line":24,"column":5}}],"line":10},"1":{"loc":{"start":{"line":13,"column":12},"end":{"line":20,"column":13}},"type":"if","locations":[{"start":{"line":13,"column":12},"end":{"line":20,"column":13}},{"start":{"line":13,"column":12},"end":{"line":20,"column":13}}],"line":13},"2":{"loc":{"start":{"line":13,"column":16},"end":{"line":15,"column":41}},"type":"binary-expr","locations":[{"start":{"line":13,"column":16},"end":{"line":13,"column":61}},{"start":{"line":14,"column":20},"end":{"line":14,"column":52}},{"start":{"line":15,"column":23},"end":{"line":15,"column":40}}],"line":13}},"s":{"0":1,"1":1,"2":1,"3":1,"4":38,"5":38,"6":38,"7":35,"8":35,"9":5,"10":5,"11":5,"12":1,"13":5,"14":1},"f":{"0":38,"1":5},"b":{"0":[5,30],"1":[1,4],"2":[5,2,1]},"inputSourceMap":{"version":3,"file":"ContinuousOptionsToTextMiddleware.js","sourceRoot":"","sources":["ContinuousOptionsToTextMiddleware.ts"],"names":[],"mappings":";;AACA,mCAA+B;AAE/B,4DAA+E;AAE/E,MAAM,iCAAiC,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC7E,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;IACnC,MAAM,kBAAkB,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACvD,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAC9B,IAAI,kBAAkB,EAAE;QACvB,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAAqB,EAAE,EAAE;YAC3D,IAAI,MAAM,GAAgB,QAAQ,CAAC;YACnC,IACC,MAAM,CAAC,IAAI,KAAK,qBAAY,CAAC,OAAO;mBACjC,CACF,cAAK,CAAC,MAAM,CAAC,SAAS,CAAC;uBACpB,CAAC,MAAM,CAAC,SAAS,CACpB,EACA;gBACD,MAAM,GAAG;oBACR,OAAO,EAAE,MAAM,CAAC,OAAO;oBACvB,IAAI,EAAE,qBAAY,CAAC,IAAI;iBACvB,CAAC;aACF;YACD,OAAO,MAAM,CAAC;QACf,CAAC,CAAC;aACA,MAAM,EAAE,CAAC;KACX;AACF,CAAC,CAAC;AAEF,kBAAe,iCAAiC,CAAC","sourcesContent":["import { List } from 'immutable';\nimport { isNil } from 'lodash';\nimport { BotResponse, Middleware, SessionOption } from '../Api';\nimport { OptionResponse, ResponseType } from 'lexica-dialog-model/dist/Intent';\n\nconst continuousOptionsToTextMiddleware: Middleware = async (context, next) => {\n\tconst { sessionService } = context;\n\tconst lastIntentIsOption = !context.commands.isEmpty();\n\tawait next();\n\tconst { responses } = context;\n\tif (lastIntentIsOption) {\n\t\tcontext.responses = responses.map((response: BotResponse) => {\n\t\t\tlet result: BotResponse = response;\n\t\t\tif (\n\t\t\t\tresult.type === ResponseType.OPTIONS\n\t\t\t\t&& (\n\t\t\t\t\tisNil(result.forceShow)\n\t\t\t\t\t|| !result.forceShow\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tresult = {\n\t\t\t\t\tmessage: result.message,\n\t\t\t\t\ttype: ResponseType.TEXT,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn result;\n\t\t})\n\t\t\t.toList();\n\t}\n};\n\nexport default continuousOptionsToTextMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e206a218b18ae02b0a7ce2060bc8d310dc1fb83b"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ConversationIntentMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ConversationIntentMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":37},"end":{"line":22,"column":1}},"4":{"start":{"line":6,"column":41},"end":{"line":6,"column":48}},"5":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"6":{"start":{"line":8,"column":25},"end":{"line":11,"column":95}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":44}},"8":{"start":{"line":11,"column":36},"end":{"line":11,"column":52}},"9":{"start":{"line":12,"column":23},"end":{"line":12,"column":61}},"10":{"start":{"line":13,"column":8},"end":{"line":19,"column":16}},"11":{"start":{"line":21,"column":4},"end":{"line":21,"column":17}},"12":{"start":{"line":23,"column":0},"end":{"line":23,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":37},"end":{"line":5,"column":38}},"loc":{"start":{"line":5,"column":62},"end":{"line":22,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":17},"end":{"line":10,"column":18}},"loc":{"start":{"line":10,"column":28},"end":{"line":10,"column":44}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":20},"end":{"line":11,"column":21}},"loc":{"start":{"line":11,"column":36},"end":{"line":11,"column":52}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},{"start":{"line":7,"column":4},"end":{"line":20,"column":5}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":7,"column":75}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":39}},{"start":{"line":7,"column":43},"end":{"line":7,"column":75}}],"line":7}},"s":{"0":1,"1":1,"2":1,"3":1,"4":36,"5":36,"6":2,"7":2,"8":2,"9":2,"10":2,"11":36,"12":1},"f":{"0":36,"1":2,"2":2},"b":{"0":[2,34],"1":[36,36]},"inputSourceMap":{"version":3,"file":"ConversationIntentMiddleware.js","sourceRoot":"","sources":["ConversationIntentMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AAGtC,MAAM,4BAA4B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACvE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;IAC7C,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,IAAI,cAAc,CAAC,eAAe,EAAE,EAAE;QAC9D,MAAM,QAAQ,GAAG,QAAQ;aACtB,OAAO,EAAE;aACT,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;aAChC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,uBAAuB,EAAE,CAAC,CAAC;QACtF,MAAM,MAAM,GAAG,cAAc,CAAC,qBAAqB,EAAE,CAAC;QACtD,OAAO,CAAC,QAAQ,GAAG,gBAAI,CAAC,CAAC;gBACvB,UAAU,EAAE,eAAG,EAAe;gBAC9B,YAAY,EAAE,gBAAI,EAAe;gBACjC,QAAQ;gBACR,MAAM;gBACN,iBAAiB,EAAE,eAAG,EAAe;aACtC,CAAC,CAAC,CAAC;KACL;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,4BAA4B,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { BotResponse, Middleware } from '../Api';\n\nconst conversationIntentMiddleware: Middleware = async (context, next) => {\n  const { commands, sessionService } = context;\n  if (!isNil(sessionService) && sessionService.hasConversation()) {\n    const features = commands\n      .toArray()\n      .map(command => command.features)\n      .reduce((prev, next) => prev.merge(next), sessionService.getConversationFeatures());\n    const intent = sessionService.getConversationIntent();\n    context.commands = List([{\n      attributes: Map<string, any>(),\n      botResponses: List<BotResponse>(),\n      features,\n      intent,\n      processedFeatures: Map<string, any>(),\n    }]);\n  }\n  await next();\n};\n\nexport default conversationIntentMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"7dd0b23b226529429d5fe4f3a09c24a136e62175"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FallbackResponseMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FallbackResponseMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":35}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":59}},"6":{"start":{"line":10,"column":29},"end":{"line":18,"column":68}},"7":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"8":{"start":{"line":14,"column":12},"end":{"line":14,"column":50}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":25}},"10":{"start":{"line":18,"column":35},"end":{"line":18,"column":67}},"11":{"start":{"line":19,"column":4},"end":{"line":24,"column":5}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":46}},"13":{"start":{"line":22,"column":9},"end":{"line":24,"column":5}},"14":{"start":{"line":23,"column":8},"end":{"line":23,"column":90}},"15":{"start":{"line":25,"column":4},"end":{"line":25,"column":27}},"16":{"start":{"line":27,"column":35},"end":{"line":61,"column":1}},"17":{"start":{"line":28,"column":4},"end":{"line":60,"column":5}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":21}},"19":{"start":{"line":32,"column":94},"end":{"line":32,"column":101}},"20":{"start":{"line":33,"column":32},"end":{"line":33,"column":73}},"21":{"start":{"line":34,"column":25},"end":{"line":34,"column":30}},"22":{"start":{"line":35,"column":8},"end":{"line":41,"column":73}},"23":{"start":{"line":42,"column":8},"end":{"line":52,"column":9}},"24":{"start":{"line":43,"column":31},"end":{"line":43,"column":38}},"25":{"start":{"line":44,"column":27},"end":{"line":44,"column":92}},"26":{"start":{"line":45,"column":12},"end":{"line":51,"column":13}},"27":{"start":{"line":46,"column":34},"end":{"line":47,"column":111}},"28":{"start":{"line":47,"column":37},"end":{"line":47,"column":109}},"29":{"start":{"line":48,"column":16},"end":{"line":49,"column":108}},"30":{"start":{"line":49,"column":74},"end":{"line":49,"column":85}},"31":{"start":{"line":50,"column":16},"end":{"line":50,"column":34}},"32":{"start":{"line":53,"column":8},"end":{"line":59,"column":9}},"33":{"start":{"line":54,"column":29},"end":{"line":57,"column":13}},"34":{"start":{"line":58,"column":12},"end":{"line":58,"column":61}},"35":{"start":{"line":62,"column":0},"end":{"line":62,"column":45}}},"fnMap":{"0":{"name":"findFallbackCommand","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":28}},"loc":{"start":{"line":8,"column":51},"end":{"line":26,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":13},"end":{"line":12,"column":14}},"loc":{"start":{"line":12,"column":26},"end":{"line":17,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":16},"end":{"line":18,"column":17}},"loc":{"start":{"line":18,"column":35},"end":{"line":18,"column":67}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":35},"end":{"line":27,"column":36}},"loc":{"start":{"line":27,"column":60},"end":{"line":61,"column":1}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":25},"end":{"line":47,"column":26}},"loc":{"start":{"line":47,"column":37},"end":{"line":47,"column":109}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":49,"column":64},"end":{"line":49,"column":65}},"loc":{"start":{"line":49,"column":74},"end":{"line":49,"column":85}},"line":49}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},{"start":{"line":13,"column":8},"end":{"line":15,"column":9}}],"line":13},"1":{"loc":{"start":{"line":13,"column":12},"end":{"line":13,"column":94}},"type":"binary-expr","locations":[{"start":{"line":13,"column":12},"end":{"line":13,"column":43}},{"start":{"line":13,"column":47},"end":{"line":13,"column":94}}],"line":13},"2":{"loc":{"start":{"line":19,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":24,"column":5}},{"start":{"line":19,"column":4},"end":{"line":24,"column":5}}],"line":19},"3":{"loc":{"start":{"line":22,"column":9},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":9},"end":{"line":24,"column":5}},{"start":{"line":22,"column":9},"end":{"line":24,"column":5}}],"line":22},"4":{"loc":{"start":{"line":42,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":52,"column":9}},{"start":{"line":42,"column":8},"end":{"line":52,"column":9}}],"line":42},"5":{"loc":{"start":{"line":42,"column":12},"end":{"line":42,"column":72}},"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":36}},{"start":{"line":42,"column":40},"end":{"line":42,"column":72}}],"line":42},"6":{"loc":{"start":{"line":45,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":45,"column":12},"end":{"line":51,"column":13}},{"start":{"line":45,"column":12},"end":{"line":51,"column":13}}],"line":45},"7":{"loc":{"start":{"line":53,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":59,"column":9}},{"start":{"line":53,"column":8},"end":{"line":59,"column":9}}],"line":53}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":3,"7":3,"8":1,"9":2,"10":3,"11":3,"12":1,"13":2,"14":2,"15":3,"16":1,"17":42,"18":42,"19":3,"20":3,"21":3,"22":3,"23":3,"24":3,"25":3,"26":3,"27":2,"28":2,"29":2,"30":2,"31":2,"32":3,"33":1,"34":1,"35":1},"f":{"0":3,"1":3,"2":3,"3":42,"4":2,"5":2},"b":{"0":[1,2],"1":[3,1],"2":[1,2],"3":[2,0],"4":[3,0],"5":[3,3],"6":[2,1],"7":[1,2]},"inputSourceMap":{"version":3,"file":"FallbackResponseMiddleware.js","sourceRoot":"","sources":["FallbackResponseMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AACtC,gCAAmF;AACnF,oCAAuD;AACvD,4DAA+D;AAG/D,SAAS,mBAAmB,CAAC,UAA+B,EAAE,QAAiC;IAC7F,IAAI,eAAmC,CAAC;IAExC,MAAM,gBAAgB,GAAG,QAAQ;SAC9B,OAAO,EAAE;SACT,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACf,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;YACpE,OAAO,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC;SACvC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;SACD,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,cAAK,CAAC,eAAe,CAAC,CAAC,CAAC;IAEtD,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC/B,eAAe,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;KACvC;SAAM,IAAI,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,qBAAqB,CAAC,EAAE;QAC9D,eAAe,GAAG,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,qBAAqB,CAAC,CAAC,KAAe,CAAC;KACvF;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,MAAM,0BAA0B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACrE,IAAI;QACF,MAAM,IAAI,EAAE,CAAC;KACd;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,EACJ,OAAO,EACP,GAAG,EACH,UAAU,EACV,gBAAgB,EAChB,MAAM,EACN,UAAU,EACV,QAAQ,GACT,GAAG,OAAO,CAAC;QACZ,MAAM,eAAe,GAAG,mBAAmB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAClE,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,MAAM,CAAC,KAAK,CACV;;;;;;OAMC,EACD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EACrB,KAAK,CAAC,KAAK,CACZ,CAAC;QAEF,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,eAAe,CAAC,EAAE;YAC9C,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;YAC3B,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;YAEjF,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,EAAE;gBAClB,MAAM,SAAS,GAAG,gBAAI,CAAC,MAAM,CAAC,SAAS;qBACpC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,mCAA2B,CAAC,QAAQ,EAAE,eAAG,EAAe,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;gBACvF,OAAO,CAAC,SAAS;oBACf,gBAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAI,EAAe,CAAC,CAAC,CAAC;gBAC/E,UAAU,GAAG,IAAI,CAAC;aACnB;SACF;QAED,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,QAAQ,GAAgB;gBAC5B,OAAO,EAAE,sBAAsB;gBAC/B,IAAI,EAAE,qBAAY,CAAC,IAAI;aACxB,CAAC;YACF,OAAO,CAAC,SAAS,GAAG,gBAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtC;KACF;AACH,CAAC,CAAC;AAEF,kBAAe,0BAA0B,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { BotResponse, Middleware, RunTimeConfig, BotContextCommand } from '../Api';\nimport { intentResponseToBotResponse } from '../Utils';\nimport { ResponseType } from 'lexica-dialog-model/dist/Intent';\nimport { Config } from 'lexica-dialog-model/dist/Config';\n\nfunction findFallbackCommand(uniConfigs: Map<string, Config>, commands: List<BotContextCommand>) {\n  let fallbackCommand: string | undefined;\n\n  const fallbackCommands = commands\n    .toArray()\n    .map((command) => {\n      if (!isNil(command.intent) && !isNil(command.intent.fallbackCommand)) {\n        return command.intent.fallbackCommand;\n      }\n      return undefined;\n    })\n    .filter(fallbackCommand => !isNil(fallbackCommand));\n\n  if (fallbackCommands.length > 0) {\n    fallbackCommand = fallbackCommands[0];\n  } else if (uniConfigs.has(RunTimeConfig.FALLBACK_COMMAND_NAME)) {\n    fallbackCommand = uniConfigs.get(RunTimeConfig.FALLBACK_COMMAND_NAME).value as string;\n  }\n\n  return fallbackCommand;\n}\n\nconst fallbackResponseMiddleware: Middleware = async (context, next) => {\n  try {\n    await next();\n  } catch (error) {\n    const {\n      request,\n      uni,\n      uniConfigs,\n      intentRepository,\n      logger,\n      rawRequest,\n      commands,\n    } = context;\n    const fallbackCommand = findFallbackCommand(uniConfigs, commands);\n    let fallbacked = false;\n\n    logger.error(\n      `\n        Return fallback message.\n        Raw Request: %s\n        Error: %s\n        Stack trace:\n        %s\n      `,\n      JSON.stringify(rawRequest),\n      JSON.stringify(error),\n      error.stack,\n    );\n\n    if (!isNil(request) && !isNil(fallbackCommand)) {\n      const { locale } = request;\n      const intent = await intentRepository.findByUniCommandName(uni, fallbackCommand);\n\n      if (!isNil(intent)) {\n        const responses = List(intent.responses\n          .map(response => intentResponseToBotResponse(response, Map<string, any>(), locale)));\n        context.responses =\n          List(responses.toArray().reduce((a, b) => a.concat(b), List<BotResponse>()));\n        fallbacked = true;\n      }\n    }\n\n    if (!fallbacked) {\n      const response: BotResponse = {\n        message: 'Sorry, I don\\'t know',\n        type: ResponseType.TEXT,\n      };\n      context.responses = List([response]);\n    }\n  }\n};\n\nexport default fallbackResponseMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"7f3829eda59f9e22efb3811176569fe31622dba6"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FetchIssueMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FetchIssueMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":57}},"3":{"start":{"line":5,"column":29},"end":{"line":15,"column":1}},"4":{"start":{"line":6,"column":46},"end":{"line":6,"column":53}},"5":{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},"6":{"start":{"line":8,"column":29},"end":{"line":8,"column":36}},"7":{"start":{"line":9,"column":23},"end":{"line":9,"column":110}},"8":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"9":{"start":{"line":11,"column":12},"end":{"line":11,"column":38}},"10":{"start":{"line":14,"column":4},"end":{"line":14,"column":17}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":29},"end":{"line":5,"column":30}},"loc":{"start":{"line":5,"column":54},"end":{"line":15,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":13,"column":5}},{"start":{"line":7,"column":4},"end":{"line":13,"column":5}}],"line":7},"1":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":42,"7":42,"8":42,"9":9,"10":42,"11":1},"f":{"0":42},"b":{"0":[42,0],"1":[9,33]},"inputSourceMap":{"version":3,"file":"FetchIssueMiddleware.js","sourceRoot":"","sources":["FetchIssueMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,0DAAwD;AAGxD,MAAM,oBAAoB,GAAc,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC9D,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,OAAO,CAAC;IAClD,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAC7B,MAAM,MAAM,GACV,MAAM,eAAe,CAAC,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAM,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SAC3B;KACF;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,oBAAoB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Status } from 'lexica-dialog-model/dist/Issue';\nimport { Middleware } from '../Api';\n\nconst fetchIssueMiddleware:Middleware = async (context, next) => {\n  const { uni, request, issueRepository } = context;\n  if (!isNil(request)) {\n    const { senderId } = request;\n    const issues =\n      await issueRepository.findByUniAndSenderIdAndStatus(uni, senderId, Status.OPEN);\n    if (issues.length > 0) {\n      context.issue = issues[0];\n    }\n  }\n  await next();\n};\n\nexport default fetchIssueMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"42c33a364e4067178cd5ea2f41958d381149b68b"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FileRequestMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FileRequestMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":23},"end":{"line":10,"column":1}},"4":{"start":{"line":11,"column":30},"end":{"line":19,"column":1}},"5":{"start":{"line":12,"column":37},"end":{"line":12,"column":44}},"6":{"start":{"line":13,"column":4},"end":{"line":17,"column":5}},"7":{"start":{"line":14,"column":21},"end":{"line":14,"column":60}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":43}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":51}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"11":{"start":{"line":20,"column":0},"end":{"line":20,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":30},"end":{"line":11,"column":31}},"loc":{"start":{"line":11,"column":55},"end":{"line":19,"column":1}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":17,"column":5}},{"start":{"line":13,"column":4},"end":{"line":17,"column":5}}],"line":13},"1":{"loc":{"start":{"line":13,"column":8},"end":{"line":13,"column":115}},"type":"binary-expr","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":32}},{"start":{"line":13,"column":36},"end":{"line":13,"column":68}},{"start":{"line":13,"column":72},"end":{"line":13,"column":115}}],"line":13}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":42,"6":42,"7":4,"8":4,"9":4,"10":42,"11":1},"f":{"0":42},"b":{"0":[4,38],"1":[42,42,4]},"inputSourceMap":{"version":3,"file":"FileRequestMiddleware.js","sourceRoot":"","sources":["FileRequestMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAE/B,gCAAiD;AAEjD,MAAM,cAAc,GAAG;IACrB,iBAAW,CAAC,KAAK;IACjB,iBAAW,CAAC,IAAI;IAChB,iBAAW,CAAC,KAAK;IACjB,iBAAW,CAAC,KAAK;CAClB,CAAC;AAEF,MAAM,qBAAqB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAChE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IACzC,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC7F,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC;QACnC,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;KAC5C;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,qBAAqB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { Middleware, RequestType } from '../Api';\n\nconst supportedTypes = [\n  RequestType.AUDIO,\n  RequestType.FILE,\n  RequestType.IMAGE,\n  RequestType.VIDEO,\n];\n\nconst fileRequestMiddleware: Middleware = async (context, next) => {\n  const { request, fileService } = context;\n  if (!isNil(request) && !isNil(request.fileUrl) && supportedTypes.indexOf(request.type) !== -1) {\n    const file = await fileService.copy(request.fileUrl);\n    request.fileStoredPath = file.path;\n    request.fileContentType = file.contentType;\n  }\n  await next();\n};\n\nexport default fileRequestMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"fa71c9d056df8ce9a5e01a3289a5b78d4d297c16"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FileRequestResponseMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FileRequestResponseMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":35}},"5":{"start":{"line":7,"column":30},"end":{"line":29,"column":1}},"6":{"start":{"line":8,"column":59},"end":{"line":8,"column":66}},"7":{"start":{"line":9,"column":4},"end":{"line":28,"column":5}},"8":{"start":{"line":13,"column":27},"end":{"line":13,"column":34}},"9":{"start":{"line":14,"column":24},"end":{"line":14,"column":91}},"10":{"start":{"line":15,"column":23},"end":{"line":15,"column":80}},"11":{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},"12":{"start":{"line":17,"column":30},"end":{"line":18,"column":107}},"13":{"start":{"line":18,"column":33},"end":{"line":18,"column":105}},"14":{"start":{"line":19,"column":12},"end":{"line":20,"column":104}},"15":{"start":{"line":20,"column":70},"end":{"line":20,"column":81}},"16":{"start":{"line":23,"column":12},"end":{"line":23,"column":107}},"17":{"start":{"line":27,"column":8},"end":{"line":27,"column":21}},"18":{"start":{"line":30,"column":0},"end":{"line":30,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":30},"end":{"line":7,"column":31}},"loc":{"start":{"line":7,"column":55},"end":{"line":29,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":21},"end":{"line":18,"column":22}},"loc":{"start":{"line":18,"column":33},"end":{"line":18,"column":105}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":60},"end":{"line":20,"column":61}},"loc":{"start":{"line":20,"column":70},"end":{"line":20,"column":81}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":4},"end":{"line":28,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":28,"column":5}},{"start":{"line":9,"column":4},"end":{"line":28,"column":5}}],"line":9},"1":{"loc":{"start":{"line":9,"column":8},"end":{"line":12,"column":72}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},{"start":{"line":10,"column":11},"end":{"line":10,"column":43}},{"start":{"line":11,"column":11},"end":{"line":11,"column":40}},{"start":{"line":12,"column":11},"end":{"line":12,"column":72}}],"line":9},"2":{"loc":{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},{"start":{"line":16,"column":8},"end":{"line":24,"column":9}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":42,"7":42,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":4,"15":4,"16":0,"17":38,"18":1},"f":{"0":42,"1":4,"2":4},"b":{"0":[4,38],"1":[42,42,4,4],"2":[4,0]},"inputSourceMap":{"version":3,"file":"FileRequestResponseMiddleware.js","sourceRoot":"","sources":["FileRequestResponseMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AACtC,gCAMgB;AAChB,oCAAuD;AAEvD,MAAM,qBAAqB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACjE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IAC/D,IACC,CAAC,cAAK,CAAC,OAAO,CAAC;WACZ,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC;WACvB,OAAO,CAAC,OAAO,KAAK,SAAS;WAC7B,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,yBAAyB,CAAC,EAAE;QAE5D,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC3B,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,yBAAyB,CAAC,CAAC,KAAe,CAAC;QACxF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAEzE,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,EAAE;YACnB,MAAM,SAAS,GAAG,gBAAI,CAAC,MAAM,CAAC,SAAS;iBACrC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,mCAA2B,CAAC,QAAQ,EAAE,eAAG,EAAe,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACtF,OAAO,CAAC,SAAS;gBAChB,gBAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAI,EAAe,CAAC,CAAC,CAAC;SAC9E;aAAM;YACN,MAAM,IAAI,cAAQ,CAAC,kBAAY,CAAC,gBAAgB,EAAE,qBAAqB,GAAG,OAAO,CAAC,CAAC;SACnF;KAED;SAAM;QACN,MAAM,IAAI,EAAE,CAAC;KACb;AACF,CAAC,CAAC;AAEF,kBAAe,qBAAqB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport {\n\tBotError,\n\tBotErrorCode,\n\tBotResponse,\n\tMiddleware,\n\tRunTimeConfig,\n} from '../Api';\nimport { intentResponseToBotResponse } from '../Utils';\n\nconst fileRequestMiddleware: Middleware = async (context, next) => {\n\tconst { uni, request, uniConfigs, intentRepository } = context;\n\tif (\n\t\t!isNil(request)\n\t\t&& !isNil(request.fileUrl)\n\t\t&& request.message === undefined\n\t\t&& uniConfigs.has(RunTimeConfig.FILE_REQUEST_COMMAND_NAME)) {\n\n\t\tconst { locale } = request;\n\t\tconst command = uniConfigs.get(RunTimeConfig.FILE_REQUEST_COMMAND_NAME).value as string;\n\t\tconst intent = await intentRepository.findByUniCommandName(uni, command);\n\n\t\tif (!isNil(intent)) {\n\t\t\tconst responses = List(intent.responses\n\t\t\t\t.map(response => intentResponseToBotResponse(response, Map<string, any>(), locale)));\n\t\t\tcontext.responses =\n\t\t\t\tList(responses.toArray().reduce((a, b) => a.concat(b), List<BotResponse>()));\n\t\t} else {\n\t\t\tthrow new BotError(BotErrorCode.INTENT_NOT_FOUND, 'Command not found: ' + command);\n\t\t}\n\n\t} else {\n\t\tawait next();\n\t}\n};\n\nexport default fileRequestMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e5e83efd493dafd953fcd2a95dedc081eb35387b"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FlattenResponsesMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/FlattenResponsesMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":35},"end":{"line":10,"column":1}},"3":{"start":{"line":5,"column":4},"end":{"line":5,"column":17}},"4":{"start":{"line":6,"column":4},"end":{"line":9,"column":60}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":44}},"6":{"start":{"line":9,"column":26},"end":{"line":9,"column":37}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":35},"end":{"line":4,"column":36}},"loc":{"start":{"line":4,"column":60},"end":{"line":10,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":13},"end":{"line":8,"column":14}},"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":44}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":16},"end":{"line":9,"column":17}},"loc":{"start":{"line":9,"column":26},"end":{"line":9,"column":37}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":36,"4":33,"5":34,"6":34,"7":1},"f":{"0":36,"1":34,"2":34},"b":{},"inputSourceMap":{"version":3,"file":"FlattenResponsesMiddleware.js","sourceRoot":"","sources":["FlattenResponsesMiddleware.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AAGtC,MAAM,0BAA0B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACrE,MAAM,IAAI,EAAE,CAAC;IACb,OAAO,CAAC,SAAS,GAAG,gBAAI,CAAC,OAAO,CAAC,QAAQ;SACtC,OAAO,EAAE;SACT,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC;SACpC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAI,EAAe,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,kBAAe,0BAA0B,CAAC","sourcesContent":["import { Map, List } from 'immutable';\nimport { BotResponse, Middleware } from '../Api';\n\nconst flattenResponsesMiddleware: Middleware = async (context, next) => {\n  await next();\n  context.responses = List(context.commands\n    .toArray()\n    .map(command => command.botResponses)\n    .reduce((a, b) => a.concat(b), List<BotResponse>()));\n};\n\nexport default flattenResponsesMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"1bf7b4008dacb24c219e6c3c3b3c3e2df03f0ec9"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/GlobalConfigMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/GlobalConfigMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":31},"end":{"line":10,"column":1}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"4":{"start":{"line":6,"column":33},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":20},"end":{"line":7,"column":57}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":80}},"7":{"start":{"line":9,"column":4},"end":{"line":9,"column":17}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":31},"end":{"line":4,"column":32}},"loc":{"start":{"line":4,"column":56},"end":{"line":10,"column":1}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":43,"4":43,"5":43,"6":43,"7":43,"8":1},"f":{"0":43},"b":{},"inputSourceMap":{"version":3,"file":"GlobalConfigMiddleware.js","sourceRoot":"","sources":["GlobalConfigMiddleware.ts"],"names":[],"mappings":";;AACA,oCAAuC;AAGvC,MAAM,sBAAsB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACjE,MAAM,GAAG,GAAG,QAAQ,CAAC;IACrB,MAAM,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IACrC,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACtD,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,sBAAsB,CAAC","sourcesContent":["import { Middleware } from '../Api';\nimport { toConfigMap } from '../Utils';\nimport { Config } from 'lexica-dialog-model/dist/Config';\n\nconst globalConfigMiddleware: Middleware = async (context, next) => {\n  const uni = 'GLOBAL';\n  const { configRepository } = context;\n  const configs = await configRepository.findByUni(uni);\n  context.uniConfigs = context.uniConfigs.merge(toConfigMap(configs));\n  await next();\n};\n\nexport default globalConfigMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"3c4973ed79c3b3d5e83280067c4aae7f4d401bf4"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentDefaultFeatureMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentDefaultFeatureMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":39},"end":{"line":22,"column":1}},"4":{"start":{"line":6,"column":41},"end":{"line":6,"column":48}},"5":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"6":{"start":{"line":8,"column":33},"end":{"line":8,"column":69}},"7":{"start":{"line":9,"column":8},"end":{"line":19,"column":11}},"8":{"start":{"line":10,"column":41},"end":{"line":10,"column":48}},"9":{"start":{"line":11,"column":12},"end":{"line":18,"column":13}},"10":{"start":{"line":12,"column":40},"end":{"line":12,"column":62}},"11":{"start":{"line":13,"column":40},"end":{"line":13,"column":87}},"12":{"start":{"line":14,"column":16},"end":{"line":16,"column":105}},"13":{"start":{"line":15,"column":35},"end":{"line":15,"column":62}},"14":{"start":{"line":16,"column":46},"end":{"line":16,"column":84}},"15":{"start":{"line":17,"column":16},"end":{"line":17,"column":53}},"16":{"start":{"line":21,"column":4},"end":{"line":21,"column":17}},"17":{"start":{"line":23,"column":0},"end":{"line":23,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":39},"end":{"line":5,"column":40}},"loc":{"start":{"line":5,"column":64},"end":{"line":22,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":35},"end":{"line":9,"column":36}},"loc":{"start":{"line":9,"column":48},"end":{"line":19,"column":9}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":28},"end":{"line":15,"column":29}},"loc":{"start":{"line":15,"column":35},"end":{"line":15,"column":62}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":28},"end":{"line":16,"column":29}},"loc":{"start":{"line":16,"column":46},"end":{"line":16,"column":84}},"line":16}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},{"start":{"line":7,"column":4},"end":{"line":20,"column":5}}],"line":7},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":18,"column":13}},"type":"if","locations":[{"start":{"line":11,"column":12},"end":{"line":18,"column":13}},{"start":{"line":11,"column":12},"end":{"line":18,"column":13}}],"line":11},"2":{"loc":{"start":{"line":11,"column":16},"end":{"line":11,"column":82}},"type":"binary-expr","locations":[{"start":{"line":11,"column":16},"end":{"line":11,"column":39}},{"start":{"line":11,"column":43},"end":{"line":11,"column":82}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":33,"5":33,"6":33,"7":33,"8":34,"9":34,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":33,"17":1},"f":{"0":33,"1":34,"2":2,"3":2},"b":{"0":[33,0],"1":[2,32],"2":[34,34]},"inputSourceMap":{"version":3,"file":"IntentDefaultFeatureMiddleware.js","sourceRoot":"","sources":["IntentDefaultFeatureMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,yCAAgC;AAGhC,MAAM,8BAA8B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACzE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAC7C,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC1B,MAAM,gBAAgB,GAAG,cAAc,CAAC,mBAAmB,EAAE,CAAC;QAC9D,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACrC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;YACrC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;gBACpD,MAAM,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;gBAC/C,IAAI,iBAAiB,GAAG,kBAAS,CAAC,QAAQ,EAAE,eAAG,EAAkB,CAAC,CAAC;gBACnE,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;qBACpD,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBAC1C,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;gBACvF,OAAO,CAAC,QAAQ,GAAG,iBAAiB,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;KACJ;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,8BAA8B,CAAC","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport { Map } from 'immutable';\nimport { Middleware } from '../Api';\n\nconst intentDefaultFeatureMiddleware: Middleware = async (context, next) => {\n  const { sessionService, commands } = context;\n  if (!isNil(sessionService)) {\n    const memoriesFeatures = sessionService.getMemoriesFeatures();\n    commands.toArray().forEach((command) => {\n      const { features, intent } = command;\n      if (!isNil(intent) && !isNil(intent.defaultFeatures)) {\n        const defaultFeatures = intent.defaultFeatures;\n        let processedFeatures = defaultTo(features, Map<string, string>());\n        processedFeatures = Object.keys(intent.defaultFeatures)\n          .filter(key => !processedFeatures.has(key))\n          .reduce((feature, key) => feature.set(key, defaultFeatures[key]), processedFeatures);\n        command.features = processedFeatures;\n      }\n    });\n  }\n  await next();\n};\n\nexport default intentDefaultFeatureMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"13e3c91485cf5de110f2e24f7aedd7582d2ee962"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentExecutorMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentExecutorMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":33},"end":{"line":48,"column":1}},"3":{"start":{"line":5,"column":246},"end":{"line":5,"column":253}},"4":{"start":{"line":6,"column":4},"end":{"line":46,"column":5}},"5":{"start":{"line":7,"column":37},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":25},"end":{"line":44,"column":10}},"7":{"start":{"line":11,"column":12},"end":{"line":43,"column":13}},"8":{"start":{"line":14,"column":40},"end":{"line":32,"column":17}},"9":{"start":{"line":33,"column":16},"end":{"line":40,"column":17}},"10":{"start":{"line":34,"column":20},"end":{"line":39,"column":21}},"11":{"start":{"line":35,"column":24},"end":{"line":35,"column":67}},"12":{"start":{"line":38,"column":24},"end":{"line":38,"column":70}},"13":{"start":{"line":41,"column":16},"end":{"line":41,"column":54}},"14":{"start":{"line":42,"column":16},"end":{"line":42,"column":72}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":36}},"16":{"start":{"line":47,"column":4},"end":{"line":47,"column":17}},"17":{"start":{"line":49,"column":0},"end":{"line":49,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":33},"end":{"line":4,"column":34}},"loc":{"start":{"line":4,"column":58},"end":{"line":48,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":17},"end":{"line":10,"column":18}},"loc":{"start":{"line":10,"column":36},"end":{"line":44,"column":9}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":46,"column":5}},{"start":{"line":6,"column":4},"end":{"line":46,"column":5}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":67}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":32}},{"start":{"line":6,"column":36},"end":{"line":6,"column":67}}],"line":6},"2":{"loc":{"start":{"line":11,"column":12},"end":{"line":43,"column":13}},"type":"if","locations":[{"start":{"line":11,"column":12},"end":{"line":43,"column":13}},{"start":{"line":11,"column":12},"end":{"line":43,"column":13}}],"line":11},"3":{"loc":{"start":{"line":11,"column":16},"end":{"line":13,"column":54}},"type":"binary-expr","locations":[{"start":{"line":11,"column":16},"end":{"line":11,"column":47}},{"start":{"line":12,"column":19},"end":{"line":12,"column":60}},{"start":{"line":13,"column":19},"end":{"line":13,"column":54}}],"line":11},"4":{"loc":{"start":{"line":34,"column":20},"end":{"line":39,"column":21}},"type":"if","locations":[{"start":{"line":34,"column":20},"end":{"line":39,"column":21}},{"start":{"line":34,"column":20},"end":{"line":39,"column":21}}],"line":34}},"s":{"0":1,"1":1,"2":1,"3":31,"4":31,"5":31,"6":31,"7":32,"8":4,"9":4,"10":5,"11":5,"12":0,"13":4,"14":4,"15":31,"16":31,"17":1},"f":{"0":31,"1":32},"b":{"0":[31,0],"1":[31,31],"2":[4,28],"3":[32,32,32],"4":[5,0]},"inputSourceMap":{"version":3,"file":"IntentExecutorMiddleware.js","sourceRoot":"","sources":["IntentExecutorMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAG/B,MAAM,wBAAwB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACpE,MAAM,EACL,GAAG,EACH,UAAU,EACV,OAAO,EACP,SAAS,EACT,QAAQ,EACR,gBAAgB,EAChB,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,eAAe,EACf,oBAAoB,EACpB,cAAc,EACd,SAAS,EACT,cAAc,EACd,KAAK,EACL,UAAU,EACV,MAAM,GACN,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC9C,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QACrC,MAAM,QAAQ,GAAG,QAAQ;aACxB,OAAO,EAAE;aACT,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YACtB,IACC,CAAC,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC;mBACnB,CAAC,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC;mBAChC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxC,MAAM,eAAe,GAAG;oBACvB,OAAO;oBACP,gBAAgB;oBAChB,gBAAgB;oBAChB,KAAK;oBACL,eAAe;oBACf,MAAM;oBACN,iBAAiB;oBACjB,SAAS;oBACT,aAAa,EAAE,SAAS,CAAC,IAAI;oBAC7B,cAAc;oBACd,QAAQ;oBACR,UAAU;oBACV,oBAAoB;oBACpB,iBAAiB;oBACjB,cAAc;oBACd,GAAG;oBACH,UAAU;iBACV,CAAC;gBACF,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE;oBAC5C,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;wBACxB,MAAM,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC;qBAC3C;yBAAM;wBACN,MAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;qBAC9C;iBACD;gBACD,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;gBACtC,OAAO,CAAC,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;aACxD;QACF,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC5B;IACD,MAAM,IAAI,EAAE,CAAC;AACd,CAAC,CAAC;AAEF,kBAAe,wBAAwB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Middleware } from '../Api';\n\nconst intentExecutorMiddleware: Middleware = async (context, next) => {\n\tconst {\n\t\tuni,\n\t\tuniConfigs,\n\t\trequest,\n\t\tmessenger,\n\t\tcommands,\n\t\tintentRepository,\n\t\tsessionRepository,\n\t\tconfigRepository,\n\t\tmessageRepository,\n\t\tissueRepository,\n\t\tsenderInfoRepository,\n\t\tsessionService,\n\t\texecutors,\n\t\trequestMessage,\n\t\tissue,\n\t\tsenderInfo,\n\t\tlogger,\n\t} = context;\n\tif (!isNil(request) && !isNil(sessionService)) {\n\t\tconst { locale, senderId } = request;\n\t\tconst promises = commands\n\t\t.toArray()\n\t\t.map(async (command) => {\n\t\t\tif (\n\t\t\t\t!isNil(command.intent)\n\t\t\t\t&& !isNil(command.intent.executors)\n\t\t\t\t&& command.intent.executors.length > 0) {\n\t\t\t\tconst executorContext = {\n\t\t\t\t\tcommand,\n\t\t\t\t\tconfigRepository,\n\t\t\t\t\tintentRepository,\n\t\t\t\t\tissue,\n\t\t\t\t\tissueRepository,\n\t\t\t\t\tlocale,\n\t\t\t\t\tmessageRepository,\n\t\t\t\t\tmessenger,\n\t\t\t\t\tmessengerName: messenger.name,\n\t\t\t\t\trequestMessage,\n\t\t\t\t\tsenderId,\n\t\t\t\t\tsenderInfo,\n\t\t\t\t\tsenderInfoRepository,\n\t\t\t\t\tsessionRepository,\n\t\t\t\t\tsessionService,\n\t\t\t\t\tuni,\n\t\t\t\t\tuniConfigs,\n\t\t\t\t};\n\t\t\t\tfor (const name of command.intent.executors) {\n\t\t\t\t\tif (executors.has(name)) {\n\t\t\t\t\t\tawait executors.get(name)(executorContext);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn('Executor not found: [%s]', name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontext.issue = executorContext.issue;\n\t\t\t\tcontext.requestMessage = executorContext.requestMessage;\n\t\t\t}\n\t\t});\n\t\tawait Promise.all(promises);\n\t}\n\tawait next();\n};\n\nexport default intentExecutorMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"f8b61776b1fbf90c84d86585f1889aa7a8acd088"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentOptionMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentOptionMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":59}},"4":{"start":{"line":6,"column":31},"end":{"line":48,"column":1}},"5":{"start":{"line":7,"column":50},"end":{"line":7,"column":57}},"6":{"start":{"line":8,"column":4},"end":{"line":29,"column":5}},"7":{"start":{"line":13,"column":24},"end":{"line":17,"column":58}},"8":{"start":{"line":15,"column":30},"end":{"line":17,"column":56}},"9":{"start":{"line":18,"column":8},"end":{"line":28,"column":9}},"10":{"start":{"line":19,"column":27},"end":{"line":19,"column":42}},"11":{"start":{"line":20,"column":12},"end":{"line":26,"column":20}},"12":{"start":{"line":27,"column":12},"end":{"line":27,"column":43}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":17}},"14":{"start":{"line":31,"column":22},"end":{"line":33,"column":77}},"15":{"start":{"line":33,"column":28},"end":{"line":33,"column":75}},"16":{"start":{"line":34,"column":4},"end":{"line":47,"column":5}},"17":{"start":{"line":35,"column":25},"end":{"line":35,"column":42}},"18":{"start":{"line":36,"column":8},"end":{"line":46,"column":9}},"19":{"start":{"line":37,"column":28},"end":{"line":42,"column":27}},"20":{"start":{"line":37,"column":96},"end":{"line":42,"column":13}},"21":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"22":{"start":{"line":44,"column":16},"end":{"line":44,"column":51}},"23":{"start":{"line":49,"column":0},"end":{"line":49,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":31},"end":{"line":6,"column":32}},"loc":{"start":{"line":6,"column":56},"end":{"line":48,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":20},"end":{"line":15,"column":21}},"loc":{"start":{"line":15,"column":30},"end":{"line":17,"column":56}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":16},"end":{"line":33,"column":17}},"loc":{"start":{"line":33,"column":28},"end":{"line":33,"column":75}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":85},"end":{"line":37,"column":86}},"loc":{"start":{"line":37,"column":96},"end":{"line":42,"column":13}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":29,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":29,"column":5}},{"start":{"line":8,"column":4},"end":{"line":29,"column":5}}],"line":8},"1":{"loc":{"start":{"line":8,"column":8},"end":{"line":12,"column":29}},"type":"binary-expr","locations":[{"start":{"line":8,"column":8},"end":{"line":8,"column":39}},{"start":{"line":9,"column":11},"end":{"line":9,"column":35}},{"start":{"line":10,"column":11},"end":{"line":10,"column":43}},{"start":{"line":11,"column":11},"end":{"line":11,"column":38}},{"start":{"line":12,"column":11},"end":{"line":12,"column":29}}],"line":8},"2":{"loc":{"start":{"line":15,"column":30},"end":{"line":17,"column":56}},"type":"binary-expr","locations":[{"start":{"line":15,"column":30},"end":{"line":15,"column":62}},{"start":{"line":16,"column":15},"end":{"line":17,"column":56}}],"line":15},"3":{"loc":{"start":{"line":18,"column":8},"end":{"line":28,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":28,"column":9}},{"start":{"line":18,"column":8},"end":{"line":28,"column":9}}],"line":18},"4":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":52}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":30}},{"start":{"line":18,"column":34},"end":{"line":18,"column":52}}],"line":18},"5":{"loc":{"start":{"line":34,"column":4},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":47,"column":5}},{"start":{"line":34,"column":4},"end":{"line":47,"column":5}}],"line":34},"6":{"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":87}},"type":"binary-expr","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":39}},{"start":{"line":34,"column":43},"end":{"line":34,"column":63}},{"start":{"line":34,"column":67},"end":{"line":34,"column":87}}],"line":34},"7":{"loc":{"start":{"line":36,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":46,"column":9}},{"start":{"line":36,"column":8},"end":{"line":46,"column":9}}],"line":36},"8":{"loc":{"start":{"line":37,"column":28},"end":{"line":42,"column":27}},"type":"cond-expr","locations":[{"start":{"line":37,"column":64},"end":{"line":42,"column":15}},{"start":{"line":42,"column":18},"end":{"line":42,"column":27}}],"line":37},"9":{"loc":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},{"start":{"line":43,"column":12},"end":{"line":45,"column":13}}],"line":43}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":38,"6":38,"7":5,"8":9,"9":5,"10":5,"11":5,"12":5,"13":38,"14":35,"15":42,"16":35,"17":6,"18":6,"19":6,"20":10,"21":6,"22":6,"23":1},"f":{"0":38,"1":9,"2":42,"3":10},"b":{"0":[5,33],"1":[38,38,38,38,5],"2":[9,9],"3":[5,0],"4":[5,5],"5":[6,29],"6":[35,35,6],"7":[6,0],"8":[6,0],"9":[6,0]},"inputSourceMap":{"version":3,"file":"IntentOptionMiddleware.js","sourceRoot":"","sources":["IntentOptionMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AAEtC,4DAA+D;AAE/D,MAAM,sBAAsB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACjE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IACtD,IACE,CAAC,cAAK,CAAC,cAAc,CAAC;WACnB,CAAC,cAAK,CAAC,OAAO,CAAC;WACf,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC;WACvB,cAAc,CAAC,UAAU,EAAE;WAC3B,QAAQ,CAAC,OAAO,EAAE,EAAE;QACvB,MAAM,OAAO,GAAG,gBAAI,CAAC,cAAc;aAChC,UAAU,EAAE;aACZ,MAAM,CAAC,MAAM,CAAC,EAAE,CACf,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC;eACpB,MAAM,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE;oBAC5C,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE;YAC5C,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;YAC/B,OAAO,CAAC,QAAQ,GAAG,gBAAI,CAAC,CAAC;oBACvB,UAAU,EAAE,eAAG,EAAe;oBAC9B,YAAY,EAAE,gBAAI,EAAe;oBACjC,QAAQ,EAAE,eAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;oBAC9B,IAAI,EAAE,MAAM,CAAC,OAAO;oBACpB,iBAAiB,EAAE,eAAG,EAAe;iBACtC,CAAC,CAAC,CAAC;YACJ,cAAc,CAAC,aAAa,EAAE,CAAC;SAChC;KACF;IACD,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,SAAS,GAAG,gBAAI,CAAC,OAAO,CAAC,SAAS;SACrC,OAAO,EAAE;SACT,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,qBAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/D,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE;QAC1E,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,QAAQ,CAAC,IAAI,KAAK,qBAAY,CAAC,OAAO,EAAE;YAC1C,MAAM,OAAO,GAAG,CAAC,cAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzE,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,SAAS,EAAE,CAAC;gBACZ,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAChB,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;gBACnB,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACpC;SACF;KACF;AACH,CAAC,CAAC;AAEF,kBAAe,sBAAsB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { BotResponse, Middleware, SessionOption } from '../Api';\nimport { ResponseType } from 'lexica-dialog-model/dist/Intent';\n\nconst intentOptionMiddleware: Middleware = async (context, next) => {\n  const { sessionService, commands, request } = context;\n  if (\n    !isNil(sessionService)\n    && !isNil(request)\n    && !isNil(request.message)\n    && sessionService.hasOptions()\n    && commands.isEmpty()) {\n    const options = List(sessionService\n      .getOptions()\n      .filter(option =>\n        !isNil(request.message)\n        && option.textOnlyIndicator.toLowerCase().trim()\n        === request.message.toLowerCase().trim()));\n    if (!options.isEmpty() && options.size === 1) {\n      const option = options.first();\n      context.commands = List([{\n        attributes: Map<string, any>(),\n        botResponses: List<BotResponse>(),\n        features: Map(option.features),\n        name: option.command,\n        processedFeatures: Map<string, any>(),\n      }]);\n      sessionService.removeOptions();\n    }\n  }\n  await next();\n  const responses = List(context.responses\n    .toArray()\n    .filter(response => response.type === ResponseType.OPTIONS));\n  if (!isNil(sessionService) && !responses.isEmpty() && responses.size === 1) {\n    const response = responses.first();\n    if (response.type === ResponseType.OPTIONS) {\n      const options = !isNil(response.options) ? response.options.map(option => ({\n        command: option.command,\n        features: option.features,\n        liveCount: 0,\n        textOnlyIndicator: option.textOnlyIndicator,\n      })) : undefined;\n      if (!isNil(options)) {\n        sessionService.setOptions(options);\n      }\n    }\n  }\n};\n\nexport default intentOptionMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"d9b429836c08c288e98444c1c5a080b747186972"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentPostProcessorMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentPostProcessorMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":38},"end":{"line":34,"column":1}},"4":{"start":{"line":6,"column":98},"end":{"line":6,"column":105}},"5":{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},"6":{"start":{"line":8,"column":37},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":33},"end":{"line":17,"column":9}},"8":{"start":{"line":18,"column":32},"end":{"line":30,"column":10}},"9":{"start":{"line":19,"column":41},"end":{"line":19,"column":48}},"10":{"start":{"line":20,"column":36},"end":{"line":20,"column":83}},"11":{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},"12":{"start":{"line":22,"column":45},"end":{"line":24,"column":84}},"13":{"start":{"line":23,"column":49},"end":{"line":23,"column":86}},"14":{"start":{"line":24,"column":46},"end":{"line":24,"column":83}},"15":{"start":{"line":25,"column":16},"end":{"line":27,"column":17}},"16":{"start":{"line":26,"column":20},"end":{"line":26,"column":122}},"17":{"start":{"line":29,"column":12},"end":{"line":29,"column":58}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":43}},"19":{"start":{"line":33,"column":4},"end":{"line":33,"column":17}},"20":{"start":{"line":35,"column":0},"end":{"line":35,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":38},"end":{"line":5,"column":39}},"loc":{"start":{"line":5,"column":63},"end":{"line":34,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":55},"end":{"line":18,"column":56}},"loc":{"start":{"line":18,"column":74},"end":{"line":30,"column":9}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":28},"end":{"line":23,"column":29}},"loc":{"start":{"line":23,"column":49},"end":{"line":23,"column":86}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":25},"end":{"line":24,"column":26}},"loc":{"start":{"line":24,"column":46},"end":{"line":24,"column":83}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},{"start":{"line":7,"column":4},"end":{"line":32,"column":5}}],"line":7},"1":{"loc":{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},"type":"if","locations":[{"start":{"line":21,"column":12},"end":{"line":28,"column":13}},{"start":{"line":21,"column":12},"end":{"line":28,"column":13}}],"line":21},"2":{"loc":{"start":{"line":21,"column":16},"end":{"line":21,"column":81}},"type":"binary-expr","locations":[{"start":{"line":21,"column":16},"end":{"line":21,"column":39}},{"start":{"line":21,"column":43},"end":{"line":21,"column":81}}],"line":21}},"s":{"0":1,"1":1,"2":1,"3":1,"4":31,"5":31,"6":31,"7":31,"8":31,"9":32,"10":32,"11":32,"12":32,"13":2,"14":2,"15":32,"16":2,"17":32,"18":31,"19":31,"20":1},"f":{"0":31,"1":32,"2":2,"3":2},"b":{"0":[31,0],"1":[32,0],"2":[32,32]},"inputSourceMap":{"version":3,"file":"IntentPostProcessorMiddleware.js","sourceRoot":"","sources":["IntentPostProcessorMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,yCAAgC;AAGhC,MAAM,6BAA6B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACxE,MAAM,EACJ,OAAO,EACP,QAAQ,EACR,cAAc,EACd,GAAG,EACH,UAAU,EACV,SAAS,EACT,KAAK,EACL,UAAU,GACX,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QACrC,MAAM,gBAAgB,GAAG;YACvB,KAAK;YACL,MAAM;YACN,aAAa,EAAE,SAAS,CAAC,IAAI;YAC7B,QAAQ;YACR,UAAU;YACV,GAAG;YACH,UAAU;SACX,CAAC;QACF,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC/D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;YACrC,IAAI,iBAAiB,GAAG,kBAAS,CAAC,QAAQ,EAAE,eAAG,EAAe,CAAC,CAAC;YAChE,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;gBACnD,MAAM,oBAAoB,GAAG,MAAM,CAAC,cAAc;qBAC/C,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;qBAClE,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACnE,KAAK,MAAM,aAAa,IAAI,oBAAoB,EAAE;oBAChD,iBAAiB,GAAG,iBAAiB,CAAC,KAAK,CACzC,MAAM,aAAa,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,CAAC;iBAC7D;aACF;YACD,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;KACpC;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,6BAA6B,CAAC","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport { Map } from 'immutable';\nimport { Middleware } from '../Api';\n\nconst intentPostProcessorMiddleware: Middleware = async (context, next) => {\n  const {\n    request,\n    commands,\n    postProcessors,\n    uni,\n    uniConfigs,\n    messenger,\n    issue,\n    senderInfo,\n  } = context;\n  if (!isNil(request)) {\n    const { locale, senderId } = request;\n    const processorContext = {\n      issue,\n      locale,\n      messengerName: messenger.name,\n      senderId,\n      senderInfo,\n      uni,\n      uniConfigs,\n    };\n    const commandPromises = commands.toArray().map(async (command) => {\n      const { intent, features } = command;\n      let processedFeatures = defaultTo(features, Map<string, any>());\n      if (!isNil(intent) && !isNil(intent.postProcessors)) {\n        const intentPostProcessors = intent.postProcessors\n          .filter(postProcessorName => postProcessors.has(postProcessorName))\n          .map(postProcessorName => postProcessors.get(postProcessorName));\n        for (const postProcessor of intentPostProcessors) {\n          processedFeatures = processedFeatures.merge(\n            await postProcessor(processorContext, processedFeatures));\n        }\n      }\n      command.processedFeatures = processedFeatures;\n    });\n    await Promise.all(commandPromises);\n  }\n  await next();\n};\n\nexport default intentPostProcessorMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e5ac5a456fba5badb068446461e7d49162ecaf3b"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentPreProcessorMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentPreProcessorMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":37},"end":{"line":34,"column":1}},"4":{"start":{"line":6,"column":97},"end":{"line":6,"column":104}},"5":{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},"6":{"start":{"line":8,"column":37},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":33},"end":{"line":17,"column":9}},"8":{"start":{"line":18,"column":32},"end":{"line":30,"column":10}},"9":{"start":{"line":19,"column":41},"end":{"line":19,"column":48}},"10":{"start":{"line":20,"column":36},"end":{"line":20,"column":83}},"11":{"start":{"line":21,"column":12},"end":{"line":29,"column":13}},"12":{"start":{"line":22,"column":44},"end":{"line":24,"column":81}},"13":{"start":{"line":23,"column":48},"end":{"line":23,"column":83}},"14":{"start":{"line":24,"column":45},"end":{"line":24,"column":80}},"15":{"start":{"line":25,"column":16},"end":{"line":27,"column":17}},"16":{"start":{"line":26,"column":20},"end":{"line":26,"column":121}},"17":{"start":{"line":28,"column":16},"end":{"line":28,"column":53}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":43}},"19":{"start":{"line":33,"column":4},"end":{"line":33,"column":17}},"20":{"start":{"line":35,"column":0},"end":{"line":35,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":37},"end":{"line":5,"column":38}},"loc":{"start":{"line":5,"column":62},"end":{"line":34,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":55},"end":{"line":18,"column":56}},"loc":{"start":{"line":18,"column":74},"end":{"line":30,"column":9}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":28},"end":{"line":23,"column":29}},"loc":{"start":{"line":23,"column":48},"end":{"line":23,"column":83}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":25},"end":{"line":24,"column":26}},"loc":{"start":{"line":24,"column":45},"end":{"line":24,"column":80}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":32,"column":5}},{"start":{"line":7,"column":4},"end":{"line":32,"column":5}}],"line":7},"1":{"loc":{"start":{"line":21,"column":12},"end":{"line":29,"column":13}},"type":"if","locations":[{"start":{"line":21,"column":12},"end":{"line":29,"column":13}},{"start":{"line":21,"column":12},"end":{"line":29,"column":13}}],"line":21},"2":{"loc":{"start":{"line":21,"column":16},"end":{"line":21,"column":80}},"type":"binary-expr","locations":[{"start":{"line":21,"column":16},"end":{"line":21,"column":39}},{"start":{"line":21,"column":43},"end":{"line":21,"column":80}}],"line":21}},"s":{"0":1,"1":1,"2":1,"3":1,"4":34,"5":34,"6":34,"7":34,"8":34,"9":35,"10":35,"11":35,"12":35,"13":4,"14":4,"15":35,"16":4,"17":34,"18":34,"19":33,"20":1},"f":{"0":34,"1":35,"2":4,"3":4},"b":{"0":[34,0],"1":[35,0],"2":[35,35]},"inputSourceMap":{"version":3,"file":"IntentPreProcessorMiddleware.js","sourceRoot":"","sources":["IntentPreProcessorMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,yCAAgC;AAGhC,MAAM,4BAA4B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACvE,MAAM,EACJ,OAAO,EACP,QAAQ,EACR,aAAa,EACb,GAAG,EACH,UAAU,EACV,SAAS,EACT,KAAK,EACL,UAAU,GACX,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QACrC,MAAM,gBAAgB,GAAG;YACvB,KAAK;YACL,MAAM;YACN,aAAa,EAAE,SAAS,CAAC,IAAI;YAC7B,QAAQ;YACR,UAAU;YACV,GAAG;YACH,UAAU;SACX,CAAC;QACF,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC/D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;YACrC,IAAI,iBAAiB,GAAG,kBAAS,CAAC,QAAQ,EAAE,eAAG,EAAkB,CAAC,CAAC;YACnE,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;gBAClD,MAAM,mBAAmB,GAAG,MAAM,CAAC,aAAa;qBAC7C,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;qBAC/D,GAAG,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAChE,KAAK,MAAM,YAAY,IAAI,mBAAmB,EAAE;oBAC9C,iBAAiB,GAAG,iBAAiB,CAAC,KAAK,CACzC,MAAM,YAAY,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,CAAC;iBAC5D;gBACD,OAAO,CAAC,QAAQ,GAAG,iBAAiB,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;KACpC;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,4BAA4B,CAAC","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport { Map } from 'immutable';\nimport { Middleware } from '../Api';\n\nconst intentPreProcessorMiddleware: Middleware = async (context, next) => {\n  const {\n    request,\n    commands,\n    preProcessors,\n    uni,\n    uniConfigs,\n    messenger,\n    issue,\n    senderInfo,\n  } = context;\n  if (!isNil(request)) {\n    const { locale, senderId } = request;\n    const processorContext = {\n      issue,\n      locale,\n      messengerName: messenger.name,\n      senderId,\n      senderInfo,\n      uni,\n      uniConfigs,\n    };\n    const commandPromises = commands.toArray().map(async (command) => {\n      const { intent, features } = command;\n      let processedFeatures = defaultTo(features, Map<string, string>());\n      if (!isNil(intent) && !isNil(intent.preProcessors)) {\n        const intentPreProcessors = intent.preProcessors\n          .filter(preProcessorName => preProcessors.has(preProcessorName))\n          .map(preProcessorName => preProcessors.get(preProcessorName));\n        for (const preProcessor of intentPreProcessors) {\n          processedFeatures = processedFeatures.merge(\n            await preProcessor(processorContext, processedFeatures));\n        }\n        command.features = processedFeatures;\n      }\n    });\n    await Promise.all(commandPromises);\n  }\n  await next();\n};\n\nexport default intentPreProcessorMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"78fa2777c8b7998a6bd9f91f2d1f4bef5abc63c7"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentRequiredFeatureMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentRequiredFeatureMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":41},"end":{"line":20,"column":1}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":4},"end":{"line":18,"column":7}},"6":{"start":{"line":8,"column":37},"end":{"line":8,"column":44}},"7":{"start":{"line":9,"column":8},"end":{"line":17,"column":9}},"8":{"start":{"line":10,"column":37},"end":{"line":10,"column":41}},"9":{"start":{"line":11,"column":12},"end":{"line":13,"column":13}},"10":{"start":{"line":12,"column":16},"end":{"line":12,"column":96}},"11":{"start":{"line":12,"column":77},"end":{"line":12,"column":94}},"12":{"start":{"line":14,"column":12},"end":{"line":16,"column":13}},"13":{"start":{"line":15,"column":16},"end":{"line":15,"column":86}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":17}},"15":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":41},"end":{"line":5,"column":42}},"loc":{"start":{"line":5,"column":66},"end":{"line":20,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":31},"end":{"line":7,"column":32}},"loc":{"start":{"line":7,"column":44},"end":{"line":18,"column":5}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":70},"end":{"line":12,"column":71}},"loc":{"start":{"line":12,"column":77},"end":{"line":12,"column":94}},"line":12}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":17,"column":9}},{"start":{"line":9,"column":8},"end":{"line":17,"column":9}}],"line":9},"1":{"loc":{"start":{"line":11,"column":12},"end":{"line":13,"column":13}},"type":"if","locations":[{"start":{"line":11,"column":12},"end":{"line":13,"column":13}},{"start":{"line":11,"column":12},"end":{"line":13,"column":13}}],"line":11},"2":{"loc":{"start":{"line":14,"column":12},"end":{"line":16,"column":13}},"type":"if","locations":[{"start":{"line":14,"column":12},"end":{"line":16,"column":13}},{"start":{"line":14,"column":12},"end":{"line":16,"column":13}}],"line":14}},"s":{"0":1,"1":1,"2":1,"3":1,"4":33,"5":33,"6":34,"7":34,"8":34,"9":34,"10":34,"11":24,"12":34,"13":2,"14":31,"15":1},"f":{"0":33,"1":34,"2":24},"b":{"0":[34,0],"1":[34,0],"2":[2,32]},"inputSourceMap":{"version":3,"file":"IntentRequiredFeatureMiddleware.js","sourceRoot":"","sources":["IntentRequiredFeatureMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAAwC;AACxC,gCAA4D;AAE5D,MAAM,gCAAgC,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC3E,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAC7B,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACrC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QACrC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,EAAE;YAClB,IAAI,kBAAkB,GAAG,IAAI,CAAC;YAE9B,IAAI,gBAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;gBACvC,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACjF;YAED,IAAI,CAAC,kBAAkB,EAAE;gBACvB,MAAM,IAAI,cAAQ,CAAC,kBAAY,CAAC,wBAAwB,CAAC,CAAC;aAC3D;SACF;IACH,CAAC,CAAC,CAAC;IACH,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,gCAAgC,CAAC","sourcesContent":["import { isNil, isArray } from 'lodash';\nimport { Middleware, BotError, BotErrorCode } from '../Api';\n\nconst intentRequiredFeaturesMiddleware: Middleware = async (context, next) => {\n  const { commands } = context;\n  commands.toArray().forEach((command) => {\n    const { intent, features } = command;\n    if (!isNil(intent)) {\n      let hasAllRequiredKeys = true;\n\n      if (isArray(intent.requiredFeatureKeys)) {\n        hasAllRequiredKeys = intent.requiredFeatureKeys.every(key => features.has(key));\n      }\n\n      if (!hasAllRequiredKeys) {\n        throw new BotError(BotErrorCode.MISSING_REQUIRED_FEATURE);\n      }\n    }\n  });\n  await next();\n};\n\nexport default intentRequiredFeaturesMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"4c63dd51466a67e4f7fcf00928b2abc7f66f9170"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentResponseMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/IntentResponseMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":35}},"4":{"start":{"line":6,"column":33},"end":{"line":21,"column":1}},"5":{"start":{"line":7,"column":34},"end":{"line":7,"column":41}},"6":{"start":{"line":8,"column":4},"end":{"line":19,"column":5}},"7":{"start":{"line":9,"column":27},"end":{"line":9,"column":34}},"8":{"start":{"line":10,"column":8},"end":{"line":18,"column":11}},"9":{"start":{"line":11,"column":50},"end":{"line":11,"column":57}},"10":{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},"11":{"start":{"line":13,"column":34},"end":{"line":14,"column":111}},"12":{"start":{"line":14,"column":37},"end":{"line":14,"column":109}},"13":{"start":{"line":15,"column":16},"end":{"line":16,"column":108}},"14":{"start":{"line":16,"column":74},"end":{"line":16,"column":85}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":17}},"16":{"start":{"line":22,"column":0},"end":{"line":22,"column":43}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":33},"end":{"line":6,"column":34}},"loc":{"start":{"line":6,"column":58},"end":{"line":21,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":35},"end":{"line":10,"column":36}},"loc":{"start":{"line":10,"column":48},"end":{"line":18,"column":9}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":25},"end":{"line":14,"column":26}},"loc":{"start":{"line":14,"column":37},"end":{"line":14,"column":109}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":64},"end":{"line":16,"column":65}},"loc":{"start":{"line":16,"column":74},"end":{"line":16,"column":85}},"line":16}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":19,"column":5}},{"start":{"line":8,"column":4},"end":{"line":19,"column":5}}],"line":8},"1":{"loc":{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},"type":"if","locations":[{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},{"start":{"line":12,"column":12},"end":{"line":17,"column":13}}],"line":12}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":31,"6":31,"7":31,"8":31,"9":32,"10":32,"11":32,"12":32,"13":32,"14":32,"15":31,"16":1},"f":{"0":31,"1":32,"2":32,"3":32},"b":{"0":[31,0],"1":[32,0]},"inputSourceMap":{"version":3,"file":"IntentResponseMiddleware.js","sourceRoot":"","sources":["IntentResponseMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AAEtC,oCAAuD;AAEvD,MAAM,wBAAwB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACnE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IACtC,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QAC3B,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACrC,MAAM,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC;YAC9C,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,EAAE;gBAClB,MAAM,SAAS,GAAG,gBAAI,CAAC,MAAM,CAAC,SAAS;qBACtC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,mCAA2B,CAAC,QAAQ,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpF,OAAO,CAAC,YAAY;oBAClB,gBAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAI,EAAe,CAAC,CAAC,CAAC;aAChF;QACH,CAAC,CAAC,CAAC;KACJ;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,wBAAwB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { Middleware, BotResponse } from '../Api';\nimport { intentResponseToBotResponse } from '../Utils';\n\nconst intentResponseMiddleware: Middleware = async (context, next) => {\n  const { request, commands } = context;\n  if (!isNil(request)) {\n    const { locale } = request;\n    commands.toArray().forEach((command) => {\n      const { intent, processedFeatures } = command;\n      if (!isNil(intent)) {\n        const responses = List(intent.responses\n        .map(response => intentResponseToBotResponse(response, processedFeatures, locale)));\n        command.botResponses =\n          List(responses.toArray().reduce((a, b) => a.concat(b), List<BotResponse>()));\n      }\n    });\n  }\n  await next();\n};\n\nexport default intentResponseMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"fd25d7c67a162a753aca42d8e1f082be62649fca"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MemoriesFeatureMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MemoriesFeatureMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":35},"end":{"line":27,"column":1}},"3":{"start":{"line":5,"column":41},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},"5":{"start":{"line":7,"column":33},"end":{"line":7,"column":69}},"6":{"start":{"line":8,"column":8},"end":{"line":16,"column":11}},"7":{"start":{"line":9,"column":33},"end":{"line":9,"column":40}},"8":{"start":{"line":10,"column":12},"end":{"line":15,"column":13}},"9":{"start":{"line":11,"column":16},"end":{"line":11,"column":68}},"10":{"start":{"line":14,"column":16},"end":{"line":14,"column":52}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"12":{"start":{"line":19,"column":4},"end":{"line":26,"column":5}},"13":{"start":{"line":20,"column":8},"end":{"line":25,"column":11}},"14":{"start":{"line":21,"column":41},"end":{"line":21,"column":48}},"15":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"16":{"start":{"line":23,"column":16},"end":{"line":23,"column":59}},"17":{"start":{"line":28,"column":0},"end":{"line":28,"column":45}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":35},"end":{"line":4,"column":36}},"loc":{"start":{"line":4,"column":60},"end":{"line":27,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":35},"end":{"line":8,"column":36}},"loc":{"start":{"line":8,"column":48},"end":{"line":16,"column":9}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":35},"end":{"line":20,"column":36}},"loc":{"start":{"line":20,"column":48},"end":{"line":25,"column":9}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},{"start":{"line":6,"column":4},"end":{"line":17,"column":5}}],"line":6},"1":{"loc":{"start":{"line":10,"column":12},"end":{"line":15,"column":13}},"type":"if","locations":[{"start":{"line":10,"column":12},"end":{"line":15,"column":13}},{"start":{"line":10,"column":12},"end":{"line":15,"column":13}}],"line":10},"2":{"loc":{"start":{"line":19,"column":4},"end":{"line":26,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":26,"column":5}},{"start":{"line":19,"column":4},"end":{"line":26,"column":5}}],"line":19},"3":{"loc":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},{"start":{"line":22,"column":12},"end":{"line":24,"column":13}}],"line":22},"4":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":68}},"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":39}},{"start":{"line":22,"column":43},"end":{"line":22,"column":68}}],"line":22}},"s":{"0":1,"1":1,"2":1,"3":33,"4":33,"5":33,"6":33,"7":34,"8":34,"9":34,"10":0,"11":33,"12":31,"13":31,"14":32,"15":32,"16":32,"17":1},"f":{"0":33,"1":34,"2":32},"b":{"0":[33,0],"1":[34,0],"2":[31,0],"3":[32,0],"4":[32,32]},"inputSourceMap":{"version":3,"file":"MemoriesFeatureMiddleware.js","sourceRoot":"","sources":["MemoriesFeatureMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAI/B,MAAM,0BAA0B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACrE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAC7C,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC1B,MAAM,gBAAgB,GAAG,cAAc,CAAC,mBAAmB,EAAE,CAAC;QAC9D,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;YAC7B,IAAI,CAAC,cAAK,CAAC,QAAQ,CAAC,EAAE;gBACpB,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACrD;iBAAM;gBACL,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;KACJ;IACD,MAAM,IAAI,EAAE,CAAC;IACb,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC1B,QAAQ,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACrC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;YACrC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,QAAQ,CAAC,EAAE;gBACtC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAEF,kBAAe,0BAA0B,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map } from 'immutable';\nimport { Middleware } from '../Api';\n\nconst memoriesFeaturesMiddleware: Middleware = async (context, next) => {\n  const { sessionService, commands } = context;\n  if (!isNil(sessionService)) {\n    const memoriesFeatures = sessionService.getMemoriesFeatures();\n    commands.toArray().forEach((command) => {\n      const { features } = command;\n      if (!isNil(features)) {\n        command.features = memoriesFeatures.merge(features);\n      } else {\n        command.features = memoriesFeatures;\n      }\n    });\n  }\n  await next();\n  if (!isNil(sessionService)) {\n    commands.toArray().forEach((command) => {\n      const { intent, features } = command;\n      if (!isNil(intent) && !isNil(features)) {\n        sessionService.addMemory(intent, features);\n      }\n    });\n  }\n};\n\nexport default memoriesFeaturesMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"b79b2bf8e8c5ac58dbdb615592ff7c5f26480612"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MessengerMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MessengerMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":28},"end":{"line":22,"column":1}},"4":{"start":{"line":6,"column":65},"end":{"line":6,"column":72}},"5":{"start":{"line":7,"column":20},"end":{"line":7,"column":49}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":30}},"7":{"start":{"line":9,"column":4},"end":{"line":17,"column":5}},"8":{"start":{"line":10,"column":8},"end":{"line":16,"column":13}},"9":{"start":{"line":10,"column":87},"end":{"line":16,"column":9}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":17}},"11":{"start":{"line":19,"column":26},"end":{"line":19,"column":33}},"12":{"start":{"line":20,"column":4},"end":{"line":20,"column":87}},"13":{"start":{"line":21,"column":4},"end":{"line":21,"column":59}},"14":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":28},"end":{"line":5,"column":29}},"loc":{"start":{"line":5,"column":53},"end":{"line":22,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":75},"end":{"line":10,"column":76}},"loc":{"start":{"line":10,"column":87},"end":{"line":16,"column":9}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":17,"column":5}},{"start":{"line":9,"column":4},"end":{"line":17,"column":5}}],"line":9},"1":{"loc":{"start":{"line":9,"column":8},"end":{"line":9,"column":72}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":41}},{"start":{"line":9,"column":45},"end":{"line":9,"column":72}}],"line":9}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":42,"7":42,"8":0,"9":0,"10":42,"11":42,"12":42,"13":42,"14":1},"f":{"0":42,"1":0},"b":{"0":[0,42],"1":[42,0]},"inputSourceMap":{"version":3,"file":"MessengerMiddleware.js","sourceRoot":"","sources":["MessengerMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAA8C;AAG9C,MAAM,mBAAmB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC/D,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACrE,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC9C,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;IAC1B,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE;QAC5D,OAAO,CAAC,QAAQ,GAAG,gBAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClE,UAAU,EAAE,eAAG,EAAe;YAC9B,YAAY,EAAE,gBAAI,EAAe;YACjC,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,iBAAiB,EAAE,eAAG,EAAe;SACrC,CAAC,CAAC,CAAC,CAAC;KACL;IACD,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAC9B,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnF,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List, Record } from 'immutable';\nimport { Middleware, BotResponse } from '../Api';\n\nconst messengerMiddleware: Middleware = async (context, next) => {\n\tconst { messenger, uniConfigs, serverContext, rawRequest } = context;\n\tconst request = messenger.request(rawRequest);\n\tcontext.request = request;\n\tif (!isNil(request.commands) && !request.commands.isEmpty()) {\n\t\tcontext.commands = List(request.commands.toArray().map(command => ({\n\t\t\tattributes: Map<string, any>(),\n\t\t\tbotResponses: List<BotResponse>(),\n\t\t\tfeatures: command.features,\n\t\t\tname: command.name,\n\t\t\tprocessedFeatures: Map<string, any>(),\n\t\t})));\n\t}\n\tawait next();\n\tconst { responses } = context;\n\tcontext.rawResponses = messenger.response(responses, request.senderId, rawRequest);\n\tawait messenger.send(context.rawResponses, uniConfigs);\n};\n\nexport default messengerMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"da9d8660e94e64cc5543212926bb2feab165abf0"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MessengerWhiteListMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/MessengerWhiteListMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":14},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":37},"end":{"line":19,"column":1}},"3":{"start":{"line":5,"column":53},"end":{"line":5,"column":60}},"4":{"start":{"line":6,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":7,"column":22},"end":{"line":7,"column":84}},"6":{"start":{"line":8,"column":22},"end":{"line":8,"column":93}},"7":{"start":{"line":8,"column":41},"end":{"line":8,"column":92}},"8":{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},"9":{"start":{"line":10,"column":12},"end":{"line":10,"column":25}},"10":{"start":{"line":13,"column":12},"end":{"line":13,"column":39}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":21}},"12":{"start":{"line":20,"column":0},"end":{"line":20,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":37},"end":{"line":4,"column":38}},"loc":{"start":{"line":4,"column":62},"end":{"line":19,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":33},"end":{"line":8,"column":34}},"loc":{"start":{"line":8,"column":41},"end":{"line":8,"column":92}},"line":8}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":18,"column":5}},{"start":{"line":6,"column":4},"end":{"line":18,"column":5}}],"line":6},"1":{"loc":{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":14,"column":9}},{"start":{"line":9,"column":8},"end":{"line":14,"column":9}}],"line":9}},"s":{"0":1,"1":1,"2":1,"3":43,"4":43,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":42,"12":1},"f":{"0":43,"1":1},"b":{"0":[1,42],"1":[0,1]},"inputSourceMap":{"version":3,"file":"MessengerWhiteListMiddleware.js","sourceRoot":"","sources":["MessengerWhiteListMiddleware.ts"],"names":[],"mappings":";;AAAA,gCAAmD;AAEnD,MAAM,4BAA4B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACvE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;IACzD,IAAI,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,oBAAoB,CAAC,EAAE;QACtD,MAAM,KAAK,GAAI,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,oBAAoB,CAAC,CAAC,KAAkB,CAAC;QACrF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACtF,IAAI,KAAK,EAAE;YACT,MAAM,IAAI,EAAE,CAAC;SACd;aAAM;YACL,aAAa,CAAC,MAAM,GAAG,GAAG,CAAC;SAC5B;KACF;SAAM;QACL,MAAM,IAAI,EAAE,CAAC;KACd;AACH,CAAC,CAAC;AAEF,kBAAe,4BAA4B,CAAC","sourcesContent":["import { RunTimeConfig, Middleware } from '../Api';\n\nconst messengerWhiteListMiddleware: Middleware = async (context, next) => {\n  const { uniConfigs, messenger, serverContext } = context;\n  if (uniConfigs.has(RunTimeConfig.MESSENGER_WHITE_LIST)) {\n    const names = (uniConfigs.get(RunTimeConfig.MESSENGER_WHITE_LIST).value as string[]);\n    const exist = names.some(name => name.toLowerCase() === messenger.name.toLowerCase());\n    if (exist) {\n      await next();\n    } else {\n      serverContext.status = 404;\n    }\n  } else {\n    await next();\n  }\n};\n\nexport default messengerWhiteListMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"1678896249a483ee43d12fee9c231a90c2f50e8c"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/NewIntentMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/NewIntentMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":28},"end":{"line":16,"column":1}},"3":{"start":{"line":5,"column":64},"end":{"line":5,"column":71}},"4":{"start":{"line":6,"column":4},"end":{"line":14,"column":8}},"5":{"start":{"line":8,"column":27},"end":{"line":8,"column":57}},"6":{"start":{"line":10,"column":8},"end":{"line":13,"column":9}},"7":{"start":{"line":11,"column":27},"end":{"line":11,"column":89}},"8":{"start":{"line":12,"column":12},"end":{"line":12,"column":65}},"9":{"start":{"line":15,"column":4},"end":{"line":15,"column":17}},"10":{"start":{"line":17,"column":0},"end":{"line":17,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":28},"end":{"line":4,"column":29}},"loc":{"start":{"line":4,"column":53},"end":{"line":16,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":16},"end":{"line":8,"column":17}},"loc":{"start":{"line":8,"column":27},"end":{"line":8,"column":57}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":13},"end":{"line":9,"column":14}},"loc":{"start":{"line":9,"column":32},"end":{"line":14,"column":5}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":13,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":13,"column":9}},{"start":{"line":10,"column":8},"end":{"line":13,"column":9}}],"line":10},"1":{"loc":{"start":{"line":12,"column":29},"end":{"line":12,"column":64}},"type":"cond-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":55}},{"start":{"line":12,"column":58},"end":{"line":12,"column":64}}],"line":12}},"s":{"0":1,"1":1,"2":1,"3":36,"4":36,"5":37,"6":35,"7":35,"8":35,"9":36,"10":1},"f":{"0":36,"1":37,"2":35},"b":{"0":[35,0],"1":[2,33]},"inputSourceMap":{"version":3,"file":"NewIntentMiddleware.js","sourceRoot":"","sources":["NewIntentMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAG/B,MAAM,mBAAmB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC9D,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;IAEpE,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ;SACvB,OAAO,EAAE;SACT,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,cAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACxC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;QACrB,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9E,OAAO,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;SACtD;IACH,CAAC,CAAC,CAAC,CAAC;IACN,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Middleware } from '../Api';\n\nconst newIntentMiddleware: Middleware = async (context, next) => {\n  const { uni, commands, intentRepository, sessionService } = context;\n  // TODO can improve to parallel find\n  await Promise.all(commands\n    .toArray()\n    .filter(command => isNil(command.intent))\n    .map(async (command) => {\n      if (!isNil(command.name)) {\n        const intent = await intentRepository.findByUniCommandName(uni, command.name);\n        command.intent = intent == null ? undefined : intent;\n      }\n    }));\n  await next();\n};\n\nexport default newIntentMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"508ac7bff0bc5e24cdd346af79a903c70375bb16"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/NlpMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/NlpMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":22},"end":{"line":27,"column":1}},"4":{"start":{"line":6,"column":93},"end":{"line":6,"column":100}},"5":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"6":{"start":{"line":9,"column":8},"end":{"line":9,"column":60}},"7":{"start":{"line":11,"column":4},"end":{"line":25,"column":5}},"8":{"start":{"line":12,"column":25},"end":{"line":12,"column":81}},"9":{"start":{"line":13,"column":8},"end":{"line":19,"column":13}},"10":{"start":{"line":13,"column":79},"end":{"line":19,"column":9}},"11":{"start":{"line":20,"column":8},"end":{"line":24,"column":9}},"12":{"start":{"line":21,"column":33},"end":{"line":21,"column":80}},"13":{"start":{"line":21,"column":67},"end":{"line":21,"column":79}},"14":{"start":{"line":22,"column":12},"end":{"line":22,"column":51}},"15":{"start":{"line":23,"column":12},"end":{"line":23,"column":82}},"16":{"start":{"line":26,"column":4},"end":{"line":26,"column":17}},"17":{"start":{"line":28,"column":0},"end":{"line":28,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":22},"end":{"line":5,"column":23}},"loc":{"start":{"line":5,"column":47},"end":{"line":27,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":67},"end":{"line":13,"column":68}},"loc":{"start":{"line":13,"column":79},"end":{"line":19,"column":9}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":56},"end":{"line":21,"column":57}},"loc":{"start":{"line":21,"column":67},"end":{"line":21,"column":79}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},{"start":{"line":8,"column":4},"end":{"line":10,"column":5}}],"line":8},"1":{"loc":{"start":{"line":11,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":25,"column":5}},{"start":{"line":11,"column":4},"end":{"line":25,"column":5}}],"line":11},"2":{"loc":{"start":{"line":11,"column":8},"end":{"line":11,"column":98}},"type":"binary-expr","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":32}},{"start":{"line":11,"column":36},"end":{"line":11,"column":68}},{"start":{"line":11,"column":72},"end":{"line":11,"column":98}}],"line":11},"3":{"loc":{"start":{"line":20,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":24,"column":9}},{"start":{"line":20,"column":8},"end":{"line":24,"column":9}}],"line":20}},"s":{"0":1,"1":1,"2":1,"3":1,"4":38,"5":38,"6":38,"7":38,"8":33,"9":33,"10":34,"11":33,"12":33,"13":34,"14":33,"15":33,"16":38,"17":1},"f":{"0":38,"1":34,"2":34},"b":{"0":[38,0],"1":[33,5],"2":[38,38,38],"3":[33,0]},"inputSourceMap":{"version":3,"file":"NlpMiddleware.js","sourceRoot":"","sources":["NlpMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AAItC,MAAM,aAAa,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACxD,MAAM,EACJ,GAAG,EACH,UAAU,EACV,OAAO,EACP,cAAc,EACd,cAAc,EACd,iBAAiB,GAClB,GAAG,OAAO,CAAC;IAEZ,IAAI,QAAQ,CAAC;IAEb,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC1B,QAAQ,GAAG,cAAc,CAAC,uBAAuB,EAAE,CAAC;KACrD;IAED,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE;QAC5E,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC1E,OAAO,CAAC,QAAQ,GAAG,gBAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzD,UAAU,EAAE,eAAG,EAAe;YAC9B,YAAY,EAAE,gBAAI,EAAe;YACjC,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,iBAAiB,EAAE,eAAG,EAAe;SACtC,CAAC,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;YAC1B,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrE,cAAc,CAAC,QAAQ,GAAG,YAAY,CAAC;YACvC,OAAO,CAAC,cAAc,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAmB,CAAC;SACzF;KAEF;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { RequestMessage } from 'lexica-dialog-model/dist/Message';\nimport { BotResponse, Middleware, SessionService } from '../Api';\n\nconst nlpMiddleware: Middleware = async (context, next) => {\n  const {\n    uni,\n    nlpService,\n    request,\n    sessionService,\n    requestMessage,\n    messageRepository,\n  } = context;\n\n  let features;\n\n  if (!isNil(sessionService)) {\n    features = sessionService.getIntentMemoryFeatures();\n  }\n\n  if (!isNil(request) && !isNil(request.message) && context.commands.isEmpty()) {\n    const commands = await nlpService.analyse(request.message, uni, features);\n    context.commands = List(commands.toArray().map(command => ({\n      attributes: Map<string, any>(),\n      botResponses: List<BotResponse>(),\n      features: command.features,\n      name: command.name,\n      processedFeatures: Map<string, any>(),\n    })));\n\n    if (!isNil(requestMessage)) {\n      const commandNames = commands.toArray().map(command => command.name);\n      requestMessage.commands = commandNames;\n      context.requestMessage = await messageRepository.save(requestMessage) as RequestMessage;\n    }\n\n  }\n  await next();\n};\n\nexport default nlpMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"079b35b1b3b19e9bcaefd0c057d7d021dca6780f"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/RemoveDuplicateResponseMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/RemoveDuplicateResponseMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":42},"end":{"line":12,"column":1}},"2":{"start":{"line":4,"column":4},"end":{"line":4,"column":17}},"3":{"start":{"line":5,"column":26},"end":{"line":5,"column":33}},"4":{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},"5":{"start":{"line":7,"column":8},"end":{"line":10,"column":22}},"6":{"start":{"line":8,"column":28},"end":{"line":8,"column":47}},"7":{"start":{"line":9,"column":30},"end":{"line":9,"column":45}},"8":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":42},"end":{"line":3,"column":43}},"loc":{"start":{"line":3,"column":67},"end":{"line":12,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":21},"end":{"line":8,"column":22}},"loc":{"start":{"line":8,"column":28},"end":{"line":8,"column":47}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":17},"end":{"line":9,"column":18}},"loc":{"start":{"line":9,"column":30},"end":{"line":9,"column":45}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},{"start":{"line":6,"column":4},"end":{"line":11,"column":5}}],"line":6}},"s":{"0":1,"1":1,"2":36,"3":33,"4":33,"5":7,"6":17,"7":16,"8":1},"f":{"0":36,"1":17,"2":16},"b":{"0":[7,26]},"inputSourceMap":{"version":3,"file":"RemoveDuplicateResponseMiddleware.js","sourceRoot":"","sources":["RemoveDuplicateResponseMiddleware.ts"],"names":[],"mappings":";;AAGA,MAAM,iCAAiC,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC5E,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAC9B,IAAI,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE;QACtB,OAAO,CAAC,SAAS,GAAG,SAAS;aAC1B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACnC,GAAG,CAAC,CAAC,OAAsC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aAChE,MAAM,EAAE,CAAC;KACb;AACH,CAAC,CAAC;AAEF,kBAAe,iCAAiC,CAAC","sourcesContent":["import { Set, Iterable } from 'immutable';\nimport { Middleware, BotResponse, ResponseType } from '../Api';\n\nconst removeDuplicateResponseMiddleware: Middleware = async (context, next) => {\n  await next();\n  const { responses } = context;\n  if (responses.size > 1) {\n    context.responses = responses\n      .groupBy(res => JSON.stringify(res))\n      .map((grouped: Iterable<number, BotResponse>) => grouped.first())\n      .toList();\n  }\n};\n\nexport default removeDuplicateResponseMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"7bdd84843b12eb20efdbfe973c9911a5e7e65547"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/RequestMessageLoggingMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/RequestMessageLoggingMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":61}},"3":{"start":{"line":5,"column":40},"end":{"line":40,"column":1}},"4":{"start":{"line":6,"column":130},"end":{"line":6,"column":137}},"5":{"start":{"line":7,"column":4},"end":{"line":38,"column":5}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":31}},"7":{"start":{"line":10,"column":8},"end":{"line":22,"column":9}},"8":{"start":{"line":11,"column":12},"end":{"line":14,"column":14}},"9":{"start":{"line":17,"column":12},"end":{"line":21,"column":14}},"10":{"start":{"line":23,"column":8},"end":{"line":33,"column":11}},"11":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"12":{"start":{"line":35,"column":12},"end":{"line":35,"column":41}},"13":{"start":{"line":36,"column":12},"end":{"line":36,"column":62}},"14":{"start":{"line":39,"column":4},"end":{"line":39,"column":17}},"15":{"start":{"line":41,"column":0},"end":{"line":41,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":40},"end":{"line":5,"column":41}},"loc":{"start":{"line":5,"column":65},"end":{"line":40,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":38,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":38,"column":5}},{"start":{"line":7,"column":4},"end":{"line":38,"column":5}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":7,"column":67}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},{"start":{"line":7,"column":36},"end":{"line":7,"column":67}}],"line":7},"2":{"loc":{"start":{"line":10,"column":8},"end":{"line":22,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":22,"column":9}},{"start":{"line":10,"column":8},"end":{"line":22,"column":9}}],"line":10},"3":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":66}},"type":"cond-expr","locations":[{"start":{"line":25,"column":46},"end":{"line":25,"column":54}},{"start":{"line":25,"column":57},"end":{"line":25,"column":66}}],"line":25},"4":{"loc":{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":37,"column":9}},{"start":{"line":34,"column":8},"end":{"line":37,"column":9}}],"line":34}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":42,"7":42,"8":38,"9":4,"10":42,"11":42,"12":9,"13":9,"14":42,"15":1},"f":{"0":42},"b":{"0":[42,0],"1":[42,42],"2":[38,4],"3":[9,33],"4":[9,33]},"inputSourceMap":{"version":3,"file":"RequestMessageLoggingMiddleware.js","sourceRoot":"","sources":["RequestMessageLoggingMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,8DAM0C;AAG1C,MAAM,+BAA+B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC1E,MAAM,EACJ,GAAG,EACH,SAAS,EACT,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,eAAe,EACf,MAAM,EACN,UAAU,EACV,QAAQ,EACR,KAAK,GACN,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;QAC7C,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,UAAmB,CAAC;QAExB,IAAI,OAAO,CAAC,IAAI,KAAK,qBAAW,CAAC,IAAI,EAAE;YACrC,UAAU,GAAG;gBACX,OAAO,EAAE,kBAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;gBACvC,IAAI,EAAE,qBAAW,CAAC,IAAI;aACvB,CAAC;SACH;aAAM;YACL,UAAU,GAAG;gBACX,WAAW,EAAE,kBAAS,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;gBACnD,IAAI,EAAE,kBAAS,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;gBAC3C,IAAI,EAAE,OAAO,CAAC,IAAI;aACnB,CAAC;SACH;QAED,OAAO,CAAC,cAAc,GAAG,MAAM,iBAAiB,CAAC,MAAM,CAAC;YACtD,IAAI;YACJ,OAAO,EAAE,CAAC,cAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;YAC7C,SAAS,EAAE,SAAS,CAAC,IAAI;YACzB,UAAU;YAEV,OAAO,EAAE,UAAU;YACnB,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,SAAS,EAAE,cAAc,CAAC,YAAY,EAAE;YACxC,IAAI,EAAE,qBAAW,CAAC,OAAO;YACzB,GAAG;SACJ,CAAmB,CAAC;QAErB,IAAI,CAAC,cAAK,CAAC,KAAK,CAAC,EAAE;YACjB,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;YAC7B,OAAO,CAAC,KAAK,GAAG,MAAM,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnD;KACF;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,+BAA+B,CAAC","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport {\n  Request,\n  MessageType,\n  RequestType,\n  ResponseType,\n  RequestMessage,\n} from 'lexica-dialog-model/dist/Message';\nimport { Middleware } from '../Api';\n\nconst requestMessageLoggingMiddleware: Middleware = async (context, next) => {\n  const {\n    uni,\n    messenger,\n    request,\n    sessionService,\n    messageRepository,\n    issueRepository,\n    logger,\n    rawRequest,\n    commands,\n    issue,\n  } = context;\n  if (!isNil(request) && !isNil(sessionService)) {\n    const date = new Date();\n    let logRequest: Request;\n\n    if (request.type === RequestType.TEXT) {\n      logRequest = {\n        message: defaultTo(request.message, ''),\n        type: RequestType.TEXT,\n      };\n    } else {\n      logRequest = {\n        contentType: defaultTo(request.fileContentType, ''),\n        path: defaultTo(request.fileStoredPath, ''),\n        type: request.type,\n      };\n    }\n\n    context.requestMessage = await messageRepository.create({\n      date,\n      issueId: !isNil(issue) ? issue.id : undefined,\n      messenger: messenger.name,\n      rawRequest,\n      // TODO support multiple request type\n      request: logRequest,\n      senderId: request.senderId,\n      sessionId: sessionService.getSessionId(),\n      type: MessageType.REQUEST,\n      uni,\n    }) as RequestMessage;\n\n    if (!isNil(issue)) {\n      issue.lastUpdatedDate = date;\n      context.issue = await issueRepository.save(issue);\n    }\n  }\n  await next();\n};\n\nexport default requestMessageLoggingMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"281448ddd1e034917d7357cc3fd5756feb9cdd8d"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ResponseMessageLoggingMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/ResponseMessageLoggingMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":61}},"3":{"start":{"line":5,"column":41},"end":{"line":31,"column":1}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":17}},"5":{"start":{"line":7,"column":116},"end":{"line":7,"column":123}},"6":{"start":{"line":8,"column":4},"end":{"line":30,"column":5}},"7":{"start":{"line":10,"column":36},"end":{"line":18,"column":9}},"8":{"start":{"line":19,"column":8},"end":{"line":28,"column":9}},"9":{"start":{"line":20,"column":12},"end":{"line":22,"column":16}},"10":{"start":{"line":21,"column":16},"end":{"line":21,"column":140}},"11":{"start":{"line":25,"column":12},"end":{"line":27,"column":16}},"12":{"start":{"line":26,"column":16},"end":{"line":26,"column":140}},"13":{"start":{"line":29,"column":8},"end":{"line":29,"column":87}},"14":{"start":{"line":29,"column":30},"end":{"line":29,"column":85}},"15":{"start":{"line":32,"column":0},"end":{"line":32,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":41},"end":{"line":5,"column":42}},"loc":{"start":{"line":5,"column":66},"end":{"line":31,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":59},"end":{"line":20,"column":60}},"loc":{"start":{"line":20,"column":80},"end":{"line":22,"column":13}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":59},"end":{"line":25,"column":60}},"loc":{"start":{"line":25,"column":80},"end":{"line":27,"column":13}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":23},"end":{"line":29,"column":24}},"loc":{"start":{"line":29,"column":30},"end":{"line":29,"column":85}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":30,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":30,"column":5}},{"start":{"line":8,"column":4},"end":{"line":30,"column":5}}],"line":8},"1":{"loc":{"start":{"line":8,"column":8},"end":{"line":8,"column":130}},"type":"binary-expr","locations":[{"start":{"line":8,"column":8},"end":{"line":8,"column":32}},{"start":{"line":8,"column":36},"end":{"line":8,"column":67}},{"start":{"line":8,"column":71},"end":{"line":8,"column":97}},{"start":{"line":8,"column":101},"end":{"line":8,"column":130}}],"line":8},"2":{"loc":{"start":{"line":12,"column":21},"end":{"line":12,"column":66}},"type":"cond-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":54}},{"start":{"line":12,"column":57},"end":{"line":12,"column":66}}],"line":12},"3":{"loc":{"start":{"line":19,"column":8},"end":{"line":28,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":28,"column":9}},{"start":{"line":19,"column":8},"end":{"line":28,"column":9}}],"line":19}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":42,"7":42,"8":42,"9":42,"10":49,"11":0,"12":0,"13":42,"14":0,"15":1},"f":{"0":42,"1":49,"2":0,"3":0},"b":{"0":[42,0],"1":[42,42,42,42],"2":[11,31],"3":[42,0]},"inputSourceMap":{"version":3,"file":"ResponseMessageLoggingMiddleware.js","sourceRoot":"","sources":["ResponseMessageLoggingMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,8DAA+D;AAG/D,MAAM,gCAAgC,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC3E,MAAM,IAAI,EAAE,CAAC;IACb,MAAM,EACJ,GAAG,EACH,SAAS,EACT,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,MAAM,EACN,SAAS,EACT,YAAY,EACZ,KAAK,GACN,GAAG,OAAO,CAAC;IACZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,IAAI,CAAC,cAAK,CAAC,SAAS,CAAC,IAAI,CAAC,cAAK,CAAC,YAAY,CAAC,EAAE;QAC1F,IAAI,QAAQ,CAAC;QACb,MAAM,mBAAmB,GAAG;YAC1B,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,OAAO,EAAE,CAAC,cAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;YAC7C,SAAS,EAAE,SAAS,CAAC,IAAI;YACzB,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,SAAS,EAAE,cAAc,CAAC,YAAY,EAAE;YACxC,IAAI,EAAE,qBAAW,CAAC,QAAQ;YAC1B,GAAG;SACJ,CAAC;QACF,IAAI,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,EAAE;YACxC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;gBACjE,OAAO,iBAAiB,CAAC,MAAM,mBAC1B,mBAAmB,IACtB,WAAW,EAAE,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EACpC,QAAQ,IACR,CAAC;YACL,CAAC,CAAC,CAAC,CAAC;SACL;aAAM;YACL,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;gBACjE,OAAO,iBAAiB,CAAC,MAAM,mBAC1B,mBAAmB,IACtB,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE,EACpC,QAAQ,IACR,CAAC;YACL,CAAC,CAAC,CAAC,CAAC;SACL;QAED,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC,CAAC;KAChF;AACH,CAAC,CAAC;AAEF,kBAAe,gCAAgC,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { MessageType } from 'lexica-dialog-model/dist/Message';\nimport { Middleware } from '../Api';\n\nconst responseMessageLoggingMiddleware: Middleware = async (context, next) => {\n  await next();\n  const {\n    uni,\n    messenger,\n    request,\n    sessionService,\n    messageRepository,\n    logger,\n    responses,\n    rawResponses,\n    issue,\n  } = context;\n  if (!isNil(request) && !isNil(sessionService) && !isNil(responses) && !isNil(rawResponses)) {\n    let promises;\n    const baseResponseMessage = {\n      date: new Date(),\n      issueId: !isNil(issue) ? issue.id : undefined,\n      messenger: messenger.name,\n      senderId: request.senderId,\n      sessionId: sessionService.getSessionId(),\n      type: MessageType.RESPONSE,\n      uni,\n    };\n    if (responses.size === rawResponses.size) {\n      promises = Promise.all(responses.toArray().map((response, index) => {\n        return messageRepository.create({\n          ...baseResponseMessage,\n          rawResponse: rawResponses.get(index),\n          response,\n        });\n      }));\n    } else {\n      promises = Promise.all(responses.toArray().map((response, index) => {\n        return messageRepository.create({\n          ...baseResponseMessage,\n          rawResponse: rawResponses.toObject(),\n          response,\n        });\n      }));\n    }\n\n    promises.catch(err => logger.error('Create response message with error', err));\n  }\n};\n\nexport default responseMessageLoggingMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"a224f4d3f49a93b15e76174b0205c2256e09b4a8"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SenderInfoMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SenderInfoMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":29},"end":{"line":14,"column":1}},"3":{"start":{"line":5,"column":62},"end":{"line":5,"column":69}},"4":{"start":{"line":6,"column":4},"end":{"line":12,"column":5}},"5":{"start":{"line":7,"column":27},"end":{"line":8,"column":87}},"6":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"7":{"start":{"line":10,"column":12},"end":{"line":10,"column":44}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":17}},"9":{"start":{"line":15,"column":0},"end":{"line":15,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":29},"end":{"line":4,"column":30}},"loc":{"start":{"line":4,"column":54},"end":{"line":14,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":12,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":12,"column":5}},{"start":{"line":6,"column":4},"end":{"line":12,"column":5}}],"line":6},"1":{"loc":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},{"start":{"line":9,"column":8},"end":{"line":11,"column":9}}],"line":9}},"s":{"0":1,"1":1,"2":1,"3":42,"4":42,"5":42,"6":42,"7":1,"8":42,"9":1},"f":{"0":42},"b":{"0":[42,0],"1":[1,41]},"inputSourceMap":{"version":3,"file":"SenderInfoMiddleware.js","sourceRoot":"","sources":["SenderInfoMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAG/B,MAAM,oBAAoB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC/D,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,oBAAoB,EAAE,GAAG,OAAO,CAAC;IAClE,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,UAAU,GAAG,MAAM,oBAAoB;aAC1C,mCAAmC,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAK,CAAC,UAAU,CAAC,EAAE;YACtB,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC;KACF;IACD,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,oBAAoB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Middleware } from '../Api';\n\nconst senderInfoMiddleware: Middleware = async (context, next) => {\n  const { uni, messenger, request, senderInfoRepository } = context;\n  if (!isNil(request)) {\n    const senderInfo = await senderInfoRepository\n      .findOneByUniAndMessengerAndSenderId(uni, messenger.name, request.senderId);\n    if (!isNil(senderInfo)) {\n      context.senderInfo = senderInfo;\n    }\n  }\n  await next();\n};\n\nexport default senderInfoMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"3e8374383abb09d2a6aab2daa8c6f15f7a7c53e4"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SessionMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SessionMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":18},"end":{"line":5,"column":39}},"4":{"start":{"line":6,"column":39},"end":{"line":18,"column":1}},"5":{"start":{"line":7,"column":60},"end":{"line":7,"column":67}},"6":{"start":{"line":8,"column":4},"end":{"line":17,"column":5}},"7":{"start":{"line":9,"column":31},"end":{"line":9,"column":165}},"8":{"start":{"line":10,"column":8},"end":{"line":10,"column":48}},"9":{"start":{"line":11,"column":8},"end":{"line":11,"column":36}},"10":{"start":{"line":12,"column":8},"end":{"line":12,"column":21}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":36}},"12":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":39},"end":{"line":6,"column":40}},"loc":{"start":{"line":6,"column":64},"end":{"line":18,"column":1}},"line":6}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":17,"column":5}},{"start":{"line":8,"column":4},"end":{"line":17,"column":5}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":42,"6":42,"7":42,"8":42,"9":42,"10":42,"11":39,"12":0,"13":1},"f":{"0":42},"b":{"0":[42,0]},"inputSourceMap":{"version":3,"file":"SessionMiddleware.js","sourceRoot":"","sources":["SessionMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,gCAAmD;AACnD,wCAA4C;AAE5C,MAAM,8BAA8B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACzE,MAAM,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAChE,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,cAAc,GAAG,IAAI,wBAAc,CACvC,iBAAiB,EACjB,GAAG,EACH,OAAO,CAAC,QAAQ,EACf,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,oBAAoB,CAAC,CAAC,KAAgB,CACrE,CAAC;QACF,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;QACxC,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;QAC5B,MAAM,IAAI,EAAE,CAAC;QACb,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;KAC7B;SAAM;QACL,MAAM,IAAI,EAAE,CAAC;KACd;AACH,CAAC,CAAC;AAEF,kBAAe,8BAA8B,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Middleware, RunTimeConfig } from '../Api';\nimport { SessionService } from '../session';\n\nconst createSessionServiceMiddleware: Middleware = async (context, next) => {\n  const { uni, sessionRepository, request, uniConfigs } = context;\n  if (!isNil(request)) {\n    const sessionService = new SessionService(\n      sessionRepository,\n      uni,\n      request.senderId,\n      (uniConfigs.get(RunTimeConfig.SESSION_EXPIRE_IN_MS).value as number),\n    );\n    context.sessionService = sessionService;\n    await sessionService.init();\n    await next();\n    await sessionService.save();\n  } else {\n    await next();\n  }\n};\n\nexport default createSessionServiceMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"7a9fc7ff67230d6c7ee81441f30c5805ab8eb822"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/StartConversationMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/StartConversationMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":35}},"5":{"start":{"line":7,"column":36},"end":{"line":49,"column":1}},"6":{"start":{"line":8,"column":4},"end":{"line":48,"column":5}},"7":{"start":{"line":9,"column":8},"end":{"line":9,"column":21}},"8":{"start":{"line":12,"column":54},"end":{"line":12,"column":61}},"9":{"start":{"line":13,"column":8},"end":{"line":47,"column":9}},"10":{"start":{"line":18,"column":31},"end":{"line":18,"column":38}},"11":{"start":{"line":19,"column":28},"end":{"line":19,"column":44}},"12":{"start":{"line":20,"column":27},"end":{"line":20,"column":41}},"13":{"start":{"line":21,"column":29},"end":{"line":21,"column":45}},"14":{"start":{"line":22,"column":38},"end":{"line":22,"column":63}},"15":{"start":{"line":23,"column":12},"end":{"line":43,"column":13}},"16":{"start":{"line":24,"column":40},"end":{"line":24,"column":79}},"17":{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},"18":{"start":{"line":26,"column":20},"end":{"line":26,"column":72}},"19":{"start":{"line":29,"column":20},"end":{"line":29,"column":71}},"20":{"start":{"line":31,"column":40},"end":{"line":35,"column":28}},"21":{"start":{"line":32,"column":44},"end":{"line":32,"column":86}},"22":{"start":{"line":34,"column":36},"end":{"line":34,"column":59}},"23":{"start":{"line":36,"column":34},"end":{"line":37,"column":118}},"24":{"start":{"line":37,"column":37},"end":{"line":37,"column":116}},"25":{"start":{"line":38,"column":16},"end":{"line":39,"column":108}},"26":{"start":{"line":39,"column":74},"end":{"line":39,"column":85}},"27":{"start":{"line":42,"column":16},"end":{"line":42,"column":28}},"28":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"29":{"start":{"line":50,"column":0},"end":{"line":50,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":36},"end":{"line":7,"column":37}},"loc":{"start":{"line":7,"column":61},"end":{"line":49,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":28},"end":{"line":32,"column":29}},"loc":{"start":{"line":32,"column":44},"end":{"line":32,"column":86}},"line":32},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":26},"end":{"line":34,"column":27}},"loc":{"start":{"line":34,"column":36},"end":{"line":34,"column":59}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":25},"end":{"line":37,"column":26}},"loc":{"start":{"line":37,"column":37},"end":{"line":37,"column":116}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":39,"column":64},"end":{"line":39,"column":65}},"loc":{"start":{"line":39,"column":74},"end":{"line":39,"column":85}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":47,"column":9}},{"start":{"line":13,"column":8},"end":{"line":47,"column":9}}],"line":13},"1":{"loc":{"start":{"line":13,"column":12},"end":{"line":17,"column":34}},"type":"binary-expr","locations":[{"start":{"line":13,"column":12},"end":{"line":13,"column":43}},{"start":{"line":14,"column":15},"end":{"line":14,"column":39}},{"start":{"line":15,"column":15},"end":{"line":15,"column":46}},{"start":{"line":16,"column":15},"end":{"line":16,"column":73}},{"start":{"line":17,"column":15},"end":{"line":17,"column":34}}],"line":13},"2":{"loc":{"start":{"line":23,"column":12},"end":{"line":43,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":43,"column":13}},{"start":{"line":23,"column":12},"end":{"line":43,"column":13}}],"line":23},"3":{"loc":{"start":{"line":23,"column":16},"end":{"line":23,"column":82}},"type":"binary-expr","locations":[{"start":{"line":23,"column":16},"end":{"line":23,"column":39}},{"start":{"line":23,"column":43},"end":{"line":23,"column":82}}],"line":23},"4":{"loc":{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},"type":"if","locations":[{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},{"start":{"line":25,"column":16},"end":{"line":30,"column":17}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":36,"7":36,"8":5,"9":5,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":2,"18":1,"19":1,"20":2,"21":4,"22":1,"23":2,"24":2,"25":2,"26":2,"27":0,"28":3,"29":1},"f":{"0":36,"1":4,"2":1,"3":2,"4":2},"b":{"0":[2,3],"1":[5,5,5,4,2],"2":[2,0],"3":[2,2],"4":[1,1]},"inputSourceMap":{"version":3,"file":"StartConversationMiddleware.js","sourceRoot":"","sources":["StartConversationMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,yCAAsC;AACtC,gCAKgB;AAChB,oCAAuD;AAGvD,MAAM,2BAA2B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACtE,IAAI;QACF,MAAM,IAAI,EAAE,CAAC;KACd;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QACtD,IACE,CAAC,cAAK,CAAC,cAAc,CAAC;eACnB,CAAC,cAAK,CAAC,OAAO,CAAC;eACf,KAAK,YAAY,cAAQ;eACzB,KAAK,CAAC,IAAI,KAAK,kBAAY,CAAC,wBAAwB;eACpD,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;YACxB,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;YAC3B,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAClC,MAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;YAEpD,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAK,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;gBACpD,MAAM,eAAe,GAAG,eAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBACpD,IAAI,cAAc,CAAC,eAAe,EAAE,EAAE;oBACpC,cAAc,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;iBACrD;qBAAM;oBACL,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;iBACpD;gBACD,MAAM,eAAe,GAAG,eAAe;qBACpC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;qBACzD,MAAM,EAAE;qBACR,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;qBACvC,KAAK,EAAE,CAAC;gBACX,MAAM,SAAS,GAAG,gBAAI,CAAC,MAAM,CAAC,SAAS;qBACpC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,mCAA2B,CAC1C,eAAe,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClD,OAAO,CAAC,YAAY;oBAChB,gBAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAI,EAAe,CAAC,CAAC,CAAC;aAClF;iBAAM;gBACL,MAAM,KAAK,CAAC;aACb;SACF;aAAM;YACL,MAAM,KAAK,CAAC;SACb;KACF;AACH,CAAC,CAAC;AAEF,kBAAe,2BAA2B,CAAC","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport { List, Map } from 'immutable';\nimport {\n  BotError,\n  BotErrorCode,\n  Middleware,\n  BotResponse,\n} from '../Api';\nimport { intentResponseToBotResponse } from '../Utils';\nimport { ResponseType } from 'lexica-dialog-model/dist/Intent';\n\nconst startConversationMiddleware: Middleware = async (context, next) => {\n  try {\n    await next();\n  } catch (error) {\n    const { sessionService, request, commands } = context;\n    if (\n      !isNil(sessionService)\n      && !isNil(request)\n      && error instanceof BotError\n      && error.code === BotErrorCode.MISSING_REQUIRED_FEATURE\n      && commands.size === 1) {\n      const { locale } = request;\n      const command = commands.first();\n      const intent = command.intent;\n      const features = command.features;\n      const processedFeatures = command.processedFeatures;\n\n      if (!isNil(intent) && !isNil(intent.missingFeatures)) {\n        const missingFeatures = Map(intent.missingFeatures);\n        if (sessionService.hasConversation()) {\n          sessionService.updateConversationFeatures(features);\n        } else {\n          sessionService.startConversation(intent, features);\n        }\n        const highestPriority = missingFeatures\n          .filter((value, key) => !features.has(defaultTo(key, '')))\n          .toList()\n          .sort((a, b) => a.priority - b.priority)\n          .first();\n        const responses = List(intent.responses\n          .map(response => intentResponseToBotResponse(\n            highestPriority.response, features, locale)));\n        command.botResponses =\n            List(responses.toArray().reduce((a, b) => a.concat(b), List<BotResponse>()));\n      } else {\n        throw error;\n      }\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport default startConversationMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"501dd7aa1f2b8ad66f197183034ec36d1dc66710"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SuspendAutoReplyMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/SuspendAutoReplyMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":18},"end":{"line":7,"column":61}},"6":{"start":{"line":8,"column":18},"end":{"line":11,"column":1}},"7":{"start":{"line":9,"column":4},"end":{"line":9,"column":38}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":49}},"9":{"start":{"line":12,"column":20},"end":{"line":16,"column":1}},"10":{"start":{"line":13,"column":27},"end":{"line":13,"column":43}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":71}},"12":{"start":{"line":14,"column":34},"end":{"line":14,"column":69}},"13":{"start":{"line":15,"column":4},"end":{"line":15,"column":26}},"14":{"start":{"line":17,"column":34},"end":{"line":23,"column":1}},"15":{"start":{"line":18,"column":27},"end":{"line":18,"column":101}},"16":{"start":{"line":18,"column":67},"end":{"line":18,"column":100}},"17":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"18":{"start":{"line":20,"column":8},"end":{"line":20,"column":20}},"19":{"start":{"line":22,"column":4},"end":{"line":22,"column":29}},"20":{"start":{"line":24,"column":30},"end":{"line":32,"column":1}},"21":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"22":{"start":{"line":26,"column":8},"end":{"line":26,"column":17}},"23":{"start":{"line":28,"column":27},"end":{"line":28,"column":48}},"24":{"start":{"line":29,"column":24},"end":{"line":29,"column":44}},"25":{"start":{"line":30,"column":25},"end":{"line":30,"column":45}},"26":{"start":{"line":31,"column":4},"end":{"line":31,"column":68}},"27":{"start":{"line":33,"column":35},"end":{"line":144,"column":1}},"28":{"start":{"line":34,"column":131},"end":{"line":34,"column":138}},"29":{"start":{"line":35,"column":4},"end":{"line":143,"column":5}},"30":{"start":{"line":36,"column":29},"end":{"line":36,"column":36}},"31":{"start":{"line":37,"column":23},"end":{"line":37,"column":110}},"32":{"start":{"line":39,"column":8},"end":{"line":57,"column":9}},"33":{"start":{"line":41,"column":12},"end":{"line":56,"column":13}},"34":{"start":{"line":42,"column":29},"end":{"line":42,"column":39}},"35":{"start":{"line":43,"column":16},"end":{"line":50,"column":19}},"36":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"37":{"start":{"line":52,"column":20},"end":{"line":52,"column":78}},"38":{"start":{"line":54,"column":16},"end":{"line":54,"column":38}},"39":{"start":{"line":55,"column":16},"end":{"line":55,"column":23}},"40":{"start":{"line":58,"column":8},"end":{"line":139,"column":9}},"41":{"start":{"line":59,"column":12},"end":{"line":59,"column":25}},"42":{"start":{"line":62,"column":33},"end":{"line":62,"column":42}},"43":{"start":{"line":63,"column":29},"end":{"line":63,"column":128}},"44":{"start":{"line":64,"column":42},"end":{"line":64,"column":77}},"45":{"start":{"line":65,"column":12},"end":{"line":138,"column":13}},"46":{"start":{"line":66,"column":16},"end":{"line":66,"column":29}},"47":{"start":{"line":69,"column":32},"end":{"line":69,"column":63}},"48":{"start":{"line":70,"column":42},"end":{"line":70,"column":110}},"49":{"start":{"line":71,"column":38},"end":{"line":71,"column":116}},"50":{"start":{"line":72,"column":44},"end":{"line":72,"column":103}},"51":{"start":{"line":73,"column":31},"end":{"line":73,"column":36}},"52":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"53":{"start":{"line":75,"column":20},"end":{"line":75,"column":112}},"54":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"55":{"start":{"line":78,"column":20},"end":{"line":78,"column":122}},"56":{"start":{"line":80,"column":16},"end":{"line":82,"column":17}},"57":{"start":{"line":81,"column":20},"end":{"line":81,"column":103}},"58":{"start":{"line":83,"column":43},"end":{"line":84,"column":66}},"59":{"start":{"line":85,"column":36},"end":{"line":85,"column":111}},"60":{"start":{"line":86,"column":16},"end":{"line":105,"column":17}},"61":{"start":{"line":87,"column":33},"end":{"line":87,"column":43}},"62":{"start":{"line":88,"column":37},"end":{"line":95,"column":21}},"63":{"start":{"line":96,"column":20},"end":{"line":96,"column":64}},"64":{"start":{"line":97,"column":20},"end":{"line":97,"column":51}},"65":{"start":{"line":98,"column":20},"end":{"line":98,"column":56}},"66":{"start":{"line":99,"column":20},"end":{"line":99,"column":61}},"67":{"start":{"line":100,"column":20},"end":{"line":100,"column":75}},"68":{"start":{"line":101,"column":20},"end":{"line":103,"column":21}},"69":{"start":{"line":102,"column":24},"end":{"line":102,"column":89}},"70":{"start":{"line":104,"column":20},"end":{"line":104,"column":36}},"71":{"start":{"line":106,"column":16},"end":{"line":123,"column":17}},"72":{"start":{"line":110,"column":40},"end":{"line":110,"column":63}},"73":{"start":{"line":111,"column":20},"end":{"line":117,"column":23}},"74":{"start":{"line":118,"column":20},"end":{"line":121,"column":21}},"75":{"start":{"line":119,"column":24},"end":{"line":119,"column":66}},"76":{"start":{"line":120,"column":24},"end":{"line":120,"column":94}},"77":{"start":{"line":122,"column":20},"end":{"line":122,"column":36}},"78":{"start":{"line":124,"column":16},"end":{"line":134,"column":17}},"79":{"start":{"line":125,"column":40},"end":{"line":125,"column":63}},"80":{"start":{"line":126,"column":20},"end":{"line":133,"column":23}},"81":{"start":{"line":127,"column":43},"end":{"line":127,"column":89}},"82":{"start":{"line":129,"column":24},"end":{"line":131,"column":25}},"83":{"start":{"line":130,"column":28},"end":{"line":130,"column":40}},"84":{"start":{"line":132,"column":24},"end":{"line":132,"column":37}},"85":{"start":{"line":135,"column":16},"end":{"line":137,"column":17}},"86":{"start":{"line":136,"column":20},"end":{"line":136,"column":33}},"87":{"start":{"line":142,"column":8},"end":{"line":142,"column":21}},"88":{"start":{"line":145,"column":0},"end":{"line":145,"column":45}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":18},"end":{"line":8,"column":19}},"loc":{"start":{"line":8,"column":70},"end":{"line":11,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":20},"end":{"line":12,"column":21}},"loc":{"start":{"line":12,"column":34},"end":{"line":16,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":24},"end":{"line":14,"column":25}},"loc":{"start":{"line":14,"column":34},"end":{"line":14,"column":69}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":34},"end":{"line":17,"column":35}},"loc":{"start":{"line":17,"column":48},"end":{"line":23,"column":1}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":56},"end":{"line":18,"column":57}},"loc":{"start":{"line":18,"column":67},"end":{"line":18,"column":100}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":30},"end":{"line":24,"column":31}},"loc":{"start":{"line":24,"column":44},"end":{"line":32,"column":1}},"line":24},"6":{"name":"(anonymous_6)","decl":{"start":{"line":33,"column":35},"end":{"line":33,"column":36}},"loc":{"start":{"line":33,"column":60},"end":{"line":144,"column":1}},"line":33},"7":{"name":"(anonymous_7)","decl":{"start":{"line":127,"column":32},"end":{"line":127,"column":33}},"loc":{"start":{"line":127,"column":43},"end":{"line":127,"column":89}},"line":127},"8":{"name":"(anonymous_8)","decl":{"start":{"line":128,"column":30},"end":{"line":128,"column":31}},"loc":{"start":{"line":128,"column":43},"end":{"line":133,"column":21}},"line":128}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},{"start":{"line":19,"column":4},"end":{"line":21,"column":5}}],"line":19},"1":{"loc":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},{"start":{"line":25,"column":4},"end":{"line":27,"column":5}}],"line":25},"2":{"loc":{"start":{"line":35,"column":4},"end":{"line":143,"column":5}},"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":143,"column":5}},{"start":{"line":35,"column":4},"end":{"line":143,"column":5}}],"line":35},"3":{"loc":{"start":{"line":39,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":57,"column":9}},{"start":{"line":39,"column":8},"end":{"line":57,"column":9}}],"line":39},"4":{"loc":{"start":{"line":39,"column":12},"end":{"line":40,"column":75}},"type":"binary-expr","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":66}},{"start":{"line":40,"column":15},"end":{"line":40,"column":75}}],"line":39},"5":{"loc":{"start":{"line":41,"column":12},"end":{"line":56,"column":13}},"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":56,"column":13}},{"start":{"line":41,"column":12},"end":{"line":56,"column":13}}],"line":41},"6":{"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},{"start":{"line":51,"column":16},"end":{"line":53,"column":17}}],"line":51},"7":{"loc":{"start":{"line":58,"column":8},"end":{"line":139,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":139,"column":9}},{"start":{"line":58,"column":8},"end":{"line":139,"column":9}}],"line":58},"8":{"loc":{"start":{"line":65,"column":12},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":138,"column":13}},{"start":{"line":65,"column":12},"end":{"line":138,"column":13}}],"line":65},"9":{"loc":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},{"start":{"line":74,"column":16},"end":{"line":76,"column":17}}],"line":74},"10":{"loc":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"type":"if","locations":[{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},{"start":{"line":77,"column":16},"end":{"line":79,"column":17}}],"line":77},"11":{"loc":{"start":{"line":80,"column":16},"end":{"line":82,"column":17}},"type":"if","locations":[{"start":{"line":80,"column":16},"end":{"line":82,"column":17}},{"start":{"line":80,"column":16},"end":{"line":82,"column":17}}],"line":80},"12":{"loc":{"start":{"line":83,"column":43},"end":{"line":84,"column":66}},"type":"cond-expr","locations":[{"start":{"line":84,"column":22},"end":{"line":84,"column":24}},{"start":{"line":84,"column":27},"end":{"line":84,"column":66}}],"line":83},"13":{"loc":{"start":{"line":85,"column":36},"end":{"line":85,"column":111}},"type":"cond-expr","locations":[{"start":{"line":85,"column":70},"end":{"line":85,"column":79}},{"start":{"line":85,"column":82},"end":{"line":85,"column":111}}],"line":85},"14":{"loc":{"start":{"line":86,"column":16},"end":{"line":105,"column":17}},"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":105,"column":17}},{"start":{"line":86,"column":16},"end":{"line":105,"column":17}}],"line":86},"15":{"loc":{"start":{"line":86,"column":20},"end":{"line":86,"column":67}},"type":"binary-expr","locations":[{"start":{"line":86,"column":20},"end":{"line":86,"column":29}},{"start":{"line":86,"column":33},"end":{"line":86,"column":67}}],"line":86},"16":{"loc":{"start":{"line":101,"column":20},"end":{"line":103,"column":21}},"type":"if","locations":[{"start":{"line":101,"column":20},"end":{"line":103,"column":21}},{"start":{"line":101,"column":20},"end":{"line":103,"column":21}}],"line":101},"17":{"loc":{"start":{"line":106,"column":16},"end":{"line":123,"column":17}},"type":"if","locations":[{"start":{"line":106,"column":16},"end":{"line":123,"column":17}},{"start":{"line":106,"column":16},"end":{"line":123,"column":17}}],"line":106},"18":{"loc":{"start":{"line":106,"column":20},"end":{"line":109,"column":53}},"type":"binary-expr","locations":[{"start":{"line":106,"column":20},"end":{"line":106,"column":29}},{"start":{"line":107,"column":23},"end":{"line":107,"column":57}},{"start":{"line":108,"column":23},"end":{"line":108,"column":53}},{"start":{"line":109,"column":23},"end":{"line":109,"column":53}}],"line":106},"19":{"loc":{"start":{"line":118,"column":20},"end":{"line":121,"column":21}},"type":"if","locations":[{"start":{"line":118,"column":20},"end":{"line":121,"column":21}},{"start":{"line":118,"column":20},"end":{"line":121,"column":21}}],"line":118},"20":{"loc":{"start":{"line":124,"column":16},"end":{"line":134,"column":17}},"type":"if","locations":[{"start":{"line":124,"column":16},"end":{"line":134,"column":17}},{"start":{"line":124,"column":16},"end":{"line":134,"column":17}}],"line":124},"21":{"loc":{"start":{"line":124,"column":20},"end":{"line":124,"column":67}},"type":"binary-expr","locations":[{"start":{"line":124,"column":20},"end":{"line":124,"column":29}},{"start":{"line":124,"column":33},"end":{"line":124,"column":67}}],"line":124},"22":{"loc":{"start":{"line":129,"column":24},"end":{"line":131,"column":25}},"type":"if","locations":[{"start":{"line":129,"column":24},"end":{"line":131,"column":25}},{"start":{"line":129,"column":24},"end":{"line":131,"column":25}}],"line":129},"23":{"loc":{"start":{"line":129,"column":28},"end":{"line":129,"column":109}},"type":"binary-expr","locations":[{"start":{"line":129,"column":28},"end":{"line":129,"column":61}},{"start":{"line":129,"column":65},"end":{"line":129,"column":109}}],"line":129},"24":{"loc":{"start":{"line":135,"column":16},"end":{"line":137,"column":17}},"type":"if","locations":[{"start":{"line":135,"column":16},"end":{"line":137,"column":17}},{"start":{"line":135,"column":16},"end":{"line":137,"column":17}}],"line":135}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":2,"8":2,"9":1,"10":24,"11":24,"12":71,"13":24,"14":1,"15":9,"16":28,"17":9,"18":3,"19":6,"20":1,"21":6,"22":0,"23":6,"24":6,"25":6,"26":6,"27":1,"28":38,"29":38,"30":38,"31":38,"32":38,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":37,"41":28,"42":9,"43":9,"44":9,"45":9,"46":3,"47":6,"48":6,"49":6,"50":6,"51":6,"52":6,"53":0,"54":6,"55":0,"56":6,"57":0,"58":6,"59":6,"60":6,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":6,"72":2,"73":2,"74":2,"75":2,"76":2,"77":2,"78":6,"79":3,"80":3,"81":13,"82":6,"83":2,"84":4,"85":6,"86":5,"87":0,"88":1},"f":{"0":2,"1":24,"2":71,"3":9,"4":28,"5":6,"6":38,"7":13,"8":6},"b":{"0":[3,6],"1":[0,6],"2":[38,0],"3":[1,37],"4":[38,38],"5":[1,0],"6":[1,0],"7":[28,9],"8":[3,6],"9":[0,6],"10":[0,6],"11":[0,6],"12":[0,6],"13":[0,6],"14":[1,5],"15":[6,6],"16":[1,0],"17":[2,4],"18":[6,5,5,5],"19":[2,0],"20":[3,3],"21":[6,3],"22":[2,4],"23":[6,6],"24":[5,1]},"inputSourceMap":{"version":3,"file":"SuspendAutoReplyMiddleware.js","sourceRoot":"","sources":["SuspendAutoReplyMiddleware.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AACtC,mCAA+B;AAC/B,gCAAsE;AACtE,0DAA+D;AAC/D,8DAK0C;AAE1C,MAAM,SAAS,GAAG,KAAK,EACtB,iBAAoC,EACpC,cAA8B,EAC9B,KAAY,EAAE,EAAE;IAChB,cAAc,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC;IAClC,MAAM,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,QAAuB,EAAE,EAAE;IAC/C,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAc,EAAE,CAAc,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7F,OAAO,cAAc,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,CAAC,QAAuB,EAAE,EAAE;IAC7D,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,cAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IACzF,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,OAAO,IAAI,CAAC;KACZ;IACD,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,QAAuB,EAAE,EAAE;IACzD,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;QACzB,OAAO,CAAC,CAAC;KACT;IACD,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,EAAiB,CAAC;IACxD,MAAM,YAAY,GAAG,cAAc,CAAC,GAAG,EAAiB,CAAC;IACzD,OAAO,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;AACjE,CAAC,CAAC;AAEF,MAAM,0BAA0B,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IACtE,MAAM,EACL,GAAG,EACH,UAAU,EACV,OAAO,EACP,SAAS,EACT,eAAe,EACf,iBAAiB,EACjB,cAAc,EACd,gBAAgB,EAChB,MAAM,GACN,GAAG,OAAO,CAAC;IAEZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,EAAE;QACpB,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAC7B,MAAM,MAAM,GACX,MAAM,eAAe,CAAC,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAM,CAAC,IAAI,CAAC,CAAC;QACjF,IAAI,KAAY,CAAC;QAEjB,IAAI,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,kBAAkB,CAAC;eAC/C,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,kBAAkB,CAAC,CAAC,KAAiB,EAAE;YAExE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;gBACxB,KAAK,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC;oBACpC,eAAe,EAAE,IAAI;oBACrB,SAAS,EAAE,SAAS,CAAC,IAAI;oBACzB,QAAQ,EAAE,IAAI;oBACd,QAAQ;oBACR,MAAM,EAAE,cAAM,CAAC,IAAI;oBACnB,GAAG;iBACH,CAAC,CAAC;gBAEH,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;oBAC3B,MAAM,SAAS,CAAC,iBAAiB,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;iBAC1D;gBAED,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;gBAEtB,OAAO;aACP;SACD;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,EAAE,CAAC;SACb;aAAM;YACN,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,iBAAiB,CAAC,8BAA8B,CAClF,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,EAAY,CAAC,CAAC,CAAC;YAC5C,MAAM,qBAAqB,GAAG,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAClE,IAAI,cAAK,CAAC,qBAAqB,CAAC,EAAE;gBAEjC,MAAM,IAAI,EAAE,CAAC;aACb;iBAAM;gBAEN,MAAM,OAAO,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;gBAChD,MAAM,iBAAiB,GACtB,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,gCAAgC,CAAC,CAAC;gBAChE,MAAM,aAAa,GAClB,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,0CAA0C,CAAC,CAAC;gBAC1E,MAAM,mBAAmB,GACxB,UAAU,CAAC,GAAG,CAAC,mBAAa,CAAC,uBAAuB,CAAC,CAAC;gBACvD,IAAI,QAAQ,GAAG,KAAK,CAAC;gBAErB,IAAI,cAAK,CAAC,iBAAiB,CAAC,EAAE;oBAC7B,MAAM,CAAC,IAAI,CACV,wBAAwB,EACxB,mBAAa,CAAC,gCAAgC,CAC9C,CAAC;iBACF;gBAED,IAAI,cAAK,CAAC,aAAa,CAAC,EAAE;oBACzB,MAAM,CAAC,IAAI,CACV,wBAAwB,EACxB,mBAAa,CAAC,0CAA0C,CACxD,CAAC;iBACF;gBAED,IAAI,cAAK,CAAC,mBAAmB,CAAC,EAAE;oBAC/B,MAAM,CAAC,IAAI,CACV,wBAAwB,EACxB,mBAAa,CAAC,uBAAuB,CACrC,CAAC;iBACF;gBAED,MAAM,kBAAkB,GAAG,cAAK,CAAC,mBAAmB,CAAC;oBACpD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,mBAAmB,CAAC,KAAgB,CAAC,WAAW,EAAE,CAAC;gBAC5D,MAAM,WAAW,GAAG,cAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;gBAEvF,IAAI,CAAC,QAAQ,IAAI,kBAAkB,KAAK,WAAW,EAAE;oBACpD,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBACxB,MAAM,QAAQ,GAAG;wBAChB,eAAe,EAAE,IAAI;wBACrB,SAAS,EAAE,SAAS,CAAC,IAAI;wBACzB,QAAQ,EAAE,IAAI;wBACd,QAAQ;wBACR,MAAM,EAAE,cAAM,CAAC,IAAI;wBACnB,GAAG;qBACH,CAAC;oBACF,YAAY,CAAC,MAAM,GAAG,cAAM,CAAC,MAAM,CAAC;oBACpC,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC/B,YAAY,CAAC,eAAe,GAAG,IAAI,CAAC;oBACpC,MAAM,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACzC,OAAO,CAAC,KAAK,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACvD,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;wBAC3B,MAAM,SAAS,CAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;qBACjE;oBACD,QAAQ,GAAG,IAAI,CAAC;iBAChB;gBAED,IAAI,CAAC,QAAQ;uBACT,CAAC,cAAK,CAAC,iBAAiB,CAAC;uBACzB,CAAC,cAAK,CAAC,aAAa,CAAC;uBACrB,OAAO,IAAK,aAAa,CAAC,KAAgB,EAC5C;oBACD,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAe,CAAC;oBACtD,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;wBAChD,UAAU,EAAE,eAAG,EAAe;wBAC9B,YAAY,EAAE,gBAAI,EAAY;wBAC9B,QAAQ,EAAE,eAAG,EAAkB;wBAC/B,IAAI,EAAE,WAAW;wBACjB,iBAAiB,EAAE,eAAG,EAAe;qBACrC,CAAC,CAAC;oBAEH,IAAI,CAAC,cAAK,CAAC,cAAc,CAAC,EAAE;wBAC3B,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC1C,OAAO,CAAC,cAAc,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAmB,CAAC;qBACxF;oBAED,QAAQ,GAAG,IAAI,CAAC;iBAChB;gBAED,IAAI,CAAC,QAAQ,IAAI,CAAC,cAAK,CAAC,iBAAiB,CAAC,EAAE;oBAC3C,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAe,CAAC;oBACtD,QAAQ,GAAG,QAAQ;yBACjB,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,qBAAW,CAAC,OAAO,CAAC;yBACvD,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;wBACjB,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;4BAC7E,OAAO,IAAI,CAAC;yBACZ;wBACD,OAAO,KAAK,CAAC;oBACd,CAAC,CAAC,CAAC;iBACJ;gBAED,IAAI,QAAQ,EAAE;oBACb,MAAM,IAAI,EAAE,CAAC;iBACb;aAED;SACD;KAGD;SAAM;QACN,MAAM,IAAI,EAAE,CAAC;KACb;AACF,CAAC,CAAC;AAEF,kBAAe,0BAA0B,CAAC","sourcesContent":["import { Map, List } from 'immutable';\nimport { isNil } from 'lodash';\nimport { Middleware, RunTimeConfig, MessageRepository } from '../Api';\nimport { Issue, Status } from 'lexica-dialog-model/dist/Issue';\nimport {\n\tRequestMessage,\n\tBaseMessage,\n\tResponse,\n\tMessageType,\n} from 'lexica-dialog-model/dist/Message';\n\nconst updateLog = async (\n\tmessageRepository: MessageRepository,\n\trequestMessage: RequestMessage,\n\tissue: Issue) => {\n\trequestMessage.issueId = issue.id;\n\tawait messageRepository.save(requestMessage);\n};\n\nconst sortMessage = (messages: BaseMessage[]) => {\n\tconst sortedMessages = messages.slice();\n\tsortedMessages.sort((a: BaseMessage, b: BaseMessage) => a.date.getTime() - b.date.getTime());\n\treturn sortedMessages;\n};\n\nconst findFirstLibrarianMessage = (messages: BaseMessage[]) => {\n\tconst sortedMessages = sortMessage(messages).filter(message => isNil(message.sessionId));\n\tif (sortedMessages.length === 0) {\n\t\treturn null;\n\t}\n\treturn sortedMessages[0];\n};\n\nconst getLastMessageTimeGap = (messages: BaseMessage[]) => {\n\tif (messages.length <= 1) {\n\t\treturn 0;\n\t}\n\tconst sortedMessages = sortMessage(messages);\n\tconst lastMessage = sortedMessages.pop() as BaseMessage;\n\tconst last2Message = sortedMessages.pop() as BaseMessage;\n\treturn lastMessage.date.getTime() - last2Message.date.getTime();\n};\n\nconst suspendAutoReplyMiddleware: Middleware = async (context, next) => {\n\tconst {\n\t\tuni,\n\t\tuniConfigs,\n\t\trequest,\n\t\tmessenger,\n\t\tissueRepository,\n\t\tmessageRepository,\n\t\trequestMessage,\n\t\tintentRepository,\n\t\tlogger,\n\t} = context;\n\n\tif (!isNil(request)) {\n\t\tconst { senderId } = request;\n\t\tconst issues =\n\t\t\tawait issueRepository.findByUniAndSenderIdAndStatus(uni, senderId, Status.OPEN);\n\t\tlet issue: Issue;\n\n\t\tif (uniConfigs.has(RunTimeConfig.SUSPEND_AUTO_REPLY)\n\t\t\t&& (uniConfigs.get(RunTimeConfig.SUSPEND_AUTO_REPLY).value as boolean)) {\n\n\t\t\tif (issues.length === 0) {\n\t\t\t\tconst date = new Date();\n\t\t\t\tissue = await issueRepository.create({\n\t\t\t\t\tlastUpdatedDate: date,\n\t\t\t\t\tmessenger: messenger.name,\n\t\t\t\t\topenDate: date,\n\t\t\t\t\tsenderId,\n\t\t\t\t\tstatus: Status.OPEN,\n\t\t\t\t\tuni,\n\t\t\t\t});\n\n\t\t\t\tif (!isNil(requestMessage)) {\n\t\t\t\t\tawait updateLog(messageRepository, requestMessage, issue);\n\t\t\t\t}\n\n\t\t\t\tcontext.issue = issue;\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (issues.length === 0) {\n\t\t\tawait next();\n\t\t} else {\n\t\t\tconst workingIssue = issues[0];\n\t\t\tconst messages = sortMessage(await messageRepository.findByUniAndSenderIdAndIssueId(\n\t\t\t\tuni, senderId, workingIssue.id as string));\n\t\t\tconst firstLibrarianMessage = findFirstLibrarianMessage(messages);\n\t\t\tif (isNil(firstLibrarianMessage)) {\n\t\t\t\t// No response from librarian, keep chatbot reply\n\t\t\t\tawait next();\n\t\t\t} else {\n\t\t\t\t// Librarian already responded to user\n\t\t\t\tconst timeGap = getLastMessageTimeGap(messages);\n\t\t\t\tconst commandNameConfig =\n\t\t\t\t\tuniConfigs.get(RunTimeConfig.CONFIRM_CLOSE_ISSUE_COMMAND_NAME);\n\t\t\t\tconst timeGapConfig =\n\t\t\t\t\tuniConfigs.get(RunTimeConfig.TIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE);\n\t\t\t\tconst recreateIssueConfig =\n\t\t\t\t\tuniConfigs.get(RunTimeConfig.RECREATE_ISSUE_KEY_WORD);\n\t\t\t\tlet goToNext = false;\n\n\t\t\t\tif (isNil(commandNameConfig)) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'Config not found: [%s]',\n\t\t\t\t\t\tRunTimeConfig.CONFIRM_CLOSE_ISSUE_COMMAND_NAME,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isNil(timeGapConfig)) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'Config not found: [%s]',\n\t\t\t\t\t\tRunTimeConfig.TIME_GAP_IN_MS_TRIGGER_CONFIRM_CLOSE_ISSUE,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isNil(recreateIssueConfig)) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'Config not found: [%s]',\n\t\t\t\t\t\tRunTimeConfig.RECREATE_ISSUE_KEY_WORD,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst recreateIssueWords = isNil(recreateIssueConfig)\n\t\t\t\t\t? '' : (recreateIssueConfig.value as string).toLowerCase();\n\t\t\t\tconst requestText = isNil(request.message) ? undefined : request.message.toLowerCase();\n\n\t\t\t\tif (!goToNext && recreateIssueWords === requestText) {\n\t\t\t\t\tconst date = new Date();\n\t\t\t\t\tconst newIssue = {\n\t\t\t\t\t\tlastUpdatedDate: date,\n\t\t\t\t\t\tmessenger: messenger.name,\n\t\t\t\t\t\topenDate: date,\n\t\t\t\t\t\tsenderId,\n\t\t\t\t\t\tstatus: Status.OPEN,\n\t\t\t\t\t\tuni,\n\t\t\t\t\t};\n\t\t\t\t\tworkingIssue.status = Status.CLOSED;\n\t\t\t\t\tworkingIssue.closedDate = date;\n\t\t\t\t\tworkingIssue.lastUpdatedDate = date;\n\t\t\t\t\tawait issueRepository.save(workingIssue);\n\t\t\t\t\tcontext.issue = await issueRepository.create(newIssue);\n\t\t\t\t\tif (!isNil(requestMessage)) {\n\t\t\t\t\t\tawait updateLog(messageRepository, requestMessage, workingIssue);\n\t\t\t\t\t}\n\t\t\t\t\tgoToNext = true;\n\t\t\t\t}\n\n\t\t\t\tif (!goToNext\n\t\t\t\t\t&& !isNil(commandNameConfig)\n\t\t\t\t\t&& !isNil(timeGapConfig)\n\t\t\t\t\t&& timeGap >= (timeGapConfig.value as number)\n\t\t\t\t) {\n\t\t\t\t\tconst commandName = commandNameConfig.value as string;\n\t\t\t\t\tcontext.commands = context.commands.clear().push({\n\t\t\t\t\t\tattributes: Map<string, any>(),\n\t\t\t\t\t\tbotResponses: List<Response>(),\n\t\t\t\t\t\tfeatures: Map<string, string>(),\n\t\t\t\t\t\tname: commandName,\n\t\t\t\t\t\tprocessedFeatures: Map<string, any>(),\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!isNil(requestMessage)) {\n\t\t\t\t\t\trequestMessage.commands.push(commandName);\n\t\t\t\t\t\tcontext.requestMessage = await messageRepository.save(requestMessage) as RequestMessage;\n\t\t\t\t\t}\n\n\t\t\t\t\tgoToNext = true;\n\t\t\t\t}\n\n\t\t\t\tif (!goToNext && !isNil(commandNameConfig)) {\n\t\t\t\t\tconst commandName = commandNameConfig.value as string;\n\t\t\t\t\tgoToNext = messages\n\t\t\t\t\t\t.filter(message => message.type === MessageType.REQUEST)\n\t\t\t\t\t\t.some((message) => {\n\t\t\t\t\t\t\tif (!isNil(message.commands) && message.commands.indexOf(commandName) !== -1) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (goToNext) {\n\t\t\t\t\tawait next();\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t// End of if issues.length === 0\n\t} else {\n\t\tawait next();\n\t}\n};\n\nexport default suspendAutoReplyMiddleware;\n\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"de77d1c5943942fa684a75125b13eb9945e2441c"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/TranscodeMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/TranscodeMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":28},"end":{"line":22,"column":1}},"4":{"start":{"line":6,"column":43},"end":{"line":6,"column":50}},"5":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"6":{"start":{"line":11,"column":26},"end":{"line":13,"column":45}},"7":{"start":{"line":14,"column":21},"end":{"line":17,"column":10}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":43}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":51}},"10":{"start":{"line":21,"column":4},"end":{"line":21,"column":17}},"11":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":28},"end":{"line":5,"column":29}},"loc":{"start":{"line":5,"column":53},"end":{"line":22,"column":1}},"line":5}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":20,"column":5}},{"start":{"line":7,"column":4},"end":{"line":20,"column":5}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":10,"column":51}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},{"start":{"line":8,"column":12},"end":{"line":8,"column":52}},{"start":{"line":8,"column":56},"end":{"line":8,"column":96}},{"start":{"line":9,"column":11},"end":{"line":9,"column":50}},{"start":{"line":10,"column":11},"end":{"line":10,"column":51}}],"line":7},"2":{"loc":{"start":{"line":11,"column":26},"end":{"line":13,"column":45}},"type":"cond-expr","locations":[{"start":{"line":12,"column":14},"end":{"line":12,"column":45}},{"start":{"line":13,"column":14},"end":{"line":13,"column":45}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":2,"7":2,"8":2,"9":2,"10":42,"11":1},"f":{"0":42},"b":{"0":[2,40],"1":[42,42,41,2,2],"2":[1,1]},"inputSourceMap":{"version":3,"file":"TranscodeMiddleware.js","sourceRoot":"","sources":["TranscodeMiddleware.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,gCAAiD;AAEjD,MAAM,mBAAmB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC/D,MAAM,EACL,OAAO,EACP,gBAAgB,GAChB,GAAG,OAAO,CAAC;IAEZ,IAAI,CAAC,cAAK,CAAC,OAAO,CAAC;WACf,CAAC,OAAO,CAAC,IAAI,KAAK,iBAAW,CAAC,KAAK,IAAI,OAAO,CAAC,IAAI,KAAK,iBAAW,CAAC,KAAK,CAAC;WAC1E,CAAC,cAAK,CAAC,OAAO,CAAC,cAAc,CAAC;WAC9B,CAAC,cAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;QACpC,MAAM,SAAS,GACd,OAAO,CAAC,IAAI,KAAK,iBAAW,CAAC,KAAK;YAClC,CAAC,CAAC,gBAAgB,CAAC,cAAc;YACjC,CAAC,CAAC,gBAAgB,CAAC,cAAc,CAAC;QACnC,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACnD,WAAW,EAAE,OAAO,CAAC,eAAe;YACpC,IAAI,EAAE,OAAO,CAAC,cAAc;SAC5B,CAAC,CAAC;QACH,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC;QACnC,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;KAC3C;IAED,MAAM,IAAI,EAAE,CAAC;AACd,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Middleware, RequestType } from '../Api';\n\nconst transcodeMiddleware: Middleware = async (context, next) => {\n\tconst {\n\t\trequest,\n\t\ttranscodeService,\n\t} = context;\n\n\tif (!isNil(request)\n\t\t&& (request.type === RequestType.AUDIO || request.type === RequestType.VIDEO)\n\t\t&& !isNil(request.fileStoredPath)\n\t\t&& !isNil(request.fileContentType)) {\n\t\tconst transcode =\n\t\t\trequest.type === RequestType.AUDIO\n\t\t\t? transcodeService.transcodeAudio\n\t\t\t: transcodeService.transcodeVideo;\n\t\tconst file = await transcode.call(transcodeService, {\n\t\t\tcontentType: request.fileContentType,\n\t\t\tpath: request.fileStoredPath,\n\t\t});\n\t\trequest.fileStoredPath = file.path;\n\t\trequest.fileContentType = file.contentType;\n\t}\n\n\tawait next();\n};\n\nexport default transcodeMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"5e04e6279c2a945c7b99e0cc2b855eefaea792e1"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/UnitConfigMiddleware.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/UnitConfigMiddleware.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":28},"end":{"line":9,"column":1}},"3":{"start":{"line":5,"column":38},"end":{"line":5,"column":45}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":4},"end":{"line":7,"column":80}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":17}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":28},"end":{"line":4,"column":29}},"loc":{"start":{"line":4,"column":53},"end":{"line":9,"column":1}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":43,"4":43,"5":43,"6":43,"7":1},"f":{"0":43},"b":{},"inputSourceMap":{"version":3,"file":"UnitConfigMiddleware.js","sourceRoot":"","sources":["UnitConfigMiddleware.ts"],"names":[],"mappings":";;AACA,oCAAuC;AAGvC,MAAM,mBAAmB,GAAe,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;IAC9D,MAAM,EAAE,GAAG,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACtD,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,mBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;IACpE,MAAM,IAAI,EAAE,CAAC;AACf,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["import { Middleware } from '../Api';\nimport { toConfigMap } from '../Utils';\nimport { Config } from 'lexica-dialog-model/dist/Config';\n\nconst uniConfigMiddleware: Middleware = async (context, next) => {\n  const { uni, configRepository } = context;\n  const configs = await configRepository.findByUni(uni);\n  context.uniConfigs = context.uniConfigs.merge(toConfigMap(configs));\n  await next();\n};\n\nexport default uniConfigMiddleware;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"f9e72ec856d06a93b00c6fad2f20bfa1381fa941"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/middlewares/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":44},"end":{"line":3,"column":92}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":92}},"3":{"start":{"line":5,"column":37},"end":{"line":5,"column":78}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":78}},"5":{"start":{"line":7,"column":42},"end":{"line":7,"column":88}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":88}},"7":{"start":{"line":9,"column":37},"end":{"line":9,"column":78}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":78}},"9":{"start":{"line":11,"column":35},"end":{"line":11,"column":74}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":74}},"11":{"start":{"line":13,"column":29},"end":{"line":13,"column":62}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"13":{"start":{"line":15,"column":30},"end":{"line":15,"column":64}},"14":{"start":{"line":16,"column":0},"end":{"line":16,"column":64}},"15":{"start":{"line":17,"column":38},"end":{"line":17,"column":80}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":80}},"17":{"start":{"line":19,"column":31},"end":{"line":19,"column":66}},"18":{"start":{"line":20,"column":0},"end":{"line":20,"column":66}},"19":{"start":{"line":21,"column":35},"end":{"line":21,"column":74}},"20":{"start":{"line":22,"column":0},"end":{"line":22,"column":74}},"21":{"start":{"line":23,"column":39},"end":{"line":23,"column":82}},"22":{"start":{"line":24,"column":0},"end":{"line":24,"column":82}},"23":{"start":{"line":25,"column":33},"end":{"line":25,"column":70}},"24":{"start":{"line":26,"column":0},"end":{"line":26,"column":70}},"25":{"start":{"line":27,"column":31},"end":{"line":27,"column":66}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":66}},"27":{"start":{"line":29,"column":38},"end":{"line":29,"column":80}},"28":{"start":{"line":30,"column":0},"end":{"line":30,"column":80}},"29":{"start":{"line":31,"column":37},"end":{"line":31,"column":78}},"30":{"start":{"line":32,"column":0},"end":{"line":32,"column":78}},"31":{"start":{"line":33,"column":40},"end":{"line":33,"column":84}},"32":{"start":{"line":34,"column":0},"end":{"line":34,"column":84}},"33":{"start":{"line":35,"column":33},"end":{"line":35,"column":70}},"34":{"start":{"line":36,"column":0},"end":{"line":36,"column":70}},"35":{"start":{"line":37,"column":34},"end":{"line":37,"column":72}},"36":{"start":{"line":38,"column":0},"end":{"line":38,"column":72}},"37":{"start":{"line":39,"column":28},"end":{"line":39,"column":60}},"38":{"start":{"line":40,"column":0},"end":{"line":40,"column":60}},"39":{"start":{"line":41,"column":37},"end":{"line":41,"column":78}},"40":{"start":{"line":42,"column":0},"end":{"line":42,"column":78}},"41":{"start":{"line":43,"column":28},"end":{"line":43,"column":60}},"42":{"start":{"line":44,"column":0},"end":{"line":44,"column":60}},"43":{"start":{"line":45,"column":22},"end":{"line":45,"column":48}},"44":{"start":{"line":46,"column":0},"end":{"line":46,"column":48}},"45":{"start":{"line":47,"column":42},"end":{"line":47,"column":88}},"46":{"start":{"line":48,"column":0},"end":{"line":48,"column":88}},"47":{"start":{"line":49,"column":40},"end":{"line":49,"column":84}},"48":{"start":{"line":50,"column":0},"end":{"line":50,"column":84}},"49":{"start":{"line":51,"column":41},"end":{"line":51,"column":86}},"50":{"start":{"line":52,"column":0},"end":{"line":52,"column":86}},"51":{"start":{"line":53,"column":29},"end":{"line":53,"column":62}},"52":{"start":{"line":54,"column":0},"end":{"line":54,"column":62}},"53":{"start":{"line":55,"column":26},"end":{"line":55,"column":56}},"54":{"start":{"line":56,"column":0},"end":{"line":56,"column":56}},"55":{"start":{"line":57,"column":36},"end":{"line":57,"column":76}},"56":{"start":{"line":58,"column":0},"end":{"line":58,"column":76}},"57":{"start":{"line":59,"column":35},"end":{"line":59,"column":74}},"58":{"start":{"line":60,"column":0},"end":{"line":60,"column":74}},"59":{"start":{"line":61,"column":28},"end":{"line":61,"column":60}},"60":{"start":{"line":62,"column":0},"end":{"line":62,"column":60}},"61":{"start":{"line":63,"column":29},"end":{"line":63,"column":62}},"62":{"start":{"line":64,"column":0},"end":{"line":64,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,6FAC+C;AADtC,oFAAA,OAAO,CAAuC;AAEvD,+EAAyF;AAAhF,sEAAA,OAAO,CAAgC;AAChD,yFAAmG;AAA1F,gFAAA,OAAO,CAAqC;AACrD,+EAAyF;AAAhF,sEAAA,OAAO,CAAgC;AAChD,2EAAqF;AAA5E,kEAAA,OAAO,CAA8B;AAC9C,+DAAyE;AAAhE,sDAAA,OAAO,CAAwB;AACxC,iEAA2E;AAAlE,wDAAA,OAAO,CAAyB;AACzC,iFAA2F;AAAlF,wEAAA,OAAO,CAAiC;AACjD,mEAA6E;AAApE,0DAAA,OAAO,CAA0B;AAC1C,2EAAqF;AAA5E,kEAAA,OAAO,CAA8B;AAC9C,mFAA6F;AAApF,0EAAA,OAAO,CAAkC;AAClD,uEAAiF;AAAxE,8DAAA,OAAO,CAA4B;AAC5C,mEAA6E;AAApE,0DAAA,OAAO,CAA0B;AAC1C,iFAA2F;AAAlF,wEAAA,OAAO,CAAiC;AACjD,+EAAyF;AAAhF,sEAAA,OAAO,CAAgC;AAChD,qFAA+F;AAAtF,4EAAA,OAAO,CAAmC;AACnD,uEAAiF;AAAxE,8DAAA,OAAO,CAA4B;AAC5C,yEAAmF;AAA1E,gEAAA,OAAO,CAA6B;AAC7C,6DAAuE;AAA9D,oDAAA,OAAO,CAAuB;AACvC,+EAAyF;AAAhF,sEAAA,OAAO,CAAgC;AAChD,6DAAuE;AAA9D,oDAAA,OAAO,CAAuB;AACvC,iDAA2D;AAAlD,wCAAA,OAAO,CAAiB;AACjC,yFAAmG;AAA1F,gFAAA,OAAO,CAAqC;AACrD,qFAA+F;AAAtF,4EAAA,OAAO,CAAmC;AACnD,uFAAiG;AAAxF,8EAAA,OAAO,CAAoC;AACpD,+DAAyE;AAAhE,sDAAA,OAAO,CAAwB;AACxC,yDAAmE;AAA1D,gDAAA,OAAO,CAAqB;AACrC,6EAAuF;AAA9E,oEAAA,OAAO,CAA+B;AAC/C,2EAAqF;AAA5E,kEAAA,OAAO,CAA8B;AAC9C,6DAAuE;AAA9D,oDAAA,OAAO,CAAuB;AACvC,+DAAyE;AAAhE,sDAAA,OAAO,CAAwB","sourcesContent":["export { default as additionalResponseMessageMiddleware }\n  from './AdditionalResponseMessageMiddleware';\nexport { default as commandsValidationMiddleware } from './CommandsValidationMiddleware';\nexport { default as continuousOptionsToTextMiddleware } from './ContinuousOptionsToTextMiddleware';\nexport { default as conversationIntentMiddleware } from './ConversationIntentMiddleware';\nexport { default as fallbackResponseMiddleware } from './FallbackResponseMiddleware';\nexport { default as fetchIssueMiddleware } from './FetchIssueMiddleware';\nexport { default as fileRequestMiddleware } from './FileRequestMiddleware';\nexport { default as fileRequestResponseMiddleware } from './FileRequestResponseMiddleware';\nexport { default as globalConfigMiddleware } from './GlobalConfigMiddleware';\nexport { default as flattenResponsesMiddleware } from './FlattenResponsesMiddleware';\nexport { default as intentDefaultFeatureMiddleware } from './IntentDefaultFeatureMiddleware';\nexport { default as intentExecutorMiddleware } from './IntentExecutorMiddleware';\nexport { default as intentOptionMiddleware } from './IntentOptionMiddleware';\nexport { default as intentPostProcessorMiddleware } from './IntentPostProcessorMiddleware';\nexport { default as intentPreProcessorMiddleware } from './IntentPreProcessorMiddleware';\nexport { default as intentRequiredFeatureMiddleware } from './IntentRequiredFeatureMiddleware';\nexport { default as intentResponseMiddleware } from './IntentResponseMiddleware';\nexport { default as memoriesFeatureMiddleware } from './MemoriesFeatureMiddleware';\nexport { default as messengerMiddleware } from './MessengerMiddleware';\nexport { default as messengerWhiteListMiddleware } from './MessengerWhiteListMiddleware';\nexport { default as newIntentMiddleware } from './NewIntentMiddleware';\nexport { default as nlpMiddleware } from './NlpMiddleware';\nexport { default as removeDuplicateResponseMiddleware } from './RemoveDuplicateResponseMiddleware';\nexport { default as requestMessageLoggingMiddleware } from './RequestMessageLoggingMiddleware';\nexport { default as responseMessageLoggingMiddleware } from './ResponseMessageLoggingMiddleware';\nexport { default as senderInfoMiddleware } from './SenderInfoMiddleware';\nexport { default as sessionMiddleware } from './SessionMiddleware';\nexport { default as startConversationMiddleware } from './StartConversationMiddleware';\nexport { default as suspendAutoReplyMiddleware } from './SuspendAutoReplyMiddleware';\nexport { default as transcodeMiddleware } from './TranscodeMiddleware';\nexport { default as unitConfigMiddleware } from './UnitConfigMiddleware';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"1dcb52fbbc8c7934bb80fdda47d570fed58d43db"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/nlp/DefaultNlpService.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/nlp/DefaultNlpService.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":49}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":23}},"5":{"start":{"line":11,"column":25},"end":{"line":11,"column":107}},"6":{"start":{"line":12,"column":25},"end":{"line":21,"column":10}},"7":{"start":{"line":22,"column":8},"end":{"line":25,"column":13}},"8":{"start":{"line":22,"column":59},"end":{"line":25,"column":9}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":21},"end":{"line":9,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":54},"end":{"line":26,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":45},"end":{"line":22,"column":46}},"loc":{"start":{"line":22,"column":59},"end":{"line":25,"column":9}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":25},"end":{"line":11,"column":107}},"type":"cond-expr","locations":[{"start":{"line":11,"column":65},"end":{"line":11,"column":95}},{"start":{"line":11,"column":98},"end":{"line":11,"column":107}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"DefaultNlpService.js","sourceRoot":"","sources":["DefaultNlpService.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,yCAAsC;AACtC,kDAAkD;AAGlD,MAAM,iBAAiB;IAEtB,YAA6B,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;IAAI,CAAC;IAEtC,KAAK,CAAC,OAAO,CACnB,OAAe,EACf,GAAW,EACX,oBAAiD;QAEjD,MAAM,QAAQ,GAAG,CAAC,cAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3F,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC;YAC9B,IAAI,EAAE;gBACL,QAAQ;gBACR,GAAG,EAAE,OAAO;gBACZ,GAAG;aACH;YACD,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,IAAI,CAAC,GAAG;SACb,CAAC,CAAC;QACH,OAAO,gBAAI,CACV,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;YAC/B,QAAQ,EAAE,eAAG,CAAiB,OAAO,CAAC,QAAQ,CAAC;YAC/C,IAAI,EAAE,OAAO,CAAC,IAAI;SAClB,CAAC,CAAC,CACH,CAAC;IACH,CAAC;CAED;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport * as request from 'request-promise-native';\nimport { BotCommand, NlpService, IntentMemoryFeatures } from '../Api';\n\nclass DefaultNlpService implements NlpService {\n\n\tconstructor(private readonly url: string) { }\n\n\tpublic async analyse(\n\t\tmessage: string,\n\t\tuni: string,\n\t\tintentMemoryFeatures?: List<IntentMemoryFeatures>,\n\t): Promise<List<BotCommand>> {\n\t\tconst features = !isNil(intentMemoryFeatures) ? intentMemoryFeatures.toArray() : undefined;\n\t\tconst commands = await request({\n\t\t\tbody: {\n\t\t\t\tfeatures,\n\t\t\t\tmsg: message,\n\t\t\t\tuni,\n\t\t\t},\n\t\t\tjson: true,\n\t\t\tmethod: 'POST',\n\t\t\turi: this.url,\n\t\t});\n\t\treturn List<BotCommand>(\n\t\t\tcommands.map((command: any) => ({\n\t\t\t\tfeatures: Map<string, string>(command.features),\n\t\t\t\tname: command.name,\n\t\t\t})),\n\t\t);\n\t}\n\n}\n\nexport default DefaultNlpService;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"4fd9ee347beac3ca24b6a1d0196e4fa5c4dc12f2"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/post-processors/DatePostProcessor.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/post-processors/DatePostProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":26},"end":{"line":10,"column":1}},"2":{"start":{"line":4,"column":4},"end":{"line":9,"column":15}},"3":{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},"4":{"start":{"line":6,"column":12},"end":{"line":6,"column":49}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":21}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":26},"end":{"line":3,"column":27}},"loc":{"start":{"line":3,"column":55},"end":{"line":10,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":24},"end":{"line":4,"column":25}},"loc":{"start":{"line":4,"column":40},"end":{"line":9,"column":5}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},"type":"if","locations":[{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},{"start":{"line":5,"column":8},"end":{"line":7,"column":9}}],"line":5}},"s":{"0":1,"1":1,"2":1,"3":3,"4":1,"5":2,"6":1},"f":{"0":1,"1":3},"b":{"0":[1,2]},"inputSourceMap":{"version":3,"file":"DatePostProcessor.js","sourceRoot":"","sources":["DatePostProcessor.ts"],"names":[],"mappings":";;AAGA,MAAM,iBAAiB,GAAkB,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;IACpE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAW,EAAE,EAAE;QAC1C,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;YAChC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;SACrC;QACD,OAAO,KAAK,CAAC;IACd,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,kBAAe,iBAAiB,CAAC","sourcesContent":["import { Map } from 'immutable';\nimport { PostProcessor } from '../Api';\n\nconst datePostProcessor: PostProcessor = async (context, features) => {\n\treturn features.map((value, key: string) => {\n\t\tif (key.search(/date/ig) !== -1) {\n\t\t\treturn new Date(parseInt(value, 10));\n\t\t}\n\t\treturn value;\n\t}).toMap();\n};\n\nexport default datePostProcessor;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"80c4a84a023721ae28c67f4ebd901bb00d1dfeba"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/post-processors/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/post-processors/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":26},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,yDAAmE;AAA1D,gDAAA,OAAO,CAAqB","sourcesContent":["export { default as datePostProcessor } from './DatePostProcessor';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"2c04898c6f69105ade5850bf02e55dce5d6d06f7"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/pre-processors/SenderNamePreProcessor.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/pre-processors/SenderNamePreProcessor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":31},"end":{"line":16,"column":1}},"3":{"start":{"line":5,"column":27},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":22}},"5":{"start":{"line":7,"column":19},"end":{"line":7,"column":21}},"6":{"start":{"line":8,"column":4},"end":{"line":11,"column":5}},"7":{"start":{"line":9,"column":8},"end":{"line":9,"column":41}},"8":{"start":{"line":10,"column":8},"end":{"line":10,"column":39}},"9":{"start":{"line":12,"column":4},"end":{"line":15,"column":63}},"10":{"start":{"line":17,"column":0},"end":{"line":17,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":31},"end":{"line":4,"column":32}},"loc":{"start":{"line":4,"column":60},"end":{"line":16,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":11,"column":5}},{"start":{"line":8,"column":4},"end":{"line":11,"column":5}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":1},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"file":"SenderNamePreProcessor.js","sourceRoot":"","sources":["SenderNamePreProcessor.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAG/B,MAAM,sBAAsB,GAAiB,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;IACxE,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAE/B,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAElB,IAAI,CAAC,cAAK,CAAC,UAAU,CAAC,EAAE;QACvB,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QACjC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;KAC/B;IACD,OAAO,QAAQ;SACb,GAAG,CAAC,mBAAmB,EAAE,SAAS,CAAC;SACnC,GAAG,CAAC,kBAAkB,EAAE,QAAQ,CAAC;SACjC,GAAG,CAAC,aAAa,EAAE,GAAG,SAAS,IAAI,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,kBAAe,sBAAsB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { PreProcessor } from '../Api';\n\nconst senderNamePreProcessor: PreProcessor = async (context, features) => {\n\tconst { senderInfo } = context;\n\n\tlet firstName = '';\n\tlet lastName = '';\n\n\tif (!isNil(senderInfo)) {\n\t\tfirstName = senderInfo.firstName;\n\t\tlastName = senderInfo.lastName;\n\t}\n\treturn features\n\t\t.set('SENDER_FIRST_NAME', firstName)\n\t\t.set('SENDER_LAST_NAME', lastName)\n\t\t.set('SENDER_NAME', `${firstName} ${lastName}`.trim());\n};\n\nexport default senderNamePreProcessor;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"daa8b0b42948c379312a47cd9774bf30c1b9d123"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/pre-processors/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/pre-processors/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":31},"end":{"line":3,"column":66}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,mEAA6E;AAApE,0DAAA,OAAO,CAA0B","sourcesContent":["export { default as senderNamePreProcessor } from './SenderNamePreProcessor';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"fc7b4b44e3c89c3533695f2845286c796c04b125"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/RedisSessionRepository.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/RedisSessionRepository.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":29}},"3":{"start":{"line":9,"column":8},"end":{"line":19,"column":11}},"4":{"start":{"line":10,"column":24},"end":{"line":10,"column":53}},"5":{"start":{"line":11,"column":12},"end":{"line":18,"column":15}},"6":{"start":{"line":12,"column":16},"end":{"line":17,"column":17}},"7":{"start":{"line":13,"column":20},"end":{"line":13,"column":47}},"8":{"start":{"line":16,"column":20},"end":{"line":16,"column":32}},"9":{"start":{"line":22,"column":8},"end":{"line":32,"column":11}},"10":{"start":{"line":23,"column":24},"end":{"line":23,"column":53}},"11":{"start":{"line":24,"column":12},"end":{"line":31,"column":15}},"12":{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},"13":{"start":{"line":26,"column":20},"end":{"line":26,"column":30}},"14":{"start":{"line":29,"column":20},"end":{"line":29,"column":32}},"15":{"start":{"line":35,"column":8},"end":{"line":35,"column":36}},"16":{"start":{"line":38,"column":0},"end":{"line":38,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":24},"end":{"line":7,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":40},"end":{"line":20,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":27},"end":{"line":9,"column":28}},"loc":{"start":{"line":9,"column":48},"end":{"line":19,"column":9}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":33},"end":{"line":11,"column":34}},"loc":{"start":{"line":11,"column":49},"end":{"line":18,"column":13}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":45},"end":{"line":33,"column":5}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":22,"column":27},"end":{"line":22,"column":28}},"loc":{"start":{"line":22,"column":48},"end":{"line":32,"column":9}},"line":22},"6":{"name":"(anonymous_6)","decl":{"start":{"line":24,"column":76},"end":{"line":24,"column":77}},"loc":{"start":{"line":24,"column":92},"end":{"line":31,"column":13}},"line":24},"7":{"name":"(anonymous_7)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":29},"end":{"line":36,"column":5}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":16},"end":{"line":17,"column":17}},"type":"if","locations":[{"start":{"line":12,"column":16},"end":{"line":17,"column":17}},{"start":{"line":12,"column":16},"end":{"line":17,"column":17}}],"line":12},"1":{"loc":{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},"type":"if","locations":[{"start":{"line":25,"column":16},"end":{"line":30,"column":17}},{"start":{"line":25,"column":16},"end":{"line":30,"column":17}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":42,"4":42,"5":42,"6":42,"7":42,"8":0,"9":39,"10":39,"11":39,"12":39,"13":39,"14":0,"15":81,"16":1},"f":{"0":1,"1":42,"2":42,"3":42,"4":39,"5":39,"6":39,"7":81},"b":{"0":[42,0],"1":[39,0]},"inputSourceMap":{"version":3,"file":"RedisSessionRepository.js","sourceRoot":"","sources":["RedisSessionRepository.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAI/B,MAAM,sBAAsB;IAE1B,YAAoB,MAAmB;QAAnB,WAAM,GAAN,MAAM,CAAa;IAAI,CAAC;IAErC,oBAAoB,CAAC,GAAW,EAAE,QAAgB;QACvD,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAClC,IAAI,cAAK,CAAC,GAAG,CAAC,EAAE;oBACd,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC5B;qBAAM;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,IAAI,CAAC,GAAW,EAAE,QAAgB,EAAE,OAAgB,EAAE,UAAkB;QAC7E,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAO3C,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAC7E,IAAI,cAAK,CAAC,GAAG,CAAC,EAAE;oBACd,OAAO,EAAE,CAAC;iBACX;qBAAM;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAES,SAAS,CAAC,GAAW,EAAE,QAAgB;QAC/C,OAAO,GAAG,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,CAAC;CAEF;AAED,kBAAe,sBAAsB,CAAC","sourcesContent":["import { isNil } from 'lodash';\nimport { RedisClient } from 'redis';\nimport { Session, SessionRepository } from '../Api';\n\nclass RedisSessionRepository implements SessionRepository {\n\n  constructor(private client: RedisClient) { }\n\n  public findByUniAndSenderId(uni: string, senderId: string): Promise<Session> {\n    return new Promise<Session>((resolve, reject) => {\n      const key = this.createKey(uni, senderId);\n      this.client.get(key, (err, value) => {\n        if (isNil(err)) {\n          resolve(JSON.parse(value));\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  public save(uni: string, senderId: string, session: Session, expireInMs: number): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      /**\n       * EX seconds -- Set the specified expire time, in seconds.\n       * PX milliseconds -- Set the specified expire time, in milliseconds.\n       * NX -- Only set the key if it does not already exist.\n       * XX -- Only set the key if it already exist.\n       */\n      const key = this.createKey(uni, senderId);\n      this.client.set(key, JSON.stringify(session), 'PX', expireInMs, (err, value) => {\n        if (isNil(err)) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  protected createKey(uni: string, senderId: string): string {\n    return `${uni}_${senderId}`;\n  }\n\n}\n\nexport default RedisSessionRepository;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"da98fa2dfb98cf59ebabd50be9a91e420651a6f2"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/SessionService.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/SessionService.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":28}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":51}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":23}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":33}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":37}},"8":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"9":{"start":{"line":15,"column":12},"end":{"line":15,"column":38}},"10":{"start":{"line":19,"column":8},"end":{"line":24,"column":49}},"11":{"start":{"line":21,"column":12},"end":{"line":21,"column":46}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":26}},"13":{"start":{"line":24,"column":30},"end":{"line":24,"column":47}},"14":{"start":{"line":25,"column":8},"end":{"line":31,"column":9}},"15":{"start":{"line":26,"column":12},"end":{"line":30,"column":15}},"16":{"start":{"line":28,"column":16},"end":{"line":28,"column":45}},"17":{"start":{"line":29,"column":16},"end":{"line":29,"column":37}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":98}},"19":{"start":{"line":35,"column":8},"end":{"line":35,"column":31}},"20":{"start":{"line":38,"column":21},"end":{"line":38,"column":65}},"21":{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},"22":{"start":{"line":40,"column":8},"end":{"line":44,"column":11}},"23":{"start":{"line":47,"column":8},"end":{"line":47,"column":135}},"24":{"start":{"line":47,"column":66},"end":{"line":47,"column":114}},"25":{"start":{"line":50,"column":8},"end":{"line":53,"column":13}},"26":{"start":{"line":50,"column":69},"end":{"line":53,"column":9}},"27":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"28":{"start":{"line":57,"column":12},"end":{"line":57,"column":55}},"29":{"start":{"line":59,"column":8},"end":{"line":62,"column":10}},"30":{"start":{"line":65,"column":8},"end":{"line":65,"column":58}},"31":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"32":{"start":{"line":69,"column":12},"end":{"line":69,"column":47}},"33":{"start":{"line":71,"column":8},"end":{"line":71,"column":48}},"34":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"35":{"start":{"line":75,"column":12},"end":{"line":75,"column":47}},"36":{"start":{"line":77,"column":8},"end":{"line":77,"column":67}},"37":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"38":{"start":{"line":81,"column":12},"end":{"line":81,"column":47}},"39":{"start":{"line":83,"column":8},"end":{"line":83,"column":65}},"40":{"start":{"line":86,"column":8},"end":{"line":86,"column":41}},"41":{"start":{"line":89,"column":8},"end":{"line":89,"column":43}},"42":{"start":{"line":92,"column":8},"end":{"line":92,"column":57}},"43":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"44":{"start":{"line":96,"column":12},"end":{"line":96,"column":42}},"45":{"start":{"line":98,"column":8},"end":{"line":98,"column":40}},"46":{"start":{"line":101,"column":8},"end":{"line":101,"column":40}},"47":{"start":{"line":104,"column":8},"end":{"line":104,"column":98}},"48":{"start":{"line":105,"column":8},"end":{"line":110,"column":9}},"49":{"start":{"line":106,"column":12},"end":{"line":109,"column":14}},"50":{"start":{"line":113,"column":0},"end":{"line":113,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":62},"end":{"line":12,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":17},"end":{"line":17,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":17},"end":{"line":33,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":17},"end":{"line":20,"column":18}},"loc":{"start":{"line":20,"column":29},"end":{"line":23,"column":9}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":24,"column":20},"end":{"line":24,"column":21}},"loc":{"start":{"line":24,"column":30},"end":{"line":24,"column":47}},"line":24},"5":{"name":"(anonymous_5)","decl":{"start":{"line":27,"column":21},"end":{"line":27,"column":22}},"loc":{"start":{"line":27,"column":40},"end":{"line":30,"column":13}},"line":27},"6":{"name":"(anonymous_6)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":19},"end":{"line":36,"column":5}},"line":34},"7":{"name":"(anonymous_7)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":32},"end":{"line":45,"column":5}},"line":37},"8":{"name":"(anonymous_8)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":26},"end":{"line":48,"column":5}},"line":46},"9":{"name":"(anonymous_9)","decl":{"start":{"line":47,"column":44},"end":{"line":47,"column":45}},"loc":{"start":{"line":47,"column":66},"end":{"line":47,"column":114}},"line":47},"10":{"name":"(anonymous_10)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":30},"end":{"line":54,"column":5}},"line":49},"11":{"name":"(anonymous_11)","decl":{"start":{"line":50,"column":58},"end":{"line":50,"column":59}},"loc":{"start":{"line":50,"column":69},"end":{"line":53,"column":9}},"line":50},"12":{"name":"(anonymous_12)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":40},"end":{"line":63,"column":5}},"line":55},"13":{"name":"(anonymous_13)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":22},"end":{"line":66,"column":5}},"line":64},"14":{"name":"(anonymous_14)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":28},"end":{"line":72,"column":5}},"line":67},"15":{"name":"(anonymous_15)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":30},"end":{"line":78,"column":5}},"line":73},"16":{"name":"(anonymous_16)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":41},"end":{"line":84,"column":5}},"line":79},"17":{"name":"(anonymous_17)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":22},"end":{"line":87,"column":5}},"line":85},"18":{"name":"(anonymous_18)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":24},"end":{"line":90,"column":5}},"line":88},"19":{"name":"(anonymous_19)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":17},"end":{"line":93,"column":5}},"line":91},"20":{"name":"(anonymous_20)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":17},"end":{"line":99,"column":5}},"line":94},"21":{"name":"(anonymous_21)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":20},"end":{"line":102,"column":5}},"line":100},"22":{"name":"(anonymous_22)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":25},"end":{"line":111,"column":5}},"line":103}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"1":{"loc":{"start":{"line":25,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":31,"column":9}},{"start":{"line":25,"column":8},"end":{"line":31,"column":9}}],"line":25},"2":{"loc":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},{"start":{"line":56,"column":8},"end":{"line":58,"column":9}}],"line":56},"3":{"loc":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},{"start":{"line":68,"column":8},"end":{"line":70,"column":9}}],"line":68},"4":{"loc":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},{"start":{"line":74,"column":8},"end":{"line":76,"column":9}}],"line":74},"5":{"loc":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},{"start":{"line":80,"column":8},"end":{"line":82,"column":9}}],"line":80},"6":{"loc":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},{"start":{"line":95,"column":8},"end":{"line":97,"column":9}}],"line":95},"7":{"loc":{"start":{"line":105,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":110,"column":9}},{"start":{"line":105,"column":8},"end":{"line":110,"column":9}}],"line":105}},"s":{"0":1,"1":1,"2":1,"3":1,"4":42,"5":42,"6":42,"7":42,"8":42,"9":42,"10":39,"11":48,"12":48,"13":48,"14":39,"15":6,"16":10,"17":10,"18":39,"19":84,"20":32,"21":32,"22":32,"23":66,"24":30,"25":38,"26":15,"27":1,"28":0,"29":1,"30":39,"31":2,"32":0,"33":2,"34":2,"35":0,"36":2,"37":1,"38":0,"39":1,"40":0,"41":6,"42":38,"43":5,"44":0,"45":5,"46":5,"47":42,"48":42,"49":20,"50":1},"f":{"0":42,"1":42,"2":39,"3":48,"4":48,"5":10,"6":84,"7":32,"8":66,"9":30,"10":38,"11":15,"12":1,"13":39,"14":2,"15":2,"16":1,"17":0,"18":6,"19":38,"20":5,"21":5,"22":42},"b":{"0":[42,0],"1":[6,33],"2":[0,1],"3":[0,2],"4":[0,2],"5":[0,1],"6":[0,5],"7":[20,22]},"inputSourceMap":{"version":3,"file":"SessionService.js","sourceRoot":"","sources":["SessionService.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNil, defaultTo } from 'lodash';\nimport { Map, List } from 'immutable';\nimport * as uuid from 'uuid';\nimport { Session, SessionRepository, SessionOption, SessionService } from '../Api';\nimport { Intent } from 'lexica-dialog-model/dist/Intent';\n\nclass DefaultSessionService implements SessionService {\n\n  private session: Session;\n\n  constructor(\n    private sessionRepository: SessionRepository,\n    private uni: string,\n    private senderId: string,\n    private expireInMs: number) {\n\n  }\n\n  public async init(): Promise<void> {\n    if (isNil(this.session)) {\n      await this.findOrCreate();\n    }\n  }\n\n  public async save(): Promise<void> {\n    this.session.memories = this.session.memories\n      .map((memory) => {\n        memory.expire = memory.expire - 1;\n        return memory;\n      })\n      .filter(memory => memory.expire > 0);\n    if (!isNil(this.session.lastOptions)) {\n      this.session.lastOptions = this.session.lastOptions\n        .map((sessionOption) => {\n          sessionOption.liveCount += 1;\n          return sessionOption;\n        });\n    }\n    await this.sessionRepository.save(this.uni, this.senderId, this.session, this.expireInMs);\n  }\n\n  public getSessionId(): string {\n    return this.session.id;\n  }\n\n  public addMemory(intent: Intent, features: Map<string, string>) {\n    let expire = defaultTo(intent.sessionExpire, -1);\n    expire = expire + 1;\n    this.session.memories.push({\n      expire,\n      features: features.toObject(),\n      intent,\n    });\n  }\n\n  public getMemoriesFeatures(): Map<string, string> {\n    return this.session.memories.reduce(\n      (features, memory) => features.merge(Map(memory.features)), Map<string, string>(),\n    );\n  }\n\n  public getIntentMemoryFeatures() {\n    return List(this.session.memories.map(memory => ({\n      command: memory.intent.command,\n      features: memory.features,\n    })));\n  }\n\n  public startConversation(intent: Intent, features: Map<string, string>): void {\n    if (this.hasConversation()) {\n      throw new Error('Already in conversation');\n    }\n    this.session.conversation = {\n      features: features.toObject(),\n      intent,\n    };\n  }\n\n  public hasConversation(): boolean {\n    return !isNil(this.session.conversation);\n  }\n\n  public getConversationIntent(): Intent {\n    if (isNil(this.session.conversation)) {\n      throw new Error('No conversation');\n    }\n    return this.session.conversation.intent;\n  }\n\n  public getConversationFeatures(): Map<string, string> {\n    if (isNil(this.session.conversation)) {\n      throw new Error('No conversation');\n    }\n    return Map(this.session.conversation.features);\n  }\n\n  public updateConversationFeatures(features: Map<string, string>): void {\n    if (isNil(this.session.conversation)) {\n      throw new Error('No conversation');\n    }\n    this.session.conversation.features = features.toObject();\n  }\n\n  public endConversation(): void {\n    delete this.session.conversation;\n  }\n\n  public setOptions(options: SessionOption[]): void {\n    this.session.lastOptions = options;\n  }\n\n  public hasOptions(): boolean {\n    return !isNil(this.session.lastOptions);\n  }\n\n  public getOptions(): SessionOption[] {\n    if (isNil(this.session.lastOptions)) {\n      throw new Error('No options');\n    }\n    return this.session.lastOptions;\n  }\n\n  public removeOptions(): void {\n    delete this.session.lastOptions;\n  }\n\n  protected async findOrCreate(): Promise<void> {\n    this.session = await this.sessionRepository.findByUniAndSenderId(this.uni, this.senderId);\n    if (isNil(this.session)) {\n      this.session = {\n        id: uuid.v4(),\n        memories: [],\n      };\n    }\n  }\n\n}\n\nexport default DefaultSessionService;\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"9b6c4fc3f118670a010aebb722241abe21fe3a3d"}
,"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/index.ts": {"path":"/Users/tomlai/Documents/projects/workspace/lexica-os/lexica-dialog-core/src/session/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":23},"end":{"line":3,"column":50}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":31},"end":{"line":5,"column":66}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,mDAA6D;AAApD,0CAAA,OAAO,CAAkB;AAClC,mEAA6E;AAApE,0DAAA,OAAO,CAA0B","sourcesContent":["export { default as SessionService } from './SessionService';\nexport { default as RedisSessionRepository } from './RedisSessionRepository';\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"b20ce107efc7df230cca9f217fbbecbfa5265446"}
}
